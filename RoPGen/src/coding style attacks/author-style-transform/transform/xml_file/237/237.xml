<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/237/237.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:21"><decl pos:start="3:1" pos:end="3:20"><type pos:start="3:1" pos:end="3:9"><specifier pos:start="3:1" pos:end="3:5">const</specifier> <name pos:start="3:7" pos:end="3:9">int</name></type> <name pos:start="3:11" pos:end="3:14">maxn</name> <init pos:start="3:16" pos:end="3:20">= <expr pos:start="3:18" pos:end="3:20"><literal type="number" pos:start="3:18" pos:end="3:20">110</literal></expr></init></decl>;</decl_stmt>    
<decl_stmt pos:start="4:1" pos:end="4:23"><decl pos:start="4:1" pos:end="4:22"><type pos:start="4:1" pos:end="4:9"><specifier pos:start="4:1" pos:end="4:5">const</specifier> <name pos:start="4:7" pos:end="4:9">int</name></type> <name pos:start="4:11" pos:end="4:14">maxm</name> <init pos:start="4:16" pos:end="4:22">= <expr pos:start="4:18" pos:end="4:22"><literal type="number" pos:start="4:18" pos:end="4:22">10010</literal></expr></init></decl>;</decl_stmt>  
<struct pos:start="5:1" pos:end="7:15">struct <name pos:start="5:8" pos:end="5:11">Edge</name> <block pos:start="5:13" pos:end="7:1">{<public type="default" pos:start="6:5" pos:end="6:17">            
    <decl_stmt pos:start="6:5" pos:end="6:17"><decl pos:start="6:5" pos:end="6:10"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:10">to</name></decl>, <decl pos:start="6:13" pos:end="6:16"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:13" pos:end="6:16">next</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="7:3" pos:end="7:14"><name pos:start="7:3" pos:end="7:14"><name pos:start="7:3" pos:end="7:3">e</name><index pos:start="7:4" pos:end="7:14">[<expr pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:8">maxm</name> <operator pos:start="7:10" pos:end="7:11">&lt;&lt;</operator> <literal type="number" pos:start="7:13" pos:end="7:13">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt pos:start="8:1" pos:end="8:9"><decl pos:start="8:1" pos:end="8:8"><type pos:start="8:1" pos:end="8:3"><name pos:start="8:1" pos:end="8:3">int</name></type> <name pos:start="8:5" pos:end="8:8">ecnt</name></decl>;</decl_stmt>  
<decl_stmt pos:start="9:1" pos:end="9:15"><decl pos:start="9:1" pos:end="9:14"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:8">head</name><index pos:start="9:9" pos:end="9:14">[<expr pos:start="9:10" pos:end="9:13"><name pos:start="9:10" pos:end="9:13">maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="10:1" pos:end="15:1"><type pos:start="10:1" pos:end="10:4"><name pos:start="10:1" pos:end="10:4">void</name></type> <name pos:start="10:6" pos:end="10:12">addEdge</name><parameter_list pos:start="10:13" pos:end="10:26">(<parameter pos:start="10:14" pos:end="10:18"><decl pos:start="10:14" pos:end="10:18"><type pos:start="10:14" pos:end="10:18"><name pos:start="10:14" pos:end="10:16">int</name></type> <name pos:start="10:18" pos:end="10:18">u</name></decl></parameter>, <parameter pos:start="10:21" pos:end="10:25"><decl pos:start="10:21" pos:end="10:25"><type pos:start="10:21" pos:end="10:25"><name pos:start="10:21" pos:end="10:23">int</name></type> <name pos:start="10:25" pos:end="10:25">v</name></decl></parameter>)</parameter_list> <block pos:start="10:28" pos:end="15:1">{<block_content pos:start="11:5" pos:end="14:19">  
    <expr_stmt pos:start="11:5" pos:end="11:11"><expr pos:start="11:5" pos:end="11:10"><operator pos:start="11:5" pos:end="11:6">++</operator><name pos:start="11:7" pos:end="11:10">ecnt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:19"><expr pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:5">e</name><index pos:start="12:6" pos:end="12:11">[<expr pos:start="12:7" pos:end="12:10"><name pos:start="12:7" pos:end="12:10">ecnt</name></expr>]</index></name><operator pos:start="12:12" pos:end="12:12">.</operator><name pos:start="12:13" pos:end="12:14">to</name> <operator pos:start="12:16" pos:end="12:16">=</operator> <name pos:start="12:18" pos:end="12:18">v</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:5">e</name><index pos:start="13:6" pos:end="13:11">[<expr pos:start="13:7" pos:end="13:10"><name pos:start="13:7" pos:end="13:10">ecnt</name></expr>]</index></name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:16">next</name> <operator pos:start="13:18" pos:end="13:18">=</operator> <name pos:start="13:20" pos:end="13:26"><name pos:start="13:20" pos:end="13:23">head</name><index pos:start="13:24" pos:end="13:26">[<expr pos:start="13:25" pos:end="13:25"><name pos:start="13:25" pos:end="13:25">u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:19"><expr pos:start="14:5" pos:end="14:18"><name pos:start="14:5" pos:end="14:11"><name pos:start="14:5" pos:end="14:8">head</name><index pos:start="14:9" pos:end="14:11">[<expr pos:start="14:10" pos:end="14:10"><name pos:start="14:10" pos:end="14:10">u</name></expr>]</index></name> <operator pos:start="14:13" pos:end="14:13">=</operator> <name pos:start="14:15" pos:end="14:18">ecnt</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt pos:start="16:1" pos:end="16:6"><decl pos:start="16:1" pos:end="16:5"><type pos:start="16:1" pos:end="16:3"><name pos:start="16:1" pos:end="16:3">int</name></type> <name pos:start="16:5" pos:end="16:5">n</name></decl>;</decl_stmt>          
<decl_stmt pos:start="17:1" pos:end="17:6"><decl pos:start="17:1" pos:end="17:5"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:5">m</name></decl>;</decl_stmt>          
<decl_stmt pos:start="18:1" pos:end="18:14"><decl pos:start="18:1" pos:end="18:13"><type pos:start="18:1" pos:end="18:3"><name pos:start="18:1" pos:end="18:3">int</name></type> <name pos:start="18:5" pos:end="18:13"><name pos:start="18:5" pos:end="18:7">dfn</name><index pos:start="18:8" pos:end="18:13">[<expr pos:start="18:9" pos:end="18:12"><name pos:start="18:9" pos:end="18:12">maxn</name></expr>]</index></name></decl>;</decl_stmt>  
<decl_stmt pos:start="19:1" pos:end="19:14"><decl pos:start="19:1" pos:end="19:13"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:7">low</name><index pos:start="19:8" pos:end="19:13">[<expr pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:12">maxn</name></expr>]</index></name></decl>;</decl_stmt>  
<decl_stmt pos:start="20:1" pos:end="20:10"><decl pos:start="20:1" pos:end="20:9"><type pos:start="20:1" pos:end="20:3"><name pos:start="20:1" pos:end="20:3">int</name></type> <name pos:start="20:5" pos:end="20:9">timer</name></decl>;</decl_stmt>      
<decl_stmt pos:start="21:1" pos:end="21:12"><decl pos:start="21:1" pos:end="21:11"><type pos:start="21:1" pos:end="21:3"><name pos:start="21:1" pos:end="21:3">int</name></type> <name pos:start="21:5" pos:end="21:11">bcc_cnt</name></decl>;</decl_stmt>    
<decl_stmt pos:start="22:1" pos:end="22:15"><decl pos:start="22:1" pos:end="22:14"><type pos:start="22:1" pos:end="22:3"><name pos:start="22:1" pos:end="22:3">int</name></type> <name pos:start="22:5" pos:end="22:14">bridge_cnt</name></decl>;</decl_stmt>
<decl_stmt pos:start="23:1" pos:end="23:22"><decl pos:start="23:1" pos:end="23:21"><type pos:start="23:1" pos:end="23:11"><name pos:start="23:1" pos:end="23:11"><name pos:start="23:1" pos:end="23:6">vector</name><argument_list type="generic" pos:start="23:7" pos:end="23:11">&lt;<argument pos:start="23:8" pos:end="23:10"><expr pos:start="23:8" pos:end="23:10"><name pos:start="23:8" pos:end="23:10">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:15">bcc</name><index pos:start="23:16" pos:end="23:21">[<expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">maxn</name></expr>]</index></name></decl>;</decl_stmt>  
<decl_stmt pos:start="24:1" pos:end="24:13"><decl pos:start="24:1" pos:end="24:12"><type pos:start="24:1" pos:end="24:10"><name pos:start="24:1" pos:end="24:10"><name pos:start="24:1" pos:end="24:5">stack</name><argument_list type="generic" pos:start="24:6" pos:end="24:10">&lt;<argument pos:start="24:7" pos:end="24:9"><expr pos:start="24:7" pos:end="24:9"><name pos:start="24:7" pos:end="24:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="24:12" pos:end="24:12">S</name></decl>;</decl_stmt>

<function pos:start="26:1" pos:end="52:1"><type pos:start="26:1" pos:end="26:4"><name pos:start="26:1" pos:end="26:4">void</name></type> <name pos:start="26:6" pos:end="26:11">tarjan</name><parameter_list pos:start="26:12" pos:end="26:30">(<parameter pos:start="26:13" pos:end="26:17"><decl pos:start="26:13" pos:end="26:17"><type pos:start="26:13" pos:end="26:17"><name pos:start="26:13" pos:end="26:15">int</name></type> <name pos:start="26:17" pos:end="26:17">u</name></decl></parameter>, <parameter pos:start="26:20" pos:end="26:29"><decl pos:start="26:20" pos:end="26:29"><type pos:start="26:20" pos:end="26:29"><name pos:start="26:20" pos:end="26:22">int</name></type> <name pos:start="26:24" pos:end="26:29">father</name></decl></parameter>)</parameter_list> <block pos:start="26:32" pos:end="52:1">{<block_content pos:start="27:5" pos:end="51:5">
    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:7">dfn</name><index pos:start="27:8" pos:end="27:10">[<expr pos:start="27:9" pos:end="27:9"><name pos:start="27:9" pos:end="27:9">u</name></expr>]</index></name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:19"><name pos:start="27:14" pos:end="27:16">low</name><index pos:start="27:17" pos:end="27:19">[<expr pos:start="27:18" pos:end="27:18"><name pos:start="27:18" pos:end="27:18">u</name></expr>]</index></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <operator pos:start="27:23" pos:end="27:24">++</operator><name pos:start="27:25" pos:end="27:29">timer</name></expr>;</expr_stmt>
    <decl_stmt pos:start="28:5" pos:end="28:18"><decl pos:start="28:5" pos:end="28:17"><type pos:start="28:5" pos:end="28:7"><name pos:start="28:5" pos:end="28:7">int</name></type> <name pos:start="28:9" pos:end="28:13">child</name> <init pos:start="28:15" pos:end="28:17">= <expr pos:start="28:17" pos:end="28:17"><literal type="number" pos:start="28:17" pos:end="28:17">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:14"><expr pos:start="29:5" pos:end="29:13"><call pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:5">S</name><operator pos:start="29:6" pos:end="29:6">.</operator><name pos:start="29:7" pos:end="29:10">push</name></name><argument_list pos:start="29:11" pos:end="29:13">(<argument pos:start="29:12" pos:end="29:12"><expr pos:start="29:12" pos:end="29:12"><name pos:start="29:12" pos:end="29:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="30:5" pos:end="39:5">for <control pos:start="30:9" pos:end="30:43">(<init pos:start="30:10" pos:end="30:25"><decl pos:start="30:10" pos:end="30:24"><type pos:start="30:10" pos:end="30:12"><name pos:start="30:10" pos:end="30:12">int</name></type> <name pos:start="30:14" pos:end="30:14">i</name> <init pos:start="30:16" pos:end="30:24">= <expr pos:start="30:18" pos:end="30:24"><name pos:start="30:18" pos:end="30:24"><name pos:start="30:18" pos:end="30:21">head</name><index pos:start="30:22" pos:end="30:24">[<expr pos:start="30:23" pos:end="30:23"><name pos:start="30:23" pos:end="30:23">u</name></expr>]</index></name></expr></init></decl>;</init> <condition pos:start="30:27" pos:end="30:28"><expr pos:start="30:27" pos:end="30:27"><name pos:start="30:27" pos:end="30:27">i</name></expr>;</condition> <incr pos:start="30:30" pos:end="30:42"><expr pos:start="30:30" pos:end="30:42"><name pos:start="30:30" pos:end="30:30">i</name> <operator pos:start="30:32" pos:end="30:32">=</operator> <name pos:start="30:34" pos:end="30:37"><name pos:start="30:34" pos:end="30:34">e</name><index pos:start="30:35" pos:end="30:37">[<expr pos:start="30:36" pos:end="30:36"><name pos:start="30:36" pos:end="30:36">i</name></expr>]</index></name><operator pos:start="30:38" pos:end="30:38">.</operator><name pos:start="30:39" pos:end="30:42">next</name></expr></incr>)</control> <block pos:start="30:45" pos:end="39:5">{<block_content pos:start="31:9" pos:end="38:9">
        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:13">v</name> <init pos:start="31:15" pos:end="31:23">= <expr pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:20"><name pos:start="31:17" pos:end="31:17">e</name><index pos:start="31:18" pos:end="31:20">[<expr pos:start="31:19" pos:end="31:19"><name pos:start="31:19" pos:end="31:19">i</name></expr>]</index></name><operator pos:start="31:21" pos:end="31:21">.</operator><name pos:start="31:22" pos:end="31:23">to</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="32:9" pos:end="38:9"><if pos:start="32:9" pos:end="36:9">if <condition pos:start="32:12" pos:end="32:24">(<expr pos:start="32:13" pos:end="32:23"><name pos:start="32:13" pos:end="32:18"><name pos:start="32:13" pos:end="32:15">dfn</name><index pos:start="32:16" pos:end="32:18">[<expr pos:start="32:17" pos:end="32:17"><name pos:start="32:17" pos:end="32:17">v</name></expr>]</index></name> <operator pos:start="32:20" pos:end="32:21">==</operator> <literal type="number" pos:start="32:23" pos:end="32:23">0</literal></expr>)</condition> <block pos:start="32:26" pos:end="36:9">{<block_content pos:start="33:13" pos:end="35:41">
            <expr_stmt pos:start="33:13" pos:end="33:20"><expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:17">child</name><operator pos:start="33:18" pos:end="33:19">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="34:13" pos:end="34:25"><expr pos:start="34:13" pos:end="34:24"><call pos:start="34:13" pos:end="34:24"><name pos:start="34:13" pos:end="34:18">tarjan</name><argument_list pos:start="34:19" pos:end="34:24">(<argument pos:start="34:20" pos:end="34:20"><expr pos:start="34:20" pos:end="34:20"><name pos:start="34:20" pos:end="34:20">v</name></expr></argument>, <argument pos:start="34:23" pos:end="34:23"><expr pos:start="34:23" pos:end="34:23"><name pos:start="34:23" pos:end="34:23">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="35:13" pos:end="35:41"><expr pos:start="35:13" pos:end="35:40"><name pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:15">low</name><index pos:start="35:16" pos:end="35:18">[<expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">u</name></expr>]</index></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:40"><name pos:start="35:22" pos:end="35:24">min</name><argument_list pos:start="35:25" pos:end="35:40">(<argument pos:start="35:26" pos:end="35:31"><expr pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:28">low</name><index pos:start="35:29" pos:end="35:31">[<expr pos:start="35:30" pos:end="35:30"><name pos:start="35:30" pos:end="35:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="35:34" pos:end="35:39"><expr pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:36">low</name><index pos:start="35:37" pos:end="35:39">[<expr pos:start="35:38" pos:end="35:38"><name pos:start="35:38" pos:end="35:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="36:11" pos:end="38:9">else if <condition pos:start="36:19" pos:end="36:31">(<expr pos:start="36:20" pos:end="36:30"><name pos:start="36:20" pos:end="36:20">v</name> <operator pos:start="36:22" pos:end="36:23">!=</operator> <name pos:start="36:25" pos:end="36:30">father</name></expr>)</condition> <block pos:start="36:33" pos:end="38:9">{<block_content pos:start="37:13" pos:end="37:41">
            <expr_stmt pos:start="37:13" pos:end="37:41"><expr pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:15">low</name><index pos:start="37:16" pos:end="37:18">[<expr pos:start="37:17" pos:end="37:17"><name pos:start="37:17" pos:end="37:17">u</name></expr>]</index></name> <operator pos:start="37:20" pos:end="37:20">=</operator> <call pos:start="37:22" pos:end="37:40"><name pos:start="37:22" pos:end="37:24">min</name><argument_list pos:start="37:25" pos:end="37:40">(<argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><name pos:start="37:26" pos:end="37:31"><name pos:start="37:26" pos:end="37:28">low</name><index pos:start="37:29" pos:end="37:31">[<expr pos:start="37:30" pos:end="37:30"><name pos:start="37:30" pos:end="37:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="37:34" pos:end="37:39"><expr pos:start="37:34" pos:end="37:39"><name pos:start="37:34" pos:end="37:39"><name pos:start="37:34" pos:end="37:36">dfn</name><index pos:start="37:37" pos:end="37:39">[<expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="40:5" pos:end="51:5"><if pos:start="40:5" pos:end="51:5">if<condition pos:start="40:7" pos:end="40:22">(<expr pos:start="40:8" pos:end="40:21"><name pos:start="40:8" pos:end="40:13"><name pos:start="40:8" pos:end="40:10">dfn</name><index pos:start="40:11" pos:end="40:13">[<expr pos:start="40:12" pos:end="40:12"><name pos:start="40:12" pos:end="40:12">u</name></expr>]</index></name><operator pos:start="40:14" pos:end="40:15">==</operator><name pos:start="40:16" pos:end="40:21"><name pos:start="40:16" pos:end="40:18">low</name><index pos:start="40:19" pos:end="40:21">[<expr pos:start="40:20" pos:end="40:20"><name pos:start="40:20" pos:end="40:20">u</name></expr>]</index></name></expr>)</condition><block pos:start="40:23" pos:end="51:5">{<block_content pos:start="41:9" pos:end="50:9">
        <if_stmt pos:start="41:9" pos:end="43:9"><if pos:start="41:9" pos:end="43:9">if<condition pos:start="41:11" pos:end="41:21">(<expr pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:17">father</name><operator pos:start="41:18" pos:end="41:19">!=</operator><name pos:start="41:20" pos:end="41:20">u</name></expr>)</condition><block pos:start="41:22" pos:end="43:9">{<block_content pos:start="42:13" pos:end="42:25">
            <expr_stmt pos:start="42:13" pos:end="42:25"><expr pos:start="42:13" pos:end="42:24"><operator pos:start="42:13" pos:end="42:14">++</operator><name pos:start="42:15" pos:end="42:24">bridge_cnt</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:18"><expr pos:start="44:9" pos:end="44:17"><operator pos:start="44:9" pos:end="44:10">++</operator><name pos:start="44:11" pos:end="44:17">bcc_cnt</name></expr>;</expr_stmt>
        <while pos:start="45:9" pos:end="50:9">while<condition pos:start="45:14" pos:end="45:16">(<expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">1</literal></expr>)</condition><block pos:start="45:17" pos:end="50:9">{<block_content pos:start="46:13" pos:end="49:27">
            <decl_stmt pos:start="46:13" pos:end="46:26"><decl pos:start="46:13" pos:end="46:25"><type pos:start="46:13" pos:end="46:15"><name pos:start="46:13" pos:end="46:15">int</name></type> <name pos:start="46:17" pos:end="46:17">x</name><init pos:start="46:18" pos:end="46:25">=<expr pos:start="46:19" pos:end="46:25"><call pos:start="46:19" pos:end="46:25"><name pos:start="46:19" pos:end="46:23"><name pos:start="46:19" pos:end="46:19">S</name><operator pos:start="46:20" pos:end="46:20">.</operator><name pos:start="46:21" pos:end="46:23">top</name></name><argument_list pos:start="46:24" pos:end="46:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="47:13" pos:end="47:20"><expr pos:start="47:13" pos:end="47:19"><call pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:17"><name pos:start="47:13" pos:end="47:13">S</name><operator pos:start="47:14" pos:end="47:14">.</operator><name pos:start="47:15" pos:end="47:17">pop</name></name><argument_list pos:start="47:18" pos:end="47:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="48:13" pos:end="48:38"><expr pos:start="48:13" pos:end="48:37"><name pos:start="48:13" pos:end="48:24"><name pos:start="48:13" pos:end="48:15">bcc</name><index pos:start="48:16" pos:end="48:24">[<expr pos:start="48:17" pos:end="48:23"><name pos:start="48:17" pos:end="48:23">bcc_cnt</name></expr>]</index></name><operator pos:start="48:25" pos:end="48:25">.</operator><call pos:start="48:26" pos:end="48:37"><name pos:start="48:26" pos:end="48:34">push_back</name><argument_list pos:start="48:35" pos:end="48:37">(<argument pos:start="48:36" pos:end="48:36"><expr pos:start="48:36" pos:end="48:36"><name pos:start="48:36" pos:end="48:36">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="49:13" pos:end="49:27"><if pos:start="49:13" pos:end="49:27">if<condition pos:start="49:15" pos:end="49:20">(<expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:16">x</name><operator pos:start="49:17" pos:end="49:18">==</operator><name pos:start="49:19" pos:end="49:19">u</name></expr>)</condition><block type="pseudo" pos:start="49:22" pos:end="49:27"><block_content pos:start="49:22" pos:end="49:27"> <break pos:start="49:22" pos:end="49:27">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function pos:start="53:1" pos:end="61:1"><type pos:start="53:1" pos:end="53:4"><name pos:start="53:1" pos:end="53:4">bool</name></type> <name pos:start="53:6" pos:end="53:10">count</name><parameter_list pos:start="53:11" pos:end="53:23">(<parameter pos:start="53:12" pos:end="53:16"><decl pos:start="53:12" pos:end="53:16"><type pos:start="53:12" pos:end="53:16"><name pos:start="53:12" pos:end="53:14">int</name></type> <name pos:start="53:16" pos:end="53:16">i</name></decl></parameter>,<parameter pos:start="53:18" pos:end="53:22"><decl pos:start="53:18" pos:end="53:22"><type pos:start="53:18" pos:end="53:22"><name pos:start="53:18" pos:end="53:20">int</name></type> <name pos:start="53:22" pos:end="53:22">j</name></decl></parameter>)</parameter_list><block pos:start="53:24" pos:end="61:1">{<block_content pos:start="54:5" pos:end="60:5">
    <decl_stmt pos:start="54:5" pos:end="54:29"><decl pos:start="54:5" pos:end="54:28"><type pos:start="54:5" pos:end="54:25"><name pos:start="54:5" pos:end="54:25"><name pos:start="54:5" pos:end="54:15"><name pos:start="54:5" pos:end="54:10">vector</name><argument_list type="generic" pos:start="54:11" pos:end="54:15">&lt;<argument pos:start="54:12" pos:end="54:14"><expr pos:start="54:12" pos:end="54:14"><name pos:start="54:12" pos:end="54:14">int</name></expr></argument>&gt;</argument_list></name><operator pos:start="54:16" pos:end="54:17">::</operator><name pos:start="54:18" pos:end="54:25">iterator</name></name></type> <name pos:start="54:27" pos:end="54:28">it</name></decl>;</decl_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:6">it</name><operator pos:start="55:7" pos:end="55:7">=</operator><call pos:start="55:8" pos:end="55:42"><name pos:start="55:8" pos:end="55:11">find</name><argument_list pos:start="55:12" pos:end="55:42">(<argument pos:start="55:13" pos:end="55:26"><expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:15">bcc</name><index pos:start="55:16" pos:end="55:18">[<expr pos:start="55:17" pos:end="55:17"><name pos:start="55:17" pos:end="55:17">i</name></expr>]</index></name><operator pos:start="55:19" pos:end="55:19">.</operator><call pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:24">begin</name><argument_list pos:start="55:25" pos:end="55:26">()</argument_list></call></expr></argument>,<argument pos:start="55:28" pos:end="55:39"><expr pos:start="55:28" pos:end="55:39"><name pos:start="55:28" pos:end="55:33"><name pos:start="55:28" pos:end="55:30">bcc</name><index pos:start="55:31" pos:end="55:33">[<expr pos:start="55:32" pos:end="55:32"><name pos:start="55:32" pos:end="55:32">i</name></expr>]</index></name><operator pos:start="55:34" pos:end="55:34">.</operator><call pos:start="55:35" pos:end="55:39"><name pos:start="55:35" pos:end="55:37">end</name><argument_list pos:start="55:38" pos:end="55:39">()</argument_list></call></expr></argument>,<argument pos:start="55:41" pos:end="55:41"><expr pos:start="55:41" pos:end="55:41"><name pos:start="55:41" pos:end="55:41">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="56:5" pos:end="60:5"><if pos:start="56:5" pos:end="58:5">if<condition pos:start="56:7" pos:end="56:24">(<expr pos:start="56:8" pos:end="56:23"><name pos:start="56:8" pos:end="56:9">it</name><operator pos:start="56:10" pos:end="56:11">!=</operator><name pos:start="56:12" pos:end="56:17"><name pos:start="56:12" pos:end="56:14">bcc</name><index pos:start="56:15" pos:end="56:17">[<expr pos:start="56:16" pos:end="56:16"><name pos:start="56:16" pos:end="56:16">i</name></expr>]</index></name><operator pos:start="56:18" pos:end="56:18">.</operator><call pos:start="56:19" pos:end="56:23"><name pos:start="56:19" pos:end="56:21">end</name><argument_list pos:start="56:22" pos:end="56:23">()</argument_list></call></expr>)</condition><block pos:start="56:25" pos:end="58:5">{<block_content pos:start="57:9" pos:end="57:20">
        <return pos:start="57:9" pos:end="57:20">return <expr pos:start="57:16" pos:end="57:19"><literal type="boolean" pos:start="57:16" pos:end="57:19">true</literal></expr>;</return>
    </block_content>}</block></if><else pos:start="58:6" pos:end="60:5">else<block pos:start="58:10" pos:end="60:5">{<block_content pos:start="59:9" pos:end="59:21">
        <return pos:start="59:9" pos:end="59:21">return <expr pos:start="59:16" pos:end="59:20"><literal type="boolean" pos:start="59:16" pos:end="59:20">false</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function pos:start="62:1" pos:end="94:1"><type pos:start="62:1" pos:end="62:3"><name pos:start="62:1" pos:end="62:3">int</name></type> <name pos:start="62:5" pos:end="62:8">main</name><parameter_list pos:start="62:9" pos:end="62:10">()</parameter_list> <block pos:start="62:12" pos:end="94:1">{<block_content pos:start="63:5" pos:end="93:13">
    <expr_stmt pos:start="63:5" pos:end="63:33"><expr pos:start="63:5" pos:end="63:32"><call pos:start="63:5" pos:end="63:32"><name pos:start="63:5" pos:end="63:11">freopen</name><argument_list pos:start="63:12" pos:end="63:32">(<argument pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:21"><literal type="string" pos:start="63:13" pos:end="63:21">"road.in"</literal></expr></argument>,<argument pos:start="63:23" pos:end="63:25"><expr pos:start="63:23" pos:end="63:25"><literal type="string" pos:start="63:23" pos:end="63:25">"r"</literal></expr></argument>,<argument pos:start="63:27" pos:end="63:31"><expr pos:start="63:27" pos:end="63:31"><name pos:start="63:27" pos:end="63:31">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:35"><expr pos:start="64:5" pos:end="64:34"><call pos:start="64:5" pos:end="64:34"><name pos:start="64:5" pos:end="64:11">freopen</name><argument_list pos:start="64:12" pos:end="64:34">(<argument pos:start="64:13" pos:end="64:22"><expr pos:start="64:13" pos:end="64:22"><literal type="string" pos:start="64:13" pos:end="64:22">"road.out"</literal></expr></argument>,<argument pos:start="64:24" pos:end="64:26"><expr pos:start="64:24" pos:end="64:26"><literal type="string" pos:start="64:24" pos:end="64:26">"w"</literal></expr></argument>,<argument pos:start="64:28" pos:end="64:33"><expr pos:start="64:28" pos:end="64:33"><name pos:start="64:28" pos:end="64:33">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><call pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:9">scanf</name><argument_list pos:start="65:10" pos:end="65:25">(<argument pos:start="65:11" pos:end="65:16"><expr pos:start="65:11" pos:end="65:16"><literal type="string" pos:start="65:11" pos:end="65:16">"%d%d"</literal></expr></argument>, <argument pos:start="65:19" pos:end="65:20"><expr pos:start="65:19" pos:end="65:20"><operator pos:start="65:19" pos:end="65:19">&amp;</operator><name pos:start="65:20" pos:end="65:20">n</name></expr></argument>, <argument pos:start="65:23" pos:end="65:24"><expr pos:start="65:23" pos:end="65:24"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:24">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="66:5" pos:end="71:5">for <control pos:start="66:9" pos:end="66:32">(<init pos:start="66:10" pos:end="66:19"><decl pos:start="66:10" pos:end="66:18"><type pos:start="66:10" pos:end="66:12"><name pos:start="66:10" pos:end="66:12">int</name></type> <name pos:start="66:14" pos:end="66:14">i</name> <init pos:start="66:16" pos:end="66:18">= <expr pos:start="66:18" pos:end="66:18"><literal type="number" pos:start="66:18" pos:end="66:18">1</literal></expr></init></decl>;</init> <condition pos:start="66:21" pos:end="66:27"><expr pos:start="66:21" pos:end="66:26"><name pos:start="66:21" pos:end="66:21">i</name> <operator pos:start="66:23" pos:end="66:24">&lt;=</operator> <name pos:start="66:26" pos:end="66:26">m</name></expr>;</condition> <incr pos:start="66:29" pos:end="66:31"><expr pos:start="66:29" pos:end="66:31"><name pos:start="66:29" pos:end="66:29">i</name><operator pos:start="66:30" pos:end="66:31">++</operator></expr></incr>)</control> <block pos:start="66:34" pos:end="71:5">{<block_content pos:start="67:9" pos:end="70:22">
        <decl_stmt pos:start="67:9" pos:end="67:17"><decl pos:start="67:9" pos:end="67:13"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:13">u</name></decl>, <decl pos:start="67:16" pos:end="67:16"><type ref="prev" pos:start="67:9" pos:end="67:11"/><name pos:start="67:16" pos:end="67:16">v</name></decl>;</decl_stmt>
        <expr_stmt pos:start="68:9" pos:end="68:30"><expr pos:start="68:9" pos:end="68:29"><call pos:start="68:9" pos:end="68:29"><name pos:start="68:9" pos:end="68:13">scanf</name><argument_list pos:start="68:14" pos:end="68:29">(<argument pos:start="68:15" pos:end="68:20"><expr pos:start="68:15" pos:end="68:20"><literal type="string" pos:start="68:15" pos:end="68:20">"%d%d"</literal></expr></argument>, <argument pos:start="68:23" pos:end="68:24"><expr pos:start="68:23" pos:end="68:24"><operator pos:start="68:23" pos:end="68:23">&amp;</operator><name pos:start="68:24" pos:end="68:24">u</name></expr></argument>, <argument pos:start="68:27" pos:end="68:28"><expr pos:start="68:27" pos:end="68:28"><operator pos:start="68:27" pos:end="68:27">&amp;</operator><name pos:start="68:28" pos:end="68:28">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:15">addEdge</name><argument_list pos:start="69:16" pos:end="69:21">(<argument pos:start="69:17" pos:end="69:17"><expr pos:start="69:17" pos:end="69:17"><name pos:start="69:17" pos:end="69:17">u</name></expr></argument>, <argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:22"><expr pos:start="70:9" pos:end="70:21"><call pos:start="70:9" pos:end="70:21"><name pos:start="70:9" pos:end="70:15">addEdge</name><argument_list pos:start="70:16" pos:end="70:21">(<argument pos:start="70:17" pos:end="70:17"><expr pos:start="70:17" pos:end="70:17"><name pos:start="70:17" pos:end="70:17">v</name></expr></argument>, <argument pos:start="70:20" pos:end="70:20"><expr pos:start="70:20" pos:end="70:20"><name pos:start="70:20" pos:end="70:20">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="72:5" pos:end="76:5">for <control pos:start="72:9" pos:end="72:32">(<init pos:start="72:10" pos:end="72:19"><decl pos:start="72:10" pos:end="72:18"><type pos:start="72:10" pos:end="72:12"><name pos:start="72:10" pos:end="72:12">int</name></type> <name pos:start="72:14" pos:end="72:14">i</name> <init pos:start="72:16" pos:end="72:18">= <expr pos:start="72:18" pos:end="72:18"><literal type="number" pos:start="72:18" pos:end="72:18">1</literal></expr></init></decl>;</init> <condition pos:start="72:21" pos:end="72:27"><expr pos:start="72:21" pos:end="72:26"><name pos:start="72:21" pos:end="72:21">i</name> <operator pos:start="72:23" pos:end="72:24">&lt;=</operator> <name pos:start="72:26" pos:end="72:26">n</name></expr>;</condition> <incr pos:start="72:29" pos:end="72:31"><expr pos:start="72:29" pos:end="72:31"><name pos:start="72:29" pos:end="72:29">i</name><operator pos:start="72:30" pos:end="72:31">++</operator></expr></incr>)</control> <block pos:start="72:34" pos:end="76:5">{<block_content pos:start="73:9" pos:end="75:9">
        <if_stmt pos:start="73:9" pos:end="75:9"><if pos:start="73:9" pos:end="75:9">if <condition pos:start="73:12" pos:end="73:24">(<expr pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:18"><name pos:start="73:13" pos:end="73:15">dfn</name><index pos:start="73:16" pos:end="73:18">[<expr pos:start="73:17" pos:end="73:17"><name pos:start="73:17" pos:end="73:17">i</name></expr>]</index></name> <operator pos:start="73:20" pos:end="73:21">==</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition> <block pos:start="73:26" pos:end="75:9">{<block_content pos:start="74:13" pos:end="74:25">  
            <expr_stmt pos:start="74:13" pos:end="74:25"><expr pos:start="74:13" pos:end="74:24"><call pos:start="74:13" pos:end="74:24"><name pos:start="74:13" pos:end="74:18">tarjan</name><argument_list pos:start="74:19" pos:end="74:24">(<argument pos:start="74:20" pos:end="74:20"><expr pos:start="74:20" pos:end="74:20"><name pos:start="74:20" pos:end="74:20">i</name></expr></argument>, <argument pos:start="74:23" pos:end="74:23"><expr pos:start="74:23" pos:end="74:23"><name pos:start="74:23" pos:end="74:23">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt pos:start="77:5" pos:end="77:14"><decl pos:start="77:5" pos:end="77:13"><type pos:start="77:5" pos:end="77:7"><name pos:start="77:5" pos:end="77:7">int</name></type> <name pos:start="77:9" pos:end="77:11">ans</name><init pos:start="77:12" pos:end="77:13">=<expr pos:start="77:13" pos:end="77:13"><literal type="number" pos:start="77:13" pos:end="77:13">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="78:5" pos:end="91:5">for <control pos:start="78:9" pos:end="78:38">(<init pos:start="78:10" pos:end="78:19"><decl pos:start="78:10" pos:end="78:18"><type pos:start="78:10" pos:end="78:12"><name pos:start="78:10" pos:end="78:12">int</name></type> <name pos:start="78:14" pos:end="78:14">i</name> <init pos:start="78:16" pos:end="78:18">= <expr pos:start="78:18" pos:end="78:18"><literal type="number" pos:start="78:18" pos:end="78:18">1</literal></expr></init></decl>;</init> <condition pos:start="78:21" pos:end="78:33"><expr pos:start="78:21" pos:end="78:32"><name pos:start="78:21" pos:end="78:21">i</name> <operator pos:start="78:23" pos:end="78:24">&lt;=</operator> <name pos:start="78:26" pos:end="78:32">bcc_cnt</name></expr>;</condition> <incr pos:start="78:35" pos:end="78:37"><expr pos:start="78:35" pos:end="78:37"><name pos:start="78:35" pos:end="78:35">i</name><operator pos:start="78:36" pos:end="78:37">++</operator></expr></incr>)</control> <block pos:start="78:40" pos:end="91:5">{<block_content pos:start="79:9" pos:end="90:9">
        <decl_stmt pos:start="79:9" pos:end="79:18"><decl pos:start="79:9" pos:end="79:17"><type pos:start="79:9" pos:end="79:11"><name pos:start="79:9" pos:end="79:11">int</name></type> <name pos:start="79:13" pos:end="79:15">sum</name><init pos:start="79:16" pos:end="79:17">=<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="80:9" pos:end="86:9">for <control pos:start="80:13" pos:end="80:29">(<init pos:start="80:14" pos:end="80:28"><decl pos:start="80:14" pos:end="80:28"><type pos:start="80:14" pos:end="80:17"><name pos:start="80:14" pos:end="80:17">auto</name></type> <name pos:start="80:19" pos:end="80:19">x</name> <range pos:start="80:21" pos:end="80:28">: <expr pos:start="80:23" pos:end="80:28"><name pos:start="80:23" pos:end="80:28"><name pos:start="80:23" pos:end="80:25">bcc</name><index pos:start="80:26" pos:end="80:28">[<expr pos:start="80:27" pos:end="80:27"><name pos:start="80:27" pos:end="80:27">i</name></expr>]</index></name></expr></range></decl></init>)</control> <block pos:start="80:31" pos:end="86:9">{<block_content pos:start="81:13" pos:end="85:13">
            <for pos:start="81:13" pos:end="85:13">for<control pos:start="81:16" pos:end="81:44">(<init pos:start="81:17" pos:end="81:30"><decl pos:start="81:17" pos:end="81:29"><type pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">int</name></type> <name pos:start="81:21" pos:end="81:21">j</name><init pos:start="81:22" pos:end="81:29">=<expr pos:start="81:23" pos:end="81:29"><name pos:start="81:23" pos:end="81:29"><name pos:start="81:23" pos:end="81:26">head</name><index pos:start="81:27" pos:end="81:29">[<expr pos:start="81:28" pos:end="81:28"><name pos:start="81:28" pos:end="81:28">x</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="81:31" pos:end="81:32"><expr pos:start="81:31" pos:end="81:31"><name pos:start="81:31" pos:end="81:31">j</name></expr>;</condition><incr pos:start="81:33" pos:end="81:43"><expr pos:start="81:33" pos:end="81:43"><name pos:start="81:33" pos:end="81:33">j</name><operator pos:start="81:34" pos:end="81:34">=</operator><name pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:35">e</name><index pos:start="81:36" pos:end="81:38">[<expr pos:start="81:37" pos:end="81:37"><name pos:start="81:37" pos:end="81:37">j</name></expr>]</index></name><operator pos:start="81:39" pos:end="81:39">.</operator><name pos:start="81:40" pos:end="81:43">next</name></expr></incr>)</control><block pos:start="81:45" pos:end="85:13">{<block_content pos:start="82:17" pos:end="84:17">
                <if_stmt pos:start="82:17" pos:end="84:17"><if pos:start="82:17" pos:end="84:17">if<condition pos:start="82:19" pos:end="82:30">(<expr pos:start="82:20" pos:end="82:29"><call pos:start="82:20" pos:end="82:29"><name pos:start="82:20" pos:end="82:24">count</name><argument_list pos:start="82:25" pos:end="82:29">(<argument pos:start="82:26" pos:end="82:26"><expr pos:start="82:26" pos:end="82:26"><name pos:start="82:26" pos:end="82:26">i</name></expr></argument>,<argument pos:start="82:28" pos:end="82:28"><expr pos:start="82:28" pos:end="82:28"><name pos:start="82:28" pos:end="82:28">j</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="82:31" pos:end="84:17">{<block_content pos:start="83:21" pos:end="83:27">
                    <expr_stmt pos:start="83:21" pos:end="83:27"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:23">sum</name><operator pos:start="83:24" pos:end="83:25">+=</operator><literal type="number" pos:start="83:26" pos:end="83:26">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt pos:start="87:9" pos:end="87:15"><expr pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:11">sum</name><operator pos:start="87:12" pos:end="87:13">/=</operator><literal type="number" pos:start="87:14" pos:end="87:14">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="88:9" pos:end="90:9"><if pos:start="88:9" pos:end="90:9">if<condition pos:start="88:11" pos:end="88:29">(<expr pos:start="88:12" pos:end="88:28"><name pos:start="88:12" pos:end="88:14">sum</name><operator pos:start="88:15" pos:end="88:15">&gt;</operator><name pos:start="88:16" pos:end="88:21"><name pos:start="88:16" pos:end="88:18">bcc</name><index pos:start="88:19" pos:end="88:21">[<expr pos:start="88:20" pos:end="88:20"><name pos:start="88:20" pos:end="88:20">i</name></expr>]</index></name><operator pos:start="88:22" pos:end="88:22">.</operator><call pos:start="88:23" pos:end="88:28"><name pos:start="88:23" pos:end="88:26">size</name><argument_list pos:start="88:27" pos:end="88:28">()</argument_list></call></expr>)</condition><block pos:start="88:30" pos:end="90:9">{<block_content pos:start="89:13" pos:end="89:31">
            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:15">ans</name><operator pos:start="89:16" pos:end="89:17">+=</operator><name pos:start="89:18" pos:end="89:23"><name pos:start="89:18" pos:end="89:20">bcc</name><index pos:start="89:21" pos:end="89:23">[<expr pos:start="89:22" pos:end="89:22"><name pos:start="89:22" pos:end="89:22">i</name></expr>]</index></name><operator pos:start="89:24" pos:end="89:24">.</operator><call pos:start="89:25" pos:end="89:30"><name pos:start="89:25" pos:end="89:28">size</name><argument_list pos:start="89:29" pos:end="89:30">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="92:5" pos:end="92:37"><expr pos:start="92:5" pos:end="92:36"><call pos:start="92:5" pos:end="92:36"><name pos:start="92:5" pos:end="92:10">printf</name><argument_list pos:start="92:11" pos:end="92:36">(<argument pos:start="92:12" pos:end="92:20"><expr pos:start="92:12" pos:end="92:20"><literal type="string" pos:start="92:12" pos:end="92:20">"%d %d\n"</literal></expr></argument>,<argument pos:start="92:22" pos:end="92:31"><expr pos:start="92:22" pos:end="92:31"><name pos:start="92:22" pos:end="92:31">bridge_cnt</name></expr></argument>,<argument pos:start="92:33" pos:end="92:35"><expr pos:start="92:33" pos:end="92:35"><name pos:start="92:33" pos:end="92:35">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
