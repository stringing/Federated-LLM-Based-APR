<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/144/144.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:17">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:17">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:17">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:17">&lt;cstdio&gt;</cpp:file></cpp:include>

<using pos:start="5:1" pos:end="5:20">using <namespace pos:start="5:7" pos:end="5:20">namespace <name pos:start="5:17" pos:end="5:19">std</name>;</namespace></using>

<decl_stmt pos:start="7:1" pos:end="7:46"><decl pos:start="7:1" pos:end="7:45"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:6">mi</name><index pos:start="7:7" pos:end="7:10">[<expr pos:start="7:8" pos:end="7:9"><literal type="number" pos:start="7:8" pos:end="7:9">10</literal></expr>]</index></name> <init pos:start="7:12" pos:end="7:45">= <expr pos:start="7:14" pos:end="7:45"><block pos:start="7:14" pos:end="7:45">{<expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr>, <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">1</literal></expr>, <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">2</literal></expr>, <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">4</literal></expr>, <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">8</literal></expr>, <expr pos:start="7:30" pos:end="7:31"><literal type="number" pos:start="7:30" pos:end="7:31">16</literal></expr>, <expr pos:start="7:34" pos:end="7:35"><literal type="number" pos:start="7:34" pos:end="7:35">32</literal></expr>, <expr pos:start="7:38" pos:end="7:39"><literal type="number" pos:start="7:38" pos:end="7:39">64</literal></expr>, <expr pos:start="7:42" pos:end="7:44"><literal type="number" pos:start="7:42" pos:end="7:44">128</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function pos:start="9:1" pos:end="20:1"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:9">count</name><parameter_list pos:start="9:10" pos:end="9:19">(<parameter pos:start="9:11" pos:end="9:18"><decl pos:start="9:11" pos:end="9:18"><type pos:start="9:11" pos:end="9:16"><name pos:start="9:11" pos:end="9:16">string</name></type> <name pos:start="9:18" pos:end="9:18">a</name></decl></parameter>)</parameter_list> <block pos:start="9:21" pos:end="20:1">{<block_content pos:start="10:5" pos:end="19:15">
    <decl_stmt pos:start="10:5" pos:end="10:23"><decl pos:start="10:5" pos:end="10:22"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:11">len</name> <init pos:start="10:13" pos:end="10:22">= <expr pos:start="10:15" pos:end="10:22"><call pos:start="10:15" pos:end="10:22"><name pos:start="10:15" pos:end="10:20"><name pos:start="10:15" pos:end="10:15">a</name><operator pos:start="10:16" pos:end="10:16">.</operator><name pos:start="10:17" pos:end="10:20">size</name></name><argument_list pos:start="10:21" pos:end="10:22">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">cnt</name> <init pos:start="11:13" pos:end="11:21">= <expr pos:start="11:15" pos:end="11:21"><name pos:start="11:15" pos:end="11:17">len</name> <operator pos:start="11:19" pos:end="11:19">-</operator> <literal type="number" pos:start="11:21" pos:end="11:21">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:16"><decl pos:start="12:5" pos:end="12:15"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:11">sum</name> <init pos:start="12:13" pos:end="12:15">= <expr pos:start="12:15" pos:end="12:15"><literal type="number" pos:start="12:15" pos:end="12:15">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="13:5" pos:end="18:5">for <control pos:start="13:9" pos:end="13:33">(<init pos:start="13:10" pos:end="13:19"><decl pos:start="13:10" pos:end="13:18"><type pos:start="13:10" pos:end="13:12"><name pos:start="13:10" pos:end="13:12">int</name></type> <name pos:start="13:14" pos:end="13:14">i</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</init> <condition pos:start="13:21" pos:end="13:28"><expr pos:start="13:21" pos:end="13:27"><name pos:start="13:21" pos:end="13:21">i</name> <operator pos:start="13:23" pos:end="13:23">&lt;</operator> <name pos:start="13:25" pos:end="13:27">len</name></expr>;</condition> <incr pos:start="13:30" pos:end="13:32"><expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:30">i</name><operator pos:start="13:31" pos:end="13:32">++</operator></expr></incr>)</control> <block pos:start="13:35" pos:end="18:5">{<block_content pos:start="14:9" pos:end="17:14">
        <if_stmt pos:start="14:9" pos:end="16:9"><if pos:start="14:9" pos:end="16:9">if <condition pos:start="14:12" pos:end="14:24">(<expr pos:start="14:13" pos:end="14:23"><name pos:start="14:13" pos:end="14:16"><name pos:start="14:13" pos:end="14:13">a</name><index pos:start="14:14" pos:end="14:16">[<expr pos:start="14:15" pos:end="14:15"><name pos:start="14:15" pos:end="14:15">i</name></expr>]</index></name> <operator pos:start="14:18" pos:end="14:19">==</operator> <literal type="char" pos:start="14:21" pos:end="14:23">'1'</literal></expr>)</condition> <block pos:start="14:26" pos:end="16:9">{<block_content pos:start="15:13" pos:end="15:27">
            <expr_stmt pos:start="15:13" pos:end="15:27"><expr pos:start="15:13" pos:end="15:26"><name pos:start="15:13" pos:end="15:15">sum</name> <operator pos:start="15:17" pos:end="15:18">+=</operator> <name pos:start="15:20" pos:end="15:26"><name pos:start="15:20" pos:end="15:21">mi</name><index pos:start="15:22" pos:end="15:26">[<expr pos:start="15:23" pos:end="15:25"><name pos:start="15:23" pos:end="15:25">cnt</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:11">cnt</name><operator pos:start="17:12" pos:end="17:13">--</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="19:5" pos:end="19:15">return <expr pos:start="19:12" pos:end="19:14"><name pos:start="19:12" pos:end="19:14">sum</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="22:1" pos:end="69:1"><type pos:start="22:1" pos:end="22:3"><name pos:start="22:1" pos:end="22:3">int</name></type> <name pos:start="22:5" pos:end="22:8">main</name><parameter_list pos:start="22:9" pos:end="22:10">()</parameter_list> <block pos:start="22:12" pos:end="69:1">{<block_content pos:start="23:5" pos:end="68:5">
    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:11">freopen</name><argument_list pos:start="23:12" pos:end="23:41">(<argument pos:start="23:13" pos:end="23:28"><expr pos:start="23:13" pos:end="23:28"><literal type="string" pos:start="23:13" pos:end="23:28">"information.in"</literal></expr></argument>, <argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><literal type="string" pos:start="23:31" pos:end="23:33">"r"</literal></expr></argument>, <argument pos:start="23:36" pos:end="23:40"><expr pos:start="23:36" pos:end="23:40"><name pos:start="23:36" pos:end="23:40">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:44"><expr pos:start="24:5" pos:end="24:43"><call pos:start="24:5" pos:end="24:43"><name pos:start="24:5" pos:end="24:11">freopen</name><argument_list pos:start="24:12" pos:end="24:43">(<argument pos:start="24:13" pos:end="24:29"><expr pos:start="24:13" pos:end="24:29"><literal type="string" pos:start="24:13" pos:end="24:29">"information.out"</literal></expr></argument>, <argument pos:start="24:32" pos:end="24:34"><expr pos:start="24:32" pos:end="24:34"><literal type="string" pos:start="24:32" pos:end="24:34">"w"</literal></expr></argument>, <argument pos:start="24:37" pos:end="24:42"><expr pos:start="24:37" pos:end="24:42"><name pos:start="24:37" pos:end="24:42">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="25:5" pos:end="25:13"><decl pos:start="25:5" pos:end="25:12"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">string</name></type> <name pos:start="25:12" pos:end="25:12">a</name></decl>;</decl_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:13"><expr pos:start="26:5" pos:end="26:12"><name pos:start="26:5" pos:end="26:7">cin</name> <operator pos:start="26:9" pos:end="26:10">&gt;&gt;</operator> <name pos:start="26:12" pos:end="26:12">a</name></expr>;</expr_stmt>
    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">len</name> <init pos:start="27:13" pos:end="27:22">= <expr pos:start="27:15" pos:end="27:22"><call pos:start="27:15" pos:end="27:22"><name pos:start="27:15" pos:end="27:20"><name pos:start="27:15" pos:end="27:15">a</name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:20">size</name></name><argument_list pos:start="27:21" pos:end="27:22">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="28:5" pos:end="31:5"><if pos:start="28:5" pos:end="31:5">if <condition pos:start="28:8" pos:end="28:16">(<expr pos:start="28:9" pos:end="28:15"><name pos:start="28:9" pos:end="28:11">len</name> <operator pos:start="28:13" pos:end="28:13">%</operator> <literal type="number" pos:start="28:15" pos:end="28:15">8</literal></expr>)</condition> <block pos:start="28:18" pos:end="31:5">{<block_content pos:start="29:9" pos:end="30:17">
        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:12">cout</name> <operator pos:start="29:14" pos:end="29:15">&lt;&lt;</operator> <literal type="string" pos:start="29:17" pos:end="29:23">"Error"</literal> <operator pos:start="29:25" pos:end="29:26">&lt;&lt;</operator> <name pos:start="29:28" pos:end="29:31">endl</name></expr>;</expr_stmt>
        <return pos:start="30:9" pos:end="30:17">return <expr pos:start="30:16" pos:end="30:16"><literal type="number" pos:start="30:16" pos:end="30:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for pos:start="32:5" pos:end="37:5">for <control pos:start="32:9" pos:end="32:33">(<init pos:start="32:10" pos:end="32:19"><decl pos:start="32:10" pos:end="32:18"><type pos:start="32:10" pos:end="32:12"><name pos:start="32:10" pos:end="32:12">int</name></type> <name pos:start="32:14" pos:end="32:14">i</name> <init pos:start="32:16" pos:end="32:18">= <expr pos:start="32:18" pos:end="32:18"><literal type="number" pos:start="32:18" pos:end="32:18">0</literal></expr></init></decl>;</init> <condition pos:start="32:21" pos:end="32:28"><expr pos:start="32:21" pos:end="32:27"><name pos:start="32:21" pos:end="32:21">i</name> <operator pos:start="32:23" pos:end="32:23">&lt;</operator> <name pos:start="32:25" pos:end="32:27">len</name></expr>;</condition> <incr pos:start="32:30" pos:end="32:32"><expr pos:start="32:30" pos:end="32:32"><name pos:start="32:30" pos:end="32:30">i</name><operator pos:start="32:31" pos:end="32:32">++</operator></expr></incr>)</control> <block pos:start="32:35" pos:end="37:5">{<block_content pos:start="33:9" pos:end="36:9">
        <if_stmt pos:start="33:9" pos:end="36:9"><if pos:start="33:9" pos:end="36:9">if <condition pos:start="33:12" pos:end="33:39">(<expr pos:start="33:13" pos:end="33:38"><name pos:start="33:13" pos:end="33:16"><name pos:start="33:13" pos:end="33:13">a</name><index pos:start="33:14" pos:end="33:16">[<expr pos:start="33:15" pos:end="33:15"><name pos:start="33:15" pos:end="33:15">i</name></expr>]</index></name> <operator pos:start="33:18" pos:end="33:19">!=</operator> <literal type="char" pos:start="33:21" pos:end="33:23">'0'</literal> <operator pos:start="33:25" pos:end="33:26">&amp;&amp;</operator> <name pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:28">a</name><index pos:start="33:29" pos:end="33:31">[<expr pos:start="33:30" pos:end="33:30"><name pos:start="33:30" pos:end="33:30">i</name></expr>]</index></name> <operator pos:start="33:33" pos:end="33:34">!=</operator> <literal type="char" pos:start="33:36" pos:end="33:38">'1'</literal></expr>)</condition> <block pos:start="33:41" pos:end="36:9">{<block_content pos:start="34:13" pos:end="35:21">
            <expr_stmt pos:start="34:13" pos:end="34:36"><expr pos:start="34:13" pos:end="34:35"><name pos:start="34:13" pos:end="34:16">cout</name> <operator pos:start="34:18" pos:end="34:19">&lt;&lt;</operator> <literal type="string" pos:start="34:21" pos:end="34:27">"Error"</literal> <operator pos:start="34:29" pos:end="34:30">&lt;&lt;</operator> <name pos:start="34:32" pos:end="34:35">endl</name></expr>;</expr_stmt>
            <return pos:start="35:13" pos:end="35:21">return <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for pos:start="38:5" pos:end="68:5">for <control pos:start="38:9" pos:end="38:36">(<init pos:start="38:10" pos:end="38:19"><decl pos:start="38:10" pos:end="38:18"><type pos:start="38:10" pos:end="38:12"><name pos:start="38:10" pos:end="38:12">int</name></type> <name pos:start="38:14" pos:end="38:14">i</name> <init pos:start="38:16" pos:end="38:18">= <expr pos:start="38:18" pos:end="38:18"><literal type="number" pos:start="38:18" pos:end="38:18">0</literal></expr></init></decl>;</init> <condition pos:start="38:21" pos:end="38:28"><expr pos:start="38:21" pos:end="38:27"><name pos:start="38:21" pos:end="38:21">i</name> <operator pos:start="38:23" pos:end="38:23">&lt;</operator> <name pos:start="38:25" pos:end="38:27">len</name></expr>;</condition> <incr pos:start="38:30" pos:end="38:35"><expr pos:start="38:30" pos:end="38:35"><name pos:start="38:30" pos:end="38:30">i</name> <operator pos:start="38:32" pos:end="38:33">+=</operator> <literal type="number" pos:start="38:35" pos:end="38:35">8</literal></expr></incr>)</control> <block pos:start="38:38" pos:end="68:5">{<block_content pos:start="39:9" pos:end="67:9">
        <if_stmt pos:start="39:9" pos:end="42:9"><if pos:start="39:9" pos:end="42:9">if <condition pos:start="39:12" pos:end="39:40">(<expr pos:start="39:13" pos:end="39:39"><call pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:13">a</name><operator pos:start="39:14" pos:end="39:14">.</operator><name pos:start="39:15" pos:end="39:20">substr</name></name><argument_list pos:start="39:21" pos:end="39:30">(<argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><name pos:start="39:22" pos:end="39:22">i</name></expr></argument>, <argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:25">i</name> <operator pos:start="39:27" pos:end="39:27">+</operator> <literal type="number" pos:start="39:29" pos:end="39:29">2</literal></expr></argument>)</argument_list></call> <operator pos:start="39:32" pos:end="39:33">==</operator> <literal type="string" pos:start="39:35" pos:end="39:39">"111"</literal></expr>)</condition> <block pos:start="39:42" pos:end="42:9">{<block_content pos:start="40:13" pos:end="41:21">
            <expr_stmt pos:start="40:13" pos:end="40:24"><expr pos:start="40:13" pos:end="40:23"><name pos:start="40:13" pos:end="40:16">cout</name> <operator pos:start="40:18" pos:end="40:19">&lt;&lt;</operator> <literal type="string" pos:start="40:21" pos:end="40:23">" "</literal></expr>;</expr_stmt>
            <continue pos:start="41:13" pos:end="41:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="43:9" pos:end="52:9"><if pos:start="43:9" pos:end="52:9">if <condition pos:start="43:12" pos:end="43:40">(<expr pos:start="43:13" pos:end="43:39"><call pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:13">a</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:20">substr</name></name><argument_list pos:start="43:21" pos:end="43:30">(<argument pos:start="43:22" pos:end="43:22"><expr pos:start="43:22" pos:end="43:22"><name pos:start="43:22" pos:end="43:22">i</name></expr></argument>, <argument pos:start="43:25" pos:end="43:29"><expr pos:start="43:25" pos:end="43:29"><name pos:start="43:25" pos:end="43:25">i</name> <operator pos:start="43:27" pos:end="43:27">+</operator> <literal type="number" pos:start="43:29" pos:end="43:29">3</literal></expr></argument>)</argument_list></call> <operator pos:start="43:32" pos:end="43:33">==</operator> <literal type="string" pos:start="43:35" pos:end="43:39">"101"</literal></expr>)</condition> <block pos:start="43:42" pos:end="52:9">{<block_content pos:start="44:13" pos:end="51:21">
            <decl_stmt pos:start="44:13" pos:end="44:50"><decl pos:start="44:13" pos:end="44:49"><type pos:start="44:13" pos:end="44:15"><name pos:start="44:13" pos:end="44:15">int</name></type> <name pos:start="44:17" pos:end="44:17">x</name> <init pos:start="44:19" pos:end="44:49">= <expr pos:start="44:21" pos:end="44:49"><call pos:start="44:21" pos:end="44:49"><name pos:start="44:21" pos:end="44:25">count</name><argument_list pos:start="44:26" pos:end="44:49">(<argument pos:start="44:27" pos:end="44:48"><expr pos:start="44:27" pos:end="44:48"><call pos:start="44:27" pos:end="44:48"><name pos:start="44:27" pos:end="44:34"><name pos:start="44:27" pos:end="44:27">a</name><operator pos:start="44:28" pos:end="44:28">.</operator><name pos:start="44:29" pos:end="44:34">substr</name></name><argument_list pos:start="44:35" pos:end="44:48">(<argument pos:start="44:36" pos:end="44:40"><expr pos:start="44:36" pos:end="44:40"><name pos:start="44:36" pos:end="44:36">i</name> <operator pos:start="44:38" pos:end="44:38">+</operator> <literal type="number" pos:start="44:40" pos:end="44:40">3</literal></expr></argument>, <argument pos:start="44:43" pos:end="44:47"><expr pos:start="44:43" pos:end="44:47"><name pos:start="44:43" pos:end="44:43">i</name> <operator pos:start="44:45" pos:end="44:45">+</operator> <literal type="number" pos:start="44:47" pos:end="44:47">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="45:13" pos:end="48:13"><if pos:start="45:13" pos:end="48:13">if <condition pos:start="45:16" pos:end="45:24">(<expr pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:17">x</name> <operator pos:start="45:19" pos:end="45:20">&gt;=</operator> <literal type="number" pos:start="45:22" pos:end="45:23">26</literal></expr>)</condition> <block pos:start="45:26" pos:end="48:13">{<block_content pos:start="46:17" pos:end="47:25">
                <expr_stmt pos:start="46:17" pos:end="46:40"><expr pos:start="46:17" pos:end="46:39"><name pos:start="46:17" pos:end="46:20">cout</name> <operator pos:start="46:22" pos:end="46:23">&lt;&lt;</operator> <literal type="string" pos:start="46:25" pos:end="46:31">"Error"</literal> <operator pos:start="46:33" pos:end="46:34">&lt;&lt;</operator> <name pos:start="46:36" pos:end="46:39">endl</name></expr>;</expr_stmt>
                <return pos:start="47:17" pos:end="47:25">return <expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="49:13" pos:end="49:20"><expr pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:13">x</name> <operator pos:start="49:15" pos:end="49:16">+=</operator> <literal type="number" pos:start="49:18" pos:end="49:19">65</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:28"><expr pos:start="50:13" pos:end="50:27"><name pos:start="50:13" pos:end="50:16">cout</name> <operator pos:start="50:18" pos:end="50:19">&lt;&lt;</operator> <operator pos:start="50:21" pos:end="50:21">(</operator><name pos:start="50:22" pos:end="50:25">char</name><operator pos:start="50:26" pos:end="50:26">)</operator><name pos:start="50:27" pos:end="50:27">x</name></expr>;</expr_stmt>
            <continue pos:start="51:13" pos:end="51:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="53:9" pos:end="56:9"><if pos:start="53:9" pos:end="56:9">if <condition pos:start="53:12" pos:end="53:71">(<expr pos:start="53:13" pos:end="53:70"><call pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:13">a</name><operator pos:start="53:14" pos:end="53:14">.</operator><name pos:start="53:15" pos:end="53:20">substr</name></name><argument_list pos:start="53:21" pos:end="53:30">(<argument pos:start="53:22" pos:end="53:22"><expr pos:start="53:22" pos:end="53:22"><name pos:start="53:22" pos:end="53:22">i</name></expr></argument>, <argument pos:start="53:25" pos:end="53:29"><expr pos:start="53:25" pos:end="53:29"><name pos:start="53:25" pos:end="53:25">i</name> <operator pos:start="53:27" pos:end="53:27">+</operator> <literal type="number" pos:start="53:29" pos:end="53:29">3</literal></expr></argument>)</argument_list></call> <operator pos:start="53:32" pos:end="53:33">==</operator> <literal type="string" pos:start="53:35" pos:end="53:39">"110"</literal> <operator pos:start="53:41" pos:end="53:42">||</operator> <call pos:start="53:44" pos:end="53:61"><name pos:start="53:44" pos:end="53:51"><name pos:start="53:44" pos:end="53:44">a</name><operator pos:start="53:45" pos:end="53:45">.</operator><name pos:start="53:46" pos:end="53:51">substr</name></name><argument_list pos:start="53:52" pos:end="53:61">(<argument pos:start="53:53" pos:end="53:53"><expr pos:start="53:53" pos:end="53:53"><name pos:start="53:53" pos:end="53:53">i</name></expr></argument>, <argument pos:start="53:56" pos:end="53:60"><expr pos:start="53:56" pos:end="53:60"><name pos:start="53:56" pos:end="53:56">i</name> <operator pos:start="53:58" pos:end="53:58">+</operator> <literal type="number" pos:start="53:60" pos:end="53:60">3</literal></expr></argument>)</argument_list></call> <operator pos:start="53:63" pos:end="53:64">==</operator> <literal type="string" pos:start="53:66" pos:end="53:70">"100"</literal></expr>)</condition> <block pos:start="53:73" pos:end="56:9">{<block_content pos:start="54:13" pos:end="55:21">
            <expr_stmt pos:start="54:13" pos:end="54:36"><expr pos:start="54:13" pos:end="54:35"><name pos:start="54:13" pos:end="54:16">cout</name> <operator pos:start="54:18" pos:end="54:19">&lt;&lt;</operator> <literal type="string" pos:start="54:21" pos:end="54:27">"Error"</literal> <operator pos:start="54:29" pos:end="54:30">&lt;&lt;</operator> <name pos:start="54:32" pos:end="54:35">endl</name></expr>;</expr_stmt>
            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:13">a</name><index pos:start="57:14" pos:end="57:16">[<expr pos:start="57:15" pos:end="57:15"><name pos:start="57:15" pos:end="57:15">i</name></expr>]</index></name> <operator pos:start="57:18" pos:end="57:19">==</operator> <literal type="char" pos:start="57:21" pos:end="57:23">'0'</literal></expr>)</condition> <block pos:start="57:26" pos:end="67:9">{<block_content pos:start="58:13" pos:end="66:21">
            <if_stmt pos:start="58:13" pos:end="61:13"><if pos:start="58:13" pos:end="61:13">if <condition pos:start="58:16" pos:end="58:32">(<expr pos:start="58:17" pos:end="58:31"><name pos:start="58:17" pos:end="58:24"><name pos:start="58:17" pos:end="58:17">a</name><index pos:start="58:18" pos:end="58:24">[<expr pos:start="58:19" pos:end="58:23"><name pos:start="58:19" pos:end="58:19">i</name> <operator pos:start="58:21" pos:end="58:21">+</operator> <literal type="number" pos:start="58:23" pos:end="58:23">8</literal></expr>]</index></name> <operator pos:start="58:26" pos:end="58:27">!=</operator> <literal type="char" pos:start="58:29" pos:end="58:31">'0'</literal></expr>)</condition> <block pos:start="58:34" pos:end="61:13">{<block_content pos:start="59:17" pos:end="60:25">
                <expr_stmt pos:start="59:17" pos:end="59:40"><expr pos:start="59:17" pos:end="59:39"><name pos:start="59:17" pos:end="59:20">cout</name> <operator pos:start="59:22" pos:end="59:23">&lt;&lt;</operator> <literal type="string" pos:start="59:25" pos:end="59:31">"Error"</literal> <operator pos:start="59:33" pos:end="59:34">&lt;&lt;</operator> <name pos:start="59:36" pos:end="59:39">endl</name></expr>;</expr_stmt>
                <return pos:start="60:17" pos:end="60:25">return <expr pos:start="60:24" pos:end="60:24"><literal type="number" pos:start="60:24" pos:end="60:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt pos:start="62:13" pos:end="62:51"><decl pos:start="62:13" pos:end="62:50"><type pos:start="62:13" pos:end="62:15"><name pos:start="62:13" pos:end="62:15">int</name></type> <name pos:start="62:17" pos:end="62:18">x1</name> <init pos:start="62:20" pos:end="62:50">= <expr pos:start="62:22" pos:end="62:50"><call pos:start="62:22" pos:end="62:50"><name pos:start="62:22" pos:end="62:26">count</name><argument_list pos:start="62:27" pos:end="62:50">(<argument pos:start="62:28" pos:end="62:49"><expr pos:start="62:28" pos:end="62:49"><call pos:start="62:28" pos:end="62:49"><name pos:start="62:28" pos:end="62:35"><name pos:start="62:28" pos:end="62:28">a</name><operator pos:start="62:29" pos:end="62:29">.</operator><name pos:start="62:30" pos:end="62:35">substr</name></name><argument_list pos:start="62:36" pos:end="62:49">(<argument pos:start="62:37" pos:end="62:41"><expr pos:start="62:37" pos:end="62:41"><name pos:start="62:37" pos:end="62:37">i</name> <operator pos:start="62:39" pos:end="62:39">+</operator> <literal type="number" pos:start="62:41" pos:end="62:41">1</literal></expr></argument>, <argument pos:start="62:44" pos:end="62:48"><expr pos:start="62:44" pos:end="62:48"><name pos:start="62:44" pos:end="62:44">i</name> <operator pos:start="62:46" pos:end="62:46">+</operator> <literal type="number" pos:start="62:48" pos:end="62:48">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="63:13" pos:end="63:52"><decl pos:start="63:13" pos:end="63:51"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:18">x2</name> <init pos:start="63:20" pos:end="63:51">= <expr pos:start="63:22" pos:end="63:51"><call pos:start="63:22" pos:end="63:51"><name pos:start="63:22" pos:end="63:26">count</name><argument_list pos:start="63:27" pos:end="63:51">(<argument pos:start="63:28" pos:end="63:50"><expr pos:start="63:28" pos:end="63:50"><call pos:start="63:28" pos:end="63:50"><name pos:start="63:28" pos:end="63:35"><name pos:start="63:28" pos:end="63:28">a</name><operator pos:start="63:29" pos:end="63:29">.</operator><name pos:start="63:30" pos:end="63:35">substr</name></name><argument_list pos:start="63:36" pos:end="63:50">(<argument pos:start="63:37" pos:end="63:41"><expr pos:start="63:37" pos:end="63:41"><name pos:start="63:37" pos:end="63:37">i</name> <operator pos:start="63:39" pos:end="63:39">+</operator> <literal type="number" pos:start="63:41" pos:end="63:41">9</literal></expr></argument>, <argument pos:start="63:44" pos:end="63:49"><expr pos:start="63:44" pos:end="63:49"><name pos:start="63:44" pos:end="63:44">i</name> <operator pos:start="63:46" pos:end="63:46">+</operator> <literal type="number" pos:start="63:48" pos:end="63:49">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:28"><expr pos:start="64:13" pos:end="64:27"><name pos:start="64:13" pos:end="64:16">cout</name> <operator pos:start="64:18" pos:end="64:19">&lt;&lt;</operator> <name pos:start="64:21" pos:end="64:22">x1</name> <operator pos:start="64:24" pos:end="64:24">+</operator> <name pos:start="64:26" pos:end="64:27">x2</name></expr>;</expr_stmt>
            <expr_stmt pos:start="65:13" pos:end="65:19"><expr pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:13">i</name> <operator pos:start="65:15" pos:end="65:16">+=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">8</literal></expr>;</expr_stmt>
            <continue pos:start="66:13" pos:end="66:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
</unit>
