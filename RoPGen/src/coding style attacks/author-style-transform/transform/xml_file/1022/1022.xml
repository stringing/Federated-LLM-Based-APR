<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1022/1022.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:17">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:17">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:17">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:17">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:20">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<using pos:start="5:1" pos:end="5:20">using <namespace pos:start="5:7" pos:end="5:20">namespace <name pos:start="5:17" pos:end="5:19">std</name>;</namespace></using>
<decl_stmt pos:start="6:1" pos:end="6:28"><decl pos:start="6:1" pos:end="6:14"><type pos:start="6:1" pos:end="6:4"><name pos:start="6:1" pos:end="6:4">char</name></type> <name pos:start="6:6" pos:end="6:14"><name pos:start="6:6" pos:end="6:6">s</name><index pos:start="6:7" pos:end="6:14">[<expr pos:start="6:8" pos:end="6:13"><literal type="number" pos:start="6:8" pos:end="6:13">200010</literal></expr>]</index></name></decl>, <decl pos:start="6:17" pos:end="6:27"><type ref="prev" pos:start="6:1" pos:end="6:4"/><name pos:start="6:17" pos:end="6:27"><name pos:start="6:17" pos:end="6:19">ans</name><index pos:start="6:20" pos:end="6:27">[<expr pos:start="6:21" pos:end="6:26"><literal type="number" pos:start="6:21" pos:end="6:26">200010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:9"><decl pos:start="7:1" pos:end="7:8"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:8">slen</name></decl>;</decl_stmt>
<function pos:start="8:1" pos:end="16:1"><type pos:start="8:1" pos:end="8:6"><name pos:start="8:1" pos:end="8:6">string</name></type> <name pos:start="8:8" pos:end="8:12">trans</name><parameter_list pos:start="8:13" pos:end="8:19">(<parameter pos:start="8:14" pos:end="8:18"><decl pos:start="8:14" pos:end="8:18"><type pos:start="8:14" pos:end="8:16"><name pos:start="8:14" pos:end="8:16">int</name></type> <name pos:start="8:18" pos:end="8:18">x</name></decl></parameter>)</parameter_list> <block pos:start="8:21" pos:end="16:1">{<block_content pos:start="9:5" pos:end="15:13">
    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">string</name></type> <name pos:start="9:12" pos:end="9:12">r</name></decl>;</decl_stmt>
    <while pos:start="10:5" pos:end="13:5">while <condition pos:start="10:11" pos:end="10:17">(<expr pos:start="10:12" pos:end="10:16"><name pos:start="10:12" pos:end="10:12">x</name> <operator pos:start="10:14" pos:end="10:14">&gt;</operator> <literal type="number" pos:start="10:16" pos:end="10:16">0</literal></expr>)</condition> <block pos:start="10:19" pos:end="13:5">{<block_content pos:start="11:9" pos:end="12:16">
        <expr_stmt pos:start="11:9" pos:end="11:26"><expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:9">r</name> <operator pos:start="11:11" pos:end="11:12">+=</operator> <literal type="char" pos:start="11:14" pos:end="11:16">'0'</literal> <operator pos:start="11:18" pos:end="11:18">+</operator> <name pos:start="11:20" pos:end="11:20">x</name> <operator pos:start="11:22" pos:end="11:22">%</operator> <literal type="number" pos:start="11:24" pos:end="11:25">10</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:16"><expr pos:start="12:9" pos:end="12:15"><name pos:start="12:9" pos:end="12:9">x</name> <operator pos:start="12:11" pos:end="12:12">/=</operator> <literal type="number" pos:start="12:14" pos:end="12:15">10</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="14:5" pos:end="14:32"><expr pos:start="14:5" pos:end="14:31"><call pos:start="14:5" pos:end="14:31"><name pos:start="14:5" pos:end="14:11">reverse</name><argument_list pos:start="14:12" pos:end="14:31">(<argument pos:start="14:13" pos:end="14:21"><expr pos:start="14:13" pos:end="14:21"><call pos:start="14:13" pos:end="14:21"><name pos:start="14:13" pos:end="14:19"><name pos:start="14:13" pos:end="14:13">r</name><operator pos:start="14:14" pos:end="14:14">.</operator><name pos:start="14:15" pos:end="14:19">begin</name></name><argument_list pos:start="14:20" pos:end="14:21">()</argument_list></call></expr></argument>, <argument pos:start="14:24" pos:end="14:30"><expr pos:start="14:24" pos:end="14:30"><call pos:start="14:24" pos:end="14:30"><name pos:start="14:24" pos:end="14:28"><name pos:start="14:24" pos:end="14:24">r</name><operator pos:start="14:25" pos:end="14:25">.</operator><name pos:start="14:26" pos:end="14:28">end</name></name><argument_list pos:start="14:29" pos:end="14:30">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="15:5" pos:end="15:13">return <expr pos:start="15:12" pos:end="15:12"><name pos:start="15:12" pos:end="15:12">r</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="18:1" pos:end="75:1"><type pos:start="18:1" pos:end="18:3"><name pos:start="18:1" pos:end="18:3">int</name></type> <name pos:start="18:5" pos:end="18:8">main</name><parameter_list pos:start="18:9" pos:end="18:10">()</parameter_list> <block pos:start="18:12" pos:end="75:1">{<block_content pos:start="19:5" pos:end="74:13">
    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:11">freopen</name><argument_list pos:start="19:12" pos:end="19:41">(<argument pos:start="19:13" pos:end="19:28"><expr pos:start="19:13" pos:end="19:28"><literal type="string" pos:start="19:13" pos:end="19:28">"information.in"</literal></expr></argument>, <argument pos:start="19:31" pos:end="19:33"><expr pos:start="19:31" pos:end="19:33"><literal type="string" pos:start="19:31" pos:end="19:33">"r"</literal></expr></argument>, <argument pos:start="19:36" pos:end="19:40"><expr pos:start="19:36" pos:end="19:40"><name pos:start="19:36" pos:end="19:40">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:44"><expr pos:start="20:5" pos:end="20:43"><call pos:start="20:5" pos:end="20:43"><name pos:start="20:5" pos:end="20:11">freopen</name><argument_list pos:start="20:12" pos:end="20:43">(<argument pos:start="20:13" pos:end="20:29"><expr pos:start="20:13" pos:end="20:29"><literal type="string" pos:start="20:13" pos:end="20:29">"information.out"</literal></expr></argument>, <argument pos:start="20:32" pos:end="20:34"><expr pos:start="20:32" pos:end="20:34"><literal type="string" pos:start="20:32" pos:end="20:34">"w"</literal></expr></argument>, <argument pos:start="20:37" pos:end="20:42"><expr pos:start="20:37" pos:end="20:42"><name pos:start="20:37" pos:end="20:42">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:7">cin</name> <operator pos:start="21:9" pos:end="21:10">&gt;&gt;</operator> <name pos:start="21:12" pos:end="21:12">s</name></expr>;</expr_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:13"><decl pos:start="22:5" pos:end="22:12"><type pos:start="22:5" pos:end="22:10"><name pos:start="22:5" pos:end="22:10">string</name></type> <name pos:start="22:12" pos:end="22:12">t</name></decl>;</decl_stmt>
    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">pre</name> <init pos:start="23:13" pos:end="23:16">= <expr pos:start="23:15" pos:end="23:16"><operator pos:start="23:15" pos:end="23:15">-</operator><literal type="number" pos:start="23:16" pos:end="23:16">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="24:5" pos:end="24:22"><decl pos:start="24:5" pos:end="24:21"><type pos:start="24:5" pos:end="24:8"><name pos:start="24:5" pos:end="24:8">bool</name></type> <name pos:start="24:10" pos:end="24:13">flag</name> <init pos:start="24:15" pos:end="24:21">= <expr pos:start="24:17" pos:end="24:21"><literal type="boolean" pos:start="24:17" pos:end="24:21">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">len</name> <init pos:start="25:13" pos:end="25:15">= <expr pos:start="25:15" pos:end="25:15"><literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="26:5" pos:end="66:5">for <control pos:start="26:9" pos:end="26:38">(<init pos:start="26:10" pos:end="26:19"><decl pos:start="26:10" pos:end="26:18"><type pos:start="26:10" pos:end="26:12"><name pos:start="26:10" pos:end="26:12">int</name></type> <name pos:start="26:14" pos:end="26:14">i</name> <init pos:start="26:16" pos:end="26:18">= <expr pos:start="26:18" pos:end="26:18"><literal type="number" pos:start="26:18" pos:end="26:18">0</literal></expr></init></decl>;</init> <condition pos:start="26:21" pos:end="26:33"><expr pos:start="26:21" pos:end="26:32"><name pos:start="26:21" pos:end="26:24"><name pos:start="26:21" pos:end="26:21">s</name><index pos:start="26:22" pos:end="26:24">[<expr pos:start="26:23" pos:end="26:23"><name pos:start="26:23" pos:end="26:23">i</name></expr>]</index></name> <operator pos:start="26:26" pos:end="26:27">!=</operator> <literal type="char" pos:start="26:29" pos:end="26:32">'\0'</literal></expr>;</condition> <incr pos:start="26:35" pos:end="26:37"><expr pos:start="26:35" pos:end="26:37"><name pos:start="26:35" pos:end="26:35">i</name><operator pos:start="26:36" pos:end="26:37">++</operator></expr></incr>)</control> <block pos:start="26:40" pos:end="66:5">{<block_content pos:start="27:9" pos:end="65:15">
        <expr_stmt pos:start="27:9" pos:end="27:18"><expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">t</name> <operator pos:start="27:11" pos:end="27:12">+=</operator> <name pos:start="27:14" pos:end="27:17"><name pos:start="27:14" pos:end="27:14">s</name><index pos:start="27:15" pos:end="27:17">[<expr pos:start="27:16" pos:end="27:16"><name pos:start="27:16" pos:end="27:16">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:14"><expr pos:start="28:9" pos:end="28:13"><operator pos:start="28:9" pos:end="28:10">++</operator><name pos:start="28:11" pos:end="28:13">len</name></expr>;</expr_stmt>
        <if_stmt pos:start="29:9" pos:end="31:9"><if pos:start="29:9" pos:end="31:9">if <condition pos:start="29:12" pos:end="29:29">(<expr pos:start="29:13" pos:end="29:28"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">+</operator> <literal type="number" pos:start="29:18" pos:end="29:18">1</literal><operator pos:start="29:19" pos:end="29:19">)</operator> <operator pos:start="29:21" pos:end="29:21">%</operator> <literal type="number" pos:start="29:23" pos:end="29:23">8</literal> <operator pos:start="29:25" pos:end="29:26">!=</operator> <literal type="number" pos:start="29:28" pos:end="29:28">0</literal></expr>)</condition> <block pos:start="29:31" pos:end="31:9">{<block_content pos:start="30:13" pos:end="30:21">
            <continue pos:start="30:13" pos:end="30:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="32:9" pos:end="35:9"><if pos:start="32:9" pos:end="35:9">if <condition pos:start="32:12" pos:end="32:32">(<expr pos:start="32:13" pos:end="32:31"><name pos:start="32:13" pos:end="32:16">flag</name> <operator pos:start="32:18" pos:end="32:19">&amp;&amp;</operator> <name pos:start="32:21" pos:end="32:24"><name pos:start="32:21" pos:end="32:21">t</name><index pos:start="32:22" pos:end="32:24">[<expr pos:start="32:23" pos:end="32:23"><literal type="number" pos:start="32:23" pos:end="32:23">0</literal></expr>]</index></name> <operator pos:start="32:26" pos:end="32:27">!=</operator> <literal type="char" pos:start="32:29" pos:end="32:31">'0'</literal></expr>)</condition> <block pos:start="32:34" pos:end="35:9">{<block_content pos:start="33:13" pos:end="34:21">
            <expr_stmt pos:start="33:13" pos:end="33:36"><expr pos:start="33:13" pos:end="33:35"><name pos:start="33:13" pos:end="33:16">cout</name> <operator pos:start="33:18" pos:end="33:19">&lt;&lt;</operator> <literal type="string" pos:start="33:21" pos:end="33:27">"Error"</literal> <operator pos:start="33:29" pos:end="33:30">&lt;&lt;</operator> <name pos:start="33:32" pos:end="33:35">endl</name></expr>;</expr_stmt>
            <return pos:start="34:13" pos:end="34:21">return <expr pos:start="34:20" pos:end="34:20"><literal type="number" pos:start="34:20" pos:end="34:20">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="36:9" pos:end="64:9"><if pos:start="36:9" pos:end="47:9">if <condition pos:start="36:12" pos:end="36:36">(<expr pos:start="36:13" pos:end="36:35"><call pos:start="36:13" pos:end="36:26"><name pos:start="36:13" pos:end="36:20"><name pos:start="36:13" pos:end="36:13">t</name><operator pos:start="36:14" pos:end="36:14">.</operator><name pos:start="36:15" pos:end="36:20">substr</name></name><argument_list pos:start="36:21" pos:end="36:26">(<argument pos:start="36:22" pos:end="36:22"><expr pos:start="36:22" pos:end="36:22"><literal type="number" pos:start="36:22" pos:end="36:22">0</literal></expr></argument>, <argument pos:start="36:25" pos:end="36:25"><expr pos:start="36:25" pos:end="36:25"><literal type="number" pos:start="36:25" pos:end="36:25">3</literal></expr></argument>)</argument_list></call> <operator pos:start="36:28" pos:end="36:29">==</operator> <literal type="string" pos:start="36:31" pos:end="36:35">"101"</literal></expr>)</condition> <block pos:start="36:38" pos:end="47:9">{<block_content pos:start="37:13" pos:end="46:19">
            <decl_stmt pos:start="37:13" pos:end="37:24"><decl pos:start="37:13" pos:end="37:23"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:19">tmp</name> <init pos:start="37:21" pos:end="37:23">= <expr pos:start="37:23" pos:end="37:23"><literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr></init></decl>;</decl_stmt>
            <for pos:start="38:13" pos:end="40:13">for <control pos:start="38:17" pos:end="38:39">(<init pos:start="38:18" pos:end="38:27"><decl pos:start="38:18" pos:end="38:26"><type pos:start="38:18" pos:end="38:20"><name pos:start="38:18" pos:end="38:20">int</name></type> <name pos:start="38:22" pos:end="38:22">k</name> <init pos:start="38:24" pos:end="38:26">= <expr pos:start="38:26" pos:end="38:26"><literal type="number" pos:start="38:26" pos:end="38:26">3</literal></expr></init></decl>;</init> <condition pos:start="38:29" pos:end="38:34"><expr pos:start="38:29" pos:end="38:33"><name pos:start="38:29" pos:end="38:29">k</name> <operator pos:start="38:31" pos:end="38:31">&lt;</operator> <literal type="number" pos:start="38:33" pos:end="38:33">8</literal></expr>;</condition> <incr pos:start="38:36" pos:end="38:38"><expr pos:start="38:36" pos:end="38:38"><name pos:start="38:36" pos:end="38:36">k</name><operator pos:start="38:37" pos:end="38:38">++</operator></expr></incr>)</control> <block pos:start="38:41" pos:end="40:13">{<block_content pos:start="39:17" pos:end="39:43">
                <expr_stmt pos:start="39:17" pos:end="39:43"><expr pos:start="39:17" pos:end="39:42"><name pos:start="39:17" pos:end="39:19">tmp</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:25">tmp</name> <operator pos:start="39:27" pos:end="39:27">*</operator> <literal type="number" pos:start="39:29" pos:end="39:31">2</literal> <operator pos:start="39:31" pos:end="39:31">+</operator> <name pos:start="39:33" pos:end="39:36"><name pos:start="39:33" pos:end="39:33">t</name><index pos:start="39:34" pos:end="39:36">[<expr pos:start="39:35" pos:end="39:35"><name pos:start="39:35" pos:end="39:35">k</name></expr>]</index></name> <operator pos:start="39:38" pos:end="39:38">-</operator> <literal type="char" pos:start="39:40" pos:end="39:42">'0'</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="41:13" pos:end="44:13"><if pos:start="41:13" pos:end="44:13">if <condition pos:start="41:16" pos:end="41:25">(<expr pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:19">tmp</name> <operator pos:start="41:21" pos:end="41:21">&gt;</operator> <literal type="number" pos:start="41:23" pos:end="41:24">25</literal></expr>)</condition> <block pos:start="41:27" pos:end="44:13">{<block_content pos:start="42:17" pos:end="43:25">
                <expr_stmt pos:start="42:17" pos:end="42:40"><expr pos:start="42:17" pos:end="42:39"><name pos:start="42:17" pos:end="42:20">cout</name> <operator pos:start="42:22" pos:end="42:23">&lt;&lt;</operator> <literal type="string" pos:start="42:25" pos:end="42:31">"Error"</literal> <operator pos:start="42:33" pos:end="42:34">&lt;&lt;</operator> <name pos:start="42:36" pos:end="42:39">endl</name></expr>;</expr_stmt>
                <return pos:start="43:17" pos:end="43:25">return <expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:15">ans</name><index pos:start="45:16" pos:end="45:21">[<expr pos:start="45:17" pos:end="45:20"><name pos:start="45:17" pos:end="45:20">slen</name></expr>]</index></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:27">tmp</name> <operator pos:start="45:29" pos:end="45:29">+</operator><literal type="char" pos:start="45:30" pos:end="45:32">'A'</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="46:13" pos:end="46:19"><expr pos:start="46:13" pos:end="46:18"><operator pos:start="46:13" pos:end="46:14">++</operator><name pos:start="46:15" pos:end="46:18">slen</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="50:9">else if <condition pos:start="47:19" pos:end="47:43">(<expr pos:start="47:20" pos:end="47:42"><call pos:start="47:20" pos:end="47:33"><name pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:20">t</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:27">substr</name></name><argument_list pos:start="47:28" pos:end="47:33">(<argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><literal type="number" pos:start="47:29" pos:end="47:29">0</literal></expr></argument>, <argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><literal type="number" pos:start="47:32" pos:end="47:32">3</literal></expr></argument>)</argument_list></call> <operator pos:start="47:35" pos:end="47:36">==</operator> <literal type="string" pos:start="47:38" pos:end="47:42">"111"</literal></expr>)</condition> <block pos:start="47:45" pos:end="50:9">{<block_content pos:start="48:13" pos:end="49:19">
            <expr_stmt pos:start="48:13" pos:end="48:28"><expr pos:start="48:13" pos:end="48:27"><name pos:start="48:13" pos:end="48:21"><name pos:start="48:13" pos:end="48:15">ans</name><index pos:start="48:16" pos:end="48:21">[<expr pos:start="48:17" pos:end="48:20"><name pos:start="48:17" pos:end="48:20">slen</name></expr>]</index></name> <operator pos:start="48:23" pos:end="48:23">=</operator> <literal type="char" pos:start="48:25" pos:end="48:27">' '</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="49:13" pos:end="49:19"><expr pos:start="49:13" pos:end="49:18"><operator pos:start="49:13" pos:end="49:14">++</operator><name pos:start="49:15" pos:end="49:18">slen</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="50:11" pos:end="60:9">else if <condition pos:start="50:19" pos:end="50:31">(<expr pos:start="50:20" pos:end="50:30"><name pos:start="50:20" pos:end="50:23"><name pos:start="50:20" pos:end="50:20">t</name><index pos:start="50:21" pos:end="50:23">[<expr pos:start="50:22" pos:end="50:22"><literal type="number" pos:start="50:22" pos:end="50:22">0</literal></expr>]</index></name> <operator pos:start="50:25" pos:end="50:26">==</operator> <literal type="char" pos:start="50:28" pos:end="50:30">'0'</literal></expr>)</condition> <block pos:start="50:33" pos:end="60:9">{<block_content pos:start="51:13" pos:end="59:13">
            <decl_stmt pos:start="51:13" pos:end="51:24"><decl pos:start="51:13" pos:end="51:23"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:19">tmp</name> <init pos:start="51:21" pos:end="51:23">= <expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr></init></decl>;</decl_stmt>
            <for pos:start="52:13" pos:end="55:13">for <control pos:start="52:17" pos:end="52:39">(<init pos:start="52:18" pos:end="52:27"><decl pos:start="52:18" pos:end="52:26"><type pos:start="52:18" pos:end="52:20"><name pos:start="52:18" pos:end="52:20">int</name></type> <name pos:start="52:22" pos:end="52:22">k</name> <init pos:start="52:24" pos:end="52:26">= <expr pos:start="52:26" pos:end="52:26"><literal type="number" pos:start="52:26" pos:end="52:26">0</literal></expr></init></decl>;</init> <condition pos:start="52:29" pos:end="52:34"><expr pos:start="52:29" pos:end="52:33"><name pos:start="52:29" pos:end="52:29">k</name> <operator pos:start="52:31" pos:end="52:31">&lt;</operator> <literal type="number" pos:start="52:33" pos:end="52:33">8</literal></expr>;</condition> <incr pos:start="52:36" pos:end="52:38"><expr pos:start="52:36" pos:end="52:38"><name pos:start="52:36" pos:end="52:36">k</name><operator pos:start="52:37" pos:end="52:38">++</operator></expr></incr>)</control> <block pos:start="52:41" pos:end="55:13">{<block_content pos:start="53:17" pos:end="54:29">
                <expr_stmt pos:start="53:17" pos:end="53:43"><expr pos:start="53:17" pos:end="53:42"><name pos:start="53:17" pos:end="53:19">tmp</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:25">tmp</name> <operator pos:start="53:27" pos:end="53:27">*</operator> <literal type="number" pos:start="53:29" pos:end="53:31">2</literal> <operator pos:start="53:31" pos:end="53:31">+</operator> <name pos:start="53:33" pos:end="53:36"><name pos:start="53:33" pos:end="53:33">t</name><index pos:start="53:34" pos:end="53:36">[<expr pos:start="53:35" pos:end="53:35"><name pos:start="53:35" pos:end="53:35">k</name></expr>]</index></name> <operator pos:start="53:38" pos:end="53:38">-</operator> <literal type="char" pos:start="53:40" pos:end="53:42">'0'</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="54:17" pos:end="54:29"><expr pos:start="54:17" pos:end="54:28"><name pos:start="54:17" pos:end="54:20">flag</name> <operator pos:start="54:22" pos:end="54:22">=</operator> <literal type="boolean" pos:start="54:24" pos:end="54:28">false</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="56:13" pos:end="59:13"><if pos:start="56:13" pos:end="59:13">if <condition pos:start="56:16" pos:end="56:22">(<expr pos:start="56:17" pos:end="56:21"><operator pos:start="56:17" pos:end="56:17">!</operator><name pos:start="56:18" pos:end="56:21">flag</name></expr>)</condition> <block pos:start="56:24" pos:end="59:13">{<block_content pos:start="57:17" pos:end="58:25">
                <expr_stmt pos:start="57:17" pos:end="57:28"><expr pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:20">flag</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <literal type="boolean" pos:start="57:24" pos:end="57:27">true</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="58:17" pos:end="58:25"><expr pos:start="58:17" pos:end="58:24"><name pos:start="58:17" pos:end="58:19">pre</name> <operator pos:start="58:21" pos:end="58:21">=</operator> <operator pos:start="58:23" pos:end="58:23">-</operator><literal type="number" pos:start="58:24" pos:end="58:24">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else pos:start="61:9" pos:end="64:9">else <block pos:start="61:14" pos:end="64:9">{<block_content pos:start="62:13" pos:end="63:21">
            <expr_stmt pos:start="62:13" pos:end="62:36"><expr pos:start="62:13" pos:end="62:35"><name pos:start="62:13" pos:end="62:16">cout</name> <operator pos:start="62:18" pos:end="62:19">&lt;&lt;</operator> <literal type="string" pos:start="62:21" pos:end="62:27">"Error"</literal> <operator pos:start="62:29" pos:end="62:30">&lt;&lt;</operator> <name pos:start="62:32" pos:end="62:35">endl</name></expr>;</expr_stmt>
            <return pos:start="63:13" pos:end="63:21">return <expr pos:start="63:20" pos:end="63:20"><literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:15"><expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:9">t</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <literal type="string" pos:start="65:13" pos:end="65:14">""</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="69:5">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:12">flag</name> <operator pos:start="67:14" pos:end="67:15">||</operator> <name pos:start="67:17" pos:end="67:19">len</name> <operator pos:start="67:21" pos:end="67:21">%</operator> <literal type="number" pos:start="67:23" pos:end="67:23">8</literal> <operator pos:start="67:25" pos:end="67:26">!=</operator> <literal type="number" pos:start="67:28" pos:end="67:28">0</literal></expr>)</condition> <block pos:start="67:31" pos:end="69:5">{<block_content pos:start="68:9" pos:end="68:32">
        <expr_stmt pos:start="68:9" pos:end="68:32"><expr pos:start="68:9" pos:end="68:31"><name pos:start="68:9" pos:end="68:12">cout</name> <operator pos:start="68:14" pos:end="68:15">&lt;&lt;</operator> <literal type="string" pos:start="68:17" pos:end="68:23">"Error"</literal> <operator pos:start="68:25" pos:end="68:26">&lt;&lt;</operator> <name pos:start="68:28" pos:end="68:31">endl</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="70:9" pos:end="72:9">
        <for pos:start="70:9" pos:end="72:9">for <control pos:start="70:13" pos:end="70:38">(<init pos:start="70:14" pos:end="70:23"><decl pos:start="70:14" pos:end="70:22"><type pos:start="70:14" pos:end="70:16"><name pos:start="70:14" pos:end="70:16">int</name></type> <name pos:start="70:18" pos:end="70:18">j</name> <init pos:start="70:20" pos:end="70:22">= <expr pos:start="70:22" pos:end="70:22"><literal type="number" pos:start="70:22" pos:end="70:22">0</literal></expr></init></decl>;</init> <condition pos:start="70:25" pos:end="70:33"><expr pos:start="70:25" pos:end="70:32"><name pos:start="70:25" pos:end="70:25">j</name> <operator pos:start="70:27" pos:end="70:27">&lt;</operator> <name pos:start="70:29" pos:end="70:32">slen</name></expr>;</condition> <incr pos:start="70:35" pos:end="70:37"><expr pos:start="70:35" pos:end="70:37"><name pos:start="70:35" pos:end="70:35">j</name><operator pos:start="70:36" pos:end="70:37">++</operator></expr></incr>)</control> <block pos:start="70:40" pos:end="72:9">{<block_content pos:start="71:13" pos:end="71:27">
            <expr_stmt pos:start="71:13" pos:end="71:27"><expr pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:16">cout</name> <operator pos:start="71:18" pos:end="71:19">&lt;&lt;</operator> <name pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:23">ans</name><index pos:start="71:24" pos:end="71:26">[<expr pos:start="71:25" pos:end="71:25"><name pos:start="71:25" pos:end="71:25">j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <return pos:start="74:5" pos:end="74:13">return <expr pos:start="74:12" pos:end="74:12"><literal type="number" pos:start="74:12" pos:end="74:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
