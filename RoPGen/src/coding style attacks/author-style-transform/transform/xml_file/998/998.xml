<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/998/998.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:17">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:17">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:20">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<using pos:start="3:1" pos:end="3:20">using <namespace pos:start="3:7" pos:end="3:20">namespace <name pos:start="3:17" pos:end="3:19">std</name>;</namespace></using>

<decl_stmt pos:start="5:1" pos:end="5:21"><decl pos:start="5:1" pos:end="5:5"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:5">n</name></decl>, <decl pos:start="5:8" pos:end="5:8"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:8" pos:end="5:8">m</name></decl>, <decl pos:start="5:11" pos:end="5:11"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:11" pos:end="5:11">x</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:14" pos:end="5:14">y</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:17" pos:end="5:17">v</name></decl>, <decl pos:start="5:20" pos:end="5:20"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:20" pos:end="5:20">c</name></decl>;</decl_stmt>
<decl_stmt pos:start="6:1" pos:end="6:20"><decl pos:start="6:1" pos:end="6:19"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:19"><name pos:start="6:5" pos:end="6:7">map</name><index pos:start="6:8" pos:end="6:13">[<expr pos:start="6:9" pos:end="6:12"><literal type="number" pos:start="6:9" pos:end="6:12">1010</literal></expr>]</index><index pos:start="6:14" pos:end="6:19">[<expr pos:start="6:15" pos:end="6:18"><literal type="number" pos:start="6:15" pos:end="6:18">1010</literal></expr>]</index></name></decl>;</decl_stmt>
<struct pos:start="7:1" pos:end="17:2">struct <name pos:start="7:8" pos:end="7:12">queue</name>
<block pos:start="8:1" pos:end="17:1">{<public type="default" pos:start="9:3" pos:end="16:3">
  <decl_stmt pos:start="9:3" pos:end="9:11"><decl pos:start="9:3" pos:end="9:7"><type pos:start="9:3" pos:end="9:5"><name pos:start="9:3" pos:end="9:5">int</name></type> <name pos:start="9:7" pos:end="9:7">x</name></decl>, <decl pos:start="9:10" pos:end="9:10"><type ref="prev" pos:start="9:3" pos:end="9:5"/><name pos:start="9:10" pos:end="9:10">y</name></decl>;</decl_stmt>
  <decl_stmt pos:start="10:3" pos:end="10:12"><decl pos:start="10:3" pos:end="10:11"><type pos:start="10:3" pos:end="10:5"><name pos:start="10:3" pos:end="10:5">int</name></type> <name pos:start="10:7" pos:end="10:11">score</name></decl>;</decl_stmt>
  <decl_stmt pos:start="11:3" pos:end="11:11"><decl pos:start="11:3" pos:end="11:10"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type> <name pos:start="11:7" pos:end="11:10">from</name></decl>;</decl_stmt>
  
  <function pos:start="13:3" pos:end="16:3"><type pos:start="13:3" pos:end="13:6"><name pos:start="13:3" pos:end="13:6">void</name></type> <name pos:start="13:8" pos:end="13:11">init</name><parameter_list pos:start="13:12" pos:end="13:74">(<parameter pos:start="13:13" pos:end="13:24"><decl pos:start="13:13" pos:end="13:24"><type pos:start="13:13" pos:end="13:24"><specifier pos:start="13:13" pos:end="13:17">const</specifier> <name pos:start="13:19" pos:end="13:21">int</name></type> <name pos:start="13:23" pos:end="13:24">_x</name></decl></parameter>, <parameter pos:start="13:27" pos:end="13:38"><decl pos:start="13:27" pos:end="13:38"><type pos:start="13:27" pos:end="13:38"><specifier pos:start="13:27" pos:end="13:31">const</specifier> <name pos:start="13:33" pos:end="13:35">int</name></type> <name pos:start="13:37" pos:end="13:38">_y</name></decl></parameter>, <parameter pos:start="13:41" pos:end="13:56"><decl pos:start="13:41" pos:end="13:56"><type pos:start="13:41" pos:end="13:56"><specifier pos:start="13:41" pos:end="13:45">const</specifier> <name pos:start="13:47" pos:end="13:49">int</name></type> <name pos:start="13:51" pos:end="13:56">_score</name></decl></parameter>, <parameter pos:start="13:59" pos:end="13:73"><decl pos:start="13:59" pos:end="13:73"><type pos:start="13:59" pos:end="13:73"><specifier pos:start="13:59" pos:end="13:63">const</specifier> <name pos:start="13:65" pos:end="13:67">int</name></type> <name pos:start="13:69" pos:end="13:73">_from</name></decl></parameter>)</parameter_list>
  <block pos:start="14:3" pos:end="16:3">{<block_content pos:start="15:5" pos:end="15:49">
    <expr_stmt pos:start="15:5" pos:end="15:49"><expr pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:5">x</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <name pos:start="15:9" pos:end="15:10">_x</name></expr><operator pos:start="15:11" pos:end="15:11">,</operator> <expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:13">y</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:18">_y</name></expr><operator pos:start="15:19" pos:end="15:19">,</operator> <expr pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:25">score</name> <operator pos:start="15:27" pos:end="15:27">=</operator> <name pos:start="15:29" pos:end="15:34">_score</name></expr><operator pos:start="15:35" pos:end="15:35">,</operator> <expr pos:start="15:37" pos:end="15:48"><name pos:start="15:37" pos:end="15:40">from</name> <operator pos:start="15:42" pos:end="15:42">=</operator> <name pos:start="15:44" pos:end="15:48">_from</name></expr>;</expr_stmt>
  </block_content>}</block></function>
</public>}</block>;</struct>
<decl_stmt pos:start="18:1" pos:end="18:16"><decl pos:start="18:1" pos:end="18:15"><type pos:start="18:1" pos:end="18:5"><name pos:start="18:1" pos:end="18:5">queue</name></type> <name pos:start="18:7" pos:end="18:15"><name pos:start="18:7" pos:end="18:7">q</name> <index pos:start="18:9" pos:end="18:15">[<expr pos:start="18:10" pos:end="18:14"><literal type="number" pos:start="18:10" pos:end="18:14">10101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="19:1" pos:end="19:17"><decl pos:start="19:1" pos:end="19:9"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:5">l</name> <init pos:start="19:7" pos:end="19:9">= <expr pos:start="19:9" pos:end="19:9"><literal type="number" pos:start="19:9" pos:end="19:9">0</literal></expr></init></decl>, <decl pos:start="19:12" pos:end="19:16"><type ref="prev" pos:start="19:1" pos:end="19:3"/><name pos:start="19:12" pos:end="19:12">r</name> <init pos:start="19:14" pos:end="19:16">= <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="20:1" pos:end="20:13"><decl pos:start="20:1" pos:end="20:12"><type pos:start="20:1" pos:end="20:3"><name pos:start="20:1" pos:end="20:3">int</name></type> <name pos:start="20:5" pos:end="20:7">ans</name> <init pos:start="20:9" pos:end="20:12">= <expr pos:start="20:11" pos:end="20:12"><operator pos:start="20:11" pos:end="20:11">-</operator><literal type="number" pos:start="20:12" pos:end="20:12">1</literal></expr></init></decl>;</decl_stmt>

<function pos:start="22:1" pos:end="84:1"><type pos:start="22:1" pos:end="22:3"><name pos:start="22:1" pos:end="22:3">int</name></type> <name pos:start="22:5" pos:end="22:8">main</name> <parameter_list pos:start="22:10" pos:end="22:11">()</parameter_list>
<block pos:start="23:1" pos:end="84:1">{<block_content pos:start="24:3" pos:end="83:11">
  <expr_stmt pos:start="24:3" pos:end="24:36"><expr pos:start="24:3" pos:end="24:35"><call pos:start="24:3" pos:end="24:35"><name pos:start="24:3" pos:end="24:9">freopen</name> <argument_list pos:start="24:11" pos:end="24:35">(<argument pos:start="24:12" pos:end="24:22"><expr pos:start="24:12" pos:end="24:22"><literal type="string" pos:start="24:12" pos:end="24:22">"escape.in"</literal></expr></argument>, <argument pos:start="24:25" pos:end="24:27"><expr pos:start="24:25" pos:end="24:27"><literal type="string" pos:start="24:25" pos:end="24:27">"r"</literal></expr></argument>, <argument pos:start="24:30" pos:end="24:34"><expr pos:start="24:30" pos:end="24:34"><name pos:start="24:30" pos:end="24:34">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt pos:start="25:3" pos:end="25:38"><expr pos:start="25:3" pos:end="25:37"><call pos:start="25:3" pos:end="25:37"><name pos:start="25:3" pos:end="25:9">freopen</name> <argument_list pos:start="25:11" pos:end="25:37">(<argument pos:start="25:12" pos:end="25:23"><expr pos:start="25:12" pos:end="25:23"><literal type="string" pos:start="25:12" pos:end="25:23">"escape.out"</literal></expr></argument>, <argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><literal type="string" pos:start="25:26" pos:end="25:28">"w"</literal></expr></argument>, <argument pos:start="25:31" pos:end="25:36"><expr pos:start="25:31" pos:end="25:36"><name pos:start="25:31" pos:end="25:36">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt pos:start="26:3" pos:end="26:48"><expr pos:start="26:3" pos:end="26:47"><call pos:start="26:3" pos:end="26:47"><name pos:start="26:3" pos:end="26:7">scanf</name><argument_list pos:start="26:8" pos:end="26:47">(<argument pos:start="26:9" pos:end="26:22"><expr pos:start="26:9" pos:end="26:22"><literal type="string" pos:start="26:9" pos:end="26:22">"%d%d%d%d%d%d"</literal></expr></argument>, <argument pos:start="26:25" pos:end="26:26"><expr pos:start="26:25" pos:end="26:26"><operator pos:start="26:25" pos:end="26:25">&amp;</operator><name pos:start="26:26" pos:end="26:26">n</name></expr></argument>, <argument pos:start="26:29" pos:end="26:30"><expr pos:start="26:29" pos:end="26:30"><operator pos:start="26:29" pos:end="26:29">&amp;</operator><name pos:start="26:30" pos:end="26:30">m</name></expr></argument>, <argument pos:start="26:33" pos:end="26:34"><expr pos:start="26:33" pos:end="26:34"><operator pos:start="26:33" pos:end="26:33">&amp;</operator><name pos:start="26:34" pos:end="26:34">x</name></expr></argument>, <argument pos:start="26:37" pos:end="26:38"><expr pos:start="26:37" pos:end="26:38"><operator pos:start="26:37" pos:end="26:37">&amp;</operator><name pos:start="26:38" pos:end="26:38">y</name></expr></argument>, <argument pos:start="26:41" pos:end="26:42"><expr pos:start="26:41" pos:end="26:42"><operator pos:start="26:41" pos:end="26:41">&amp;</operator><name pos:start="26:42" pos:end="26:42">v</name></expr></argument>, <argument pos:start="26:45" pos:end="26:46"><expr pos:start="26:45" pos:end="26:46"><operator pos:start="26:45" pos:end="26:45">&amp;</operator><name pos:start="26:46" pos:end="26:46">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for pos:start="27:3" pos:end="33:3">for <control pos:start="27:7" pos:end="27:31">(<init pos:start="27:8" pos:end="27:17"><decl pos:start="27:8" pos:end="27:16"><type pos:start="27:8" pos:end="27:10"><name pos:start="27:8" pos:end="27:10">int</name></type> <name pos:start="27:12" pos:end="27:12">i</name> <init pos:start="27:14" pos:end="27:16">= <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr></init></decl>;</init> <condition pos:start="27:19" pos:end="27:25"><expr pos:start="27:19" pos:end="27:24"><name pos:start="27:19" pos:end="27:19">i</name> <operator pos:start="27:21" pos:end="27:22">&lt;=</operator> <name pos:start="27:24" pos:end="27:24">n</name></expr>;</condition> <incr pos:start="27:27" pos:end="27:30"><expr pos:start="27:27" pos:end="27:30"><name pos:start="27:27" pos:end="27:27">i</name> <operator pos:start="27:29" pos:end="27:30">++</operator></expr></incr>)</control>
  <block pos:start="28:3" pos:end="33:3">{<block_content pos:start="29:6" pos:end="32:6">
     <for pos:start="29:6" pos:end="32:6">for <control pos:start="29:10" pos:end="29:34">(<init pos:start="29:11" pos:end="29:20"><decl pos:start="29:11" pos:end="29:19"><type pos:start="29:11" pos:end="29:13"><name pos:start="29:11" pos:end="29:13">int</name></type> <name pos:start="29:15" pos:end="29:15">j</name> <init pos:start="29:17" pos:end="29:19">= <expr pos:start="29:19" pos:end="29:19"><literal type="number" pos:start="29:19" pos:end="29:19">1</literal></expr></init></decl>;</init> <condition pos:start="29:22" pos:end="29:28"><expr pos:start="29:22" pos:end="29:27"><name pos:start="29:22" pos:end="29:22">j</name> <operator pos:start="29:24" pos:end="29:25">&lt;=</operator> <name pos:start="29:27" pos:end="29:27">m</name></expr>;</condition> <incr pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:30">j</name> <operator pos:start="29:32" pos:end="29:33">++</operator></expr></incr>)</control>
     <block pos:start="30:6" pos:end="32:6">{<block_content pos:start="31:8" pos:end="31:31">
       <expr_stmt pos:start="31:8" pos:end="31:31"><expr pos:start="31:8" pos:end="31:30"><call pos:start="31:8" pos:end="31:30"><name pos:start="31:8" pos:end="31:12">scanf</name><argument_list pos:start="31:13" pos:end="31:30">(<argument pos:start="31:14" pos:end="31:17"><expr pos:start="31:14" pos:end="31:17"><literal type="string" pos:start="31:14" pos:end="31:17">"%d"</literal></expr></argument>, <argument pos:start="31:20" pos:end="31:29"><expr pos:start="31:20" pos:end="31:29"><operator pos:start="31:20" pos:end="31:20">&amp;</operator><name pos:start="31:21" pos:end="31:29"><name pos:start="31:21" pos:end="31:23">map</name><index pos:start="31:24" pos:end="31:26">[<expr pos:start="31:25" pos:end="31:25"><name pos:start="31:25" pos:end="31:25">i</name></expr>]</index><index pos:start="31:27" pos:end="31:29">[<expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
  </block_content>}</block></for>
  
  
  <expr_stmt pos:start="36:3" pos:end="36:101"><expr pos:start="36:3" pos:end="36:25"><name pos:start="36:3" pos:end="36:8"><name pos:start="36:3" pos:end="36:3">q</name><index pos:start="36:4" pos:end="36:8">[<expr pos:start="36:5" pos:end="36:7"><name pos:start="36:5" pos:end="36:5">r</name><operator pos:start="36:6" pos:end="36:7">++</operator></expr>]</index></name><operator pos:start="36:9" pos:end="36:9">.</operator><call pos:start="36:10" pos:end="36:25"><name pos:start="36:10" pos:end="36:13">init</name><argument_list pos:start="36:14" pos:end="36:25">(<argument pos:start="36:15" pos:end="36:15"><expr pos:start="36:15" pos:end="36:15"><literal type="number" pos:start="36:15" pos:end="36:15">1</literal></expr></argument>, <argument pos:start="36:18" pos:end="36:18"><expr pos:start="36:18" pos:end="36:18"><literal type="number" pos:start="36:18" pos:end="36:18">1</literal></expr></argument>, <argument pos:start="36:21" pos:end="36:21"><expr pos:start="36:21" pos:end="36:21"><name pos:start="36:21" pos:end="36:21">c</name></expr></argument>, <argument pos:start="36:24" pos:end="36:24"><expr pos:start="36:24" pos:end="36:24"><literal type="number" pos:start="36:24" pos:end="36:24">1</literal></expr></argument>)</argument_list></call></expr><operator pos:start="36:26" pos:end="36:26">,</operator> <expr pos:start="36:28" pos:end="36:50"><name pos:start="36:28" pos:end="36:33"><name pos:start="36:28" pos:end="36:28">q</name><index pos:start="36:29" pos:end="36:33">[<expr pos:start="36:30" pos:end="36:32"><name pos:start="36:30" pos:end="36:30">r</name><operator pos:start="36:31" pos:end="36:32">++</operator></expr>]</index></name><operator pos:start="36:34" pos:end="36:34">.</operator><call pos:start="36:35" pos:end="36:50"><name pos:start="36:35" pos:end="36:38">init</name><argument_list pos:start="36:39" pos:end="36:50">(<argument pos:start="36:40" pos:end="36:40"><expr pos:start="36:40" pos:end="36:40"><literal type="number" pos:start="36:40" pos:end="36:40">1</literal></expr></argument>, <argument pos:start="36:43" pos:end="36:43"><expr pos:start="36:43" pos:end="36:43"><name pos:start="36:43" pos:end="36:43">m</name></expr></argument>, <argument pos:start="36:46" pos:end="36:46"><expr pos:start="36:46" pos:end="36:46"><name pos:start="36:46" pos:end="36:46">c</name></expr></argument>, <argument pos:start="36:49" pos:end="36:49"><expr pos:start="36:49" pos:end="36:49"><literal type="number" pos:start="36:49" pos:end="36:49">2</literal></expr></argument>)</argument_list></call></expr><operator pos:start="36:51" pos:end="36:51">,</operator> <expr pos:start="36:53" pos:end="36:75"><name pos:start="36:53" pos:end="36:58"><name pos:start="36:53" pos:end="36:53">q</name><index pos:start="36:54" pos:end="36:58">[<expr pos:start="36:55" pos:end="36:57"><name pos:start="36:55" pos:end="36:55">r</name><operator pos:start="36:56" pos:end="36:57">++</operator></expr>]</index></name><operator pos:start="36:59" pos:end="36:59">.</operator><call pos:start="36:60" pos:end="36:75"><name pos:start="36:60" pos:end="36:63">init</name><argument_list pos:start="36:64" pos:end="36:75">(<argument pos:start="36:65" pos:end="36:65"><expr pos:start="36:65" pos:end="36:65"><name pos:start="36:65" pos:end="36:65">n</name></expr></argument>, <argument pos:start="36:68" pos:end="36:68"><expr pos:start="36:68" pos:end="36:68"><literal type="number" pos:start="36:68" pos:end="36:68">1</literal></expr></argument>, <argument pos:start="36:71" pos:end="36:71"><expr pos:start="36:71" pos:end="36:71"><name pos:start="36:71" pos:end="36:71">c</name></expr></argument>, <argument pos:start="36:74" pos:end="36:74"><expr pos:start="36:74" pos:end="36:74"><literal type="number" pos:start="36:74" pos:end="36:74">3</literal></expr></argument>)</argument_list></call></expr><operator pos:start="36:76" pos:end="36:76">,</operator> <expr pos:start="36:78" pos:end="36:100"><name pos:start="36:78" pos:end="36:83"><name pos:start="36:78" pos:end="36:78">q</name><index pos:start="36:79" pos:end="36:83">[<expr pos:start="36:80" pos:end="36:82"><name pos:start="36:80" pos:end="36:80">r</name><operator pos:start="36:81" pos:end="36:82">++</operator></expr>]</index></name><operator pos:start="36:84" pos:end="36:84">.</operator><call pos:start="36:85" pos:end="36:100"><name pos:start="36:85" pos:end="36:88">init</name><argument_list pos:start="36:89" pos:end="36:100">(<argument pos:start="36:90" pos:end="36:90"><expr pos:start="36:90" pos:end="36:90"><name pos:start="36:90" pos:end="36:90">n</name></expr></argument>, <argument pos:start="36:93" pos:end="36:93"><expr pos:start="36:93" pos:end="36:93"><name pos:start="36:93" pos:end="36:93">m</name></expr></argument>, <argument pos:start="36:96" pos:end="36:96"><expr pos:start="36:96" pos:end="36:96"><name pos:start="36:96" pos:end="36:96">c</name></expr></argument>, <argument pos:start="36:99" pos:end="36:99"><expr pos:start="36:99" pos:end="36:99"><literal type="number" pos:start="36:99" pos:end="36:99">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while pos:start="37:3" pos:end="80:3">while <condition pos:start="37:9" pos:end="37:15">(<expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">l</name> <operator pos:start="37:12" pos:end="37:12">&lt;</operator> <name pos:start="37:14" pos:end="37:14">r</name></expr>)</condition>
  <block pos:start="38:3" pos:end="80:3">{<block_content pos:start="39:5" pos:end="79:5">
    <decl_stmt pos:start="39:5" pos:end="39:84"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:10">nx</name> <init pos:start="39:12" pos:end="39:19">= <expr pos:start="39:14" pos:end="39:19"><name pos:start="39:14" pos:end="39:17"><name pos:start="39:14" pos:end="39:14">q</name><index pos:start="39:15" pos:end="39:17">[<expr pos:start="39:16" pos:end="39:16"><name pos:start="39:16" pos:end="39:16">l</name></expr>]</index></name><operator pos:start="39:18" pos:end="39:18">.</operator><name pos:start="39:19" pos:end="39:19">x</name></expr></init></decl>, <decl pos:start="39:22" pos:end="39:32"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:22" pos:end="39:23">ny</name> <init pos:start="39:25" pos:end="39:32">= <expr pos:start="39:27" pos:end="39:32"><name pos:start="39:27" pos:end="39:30"><name pos:start="39:27" pos:end="39:27">q</name><index pos:start="39:28" pos:end="39:30">[<expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">l</name></expr>]</index></name><operator pos:start="39:31" pos:end="39:31">.</operator><name pos:start="39:32" pos:end="39:32">y</name></expr></init></decl>, <decl pos:start="39:35" pos:end="39:49"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:35" pos:end="39:36">ns</name> <init pos:start="39:38" pos:end="39:49">= <expr pos:start="39:40" pos:end="39:49"><name pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:40">q</name><index pos:start="39:41" pos:end="39:43">[<expr pos:start="39:42" pos:end="39:42"><name pos:start="39:42" pos:end="39:42">l</name></expr>]</index></name><operator pos:start="39:44" pos:end="39:44">.</operator><name pos:start="39:45" pos:end="39:49">score</name></expr></init></decl>, <decl pos:start="39:52" pos:end="39:65"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:52" pos:end="39:53">nf</name> <init pos:start="39:55" pos:end="39:65">= <expr pos:start="39:57" pos:end="39:65"><name pos:start="39:57" pos:end="39:60"><name pos:start="39:57" pos:end="39:57">q</name><index pos:start="39:58" pos:end="39:60">[<expr pos:start="39:59" pos:end="39:59"><name pos:start="39:59" pos:end="39:59">l</name></expr>]</index></name><operator pos:start="39:61" pos:end="39:61">.</operator><name pos:start="39:62" pos:end="39:65">from</name></expr></init></decl>, <decl pos:start="39:68" pos:end="39:83"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:68" pos:end="39:69">nm</name> <init pos:start="39:71" pos:end="39:83">= <expr pos:start="39:73" pos:end="39:83"><name pos:start="39:73" pos:end="39:83"><name pos:start="39:73" pos:end="39:75">map</name><index pos:start="39:76" pos:end="39:79">[<expr pos:start="39:77" pos:end="39:78"><name pos:start="39:77" pos:end="39:78">nx</name></expr>]</index><index pos:start="39:80" pos:end="39:83">[<expr pos:start="39:81" pos:end="39:82"><name pos:start="39:81" pos:end="39:82">ny</name></expr>]</index></name></expr></init></decl>;</decl_stmt><expr_stmt pos:start="39:85" pos:end="39:88"><expr pos:start="39:85" pos:end="39:87"><name pos:start="39:85" pos:end="39:85">l</name><operator pos:start="39:86" pos:end="39:87">++</operator></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="47:5"><if pos:start="40:5" pos:end="43:5">if <condition pos:start="40:8" pos:end="40:16">(<expr pos:start="40:9" pos:end="40:15"><name pos:start="40:9" pos:end="40:10">ns</name> <operator pos:start="40:12" pos:end="40:13">&lt;=</operator> <literal type="number" pos:start="40:15" pos:end="40:15">0</literal></expr>)</condition>
    <block pos:start="41:5" pos:end="43:5">{<block_content pos:start="42:7" pos:end="42:15">
      <continue pos:start="42:7" pos:end="42:15">continue;</continue>
    </block_content>}</block></if>
    <if type="elseif" pos:start="44:5" pos:end="47:5">else if <condition pos:start="44:13" pos:end="44:21">( <expr pos:start="44:15" pos:end="44:20"><name pos:start="44:15" pos:end="44:16">ns</name> <operator pos:start="44:18" pos:end="44:18">&gt;</operator> <name pos:start="44:20" pos:end="44:20">c</name></expr>)</condition>
    <block pos:start="45:5" pos:end="47:5">{<block_content pos:start="46:7" pos:end="46:13">
      <expr_stmt pos:start="46:7" pos:end="46:13"><expr pos:start="46:7" pos:end="46:12"><name pos:start="46:7" pos:end="46:8">ns</name> <operator pos:start="46:10" pos:end="46:10">=</operator> <name pos:start="46:12" pos:end="46:12">c</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="48:5" pos:end="79:5"><if pos:start="48:5" pos:end="51:5">if <condition pos:start="48:8" pos:end="48:27">(<expr pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:10">nx</name> <operator pos:start="48:12" pos:end="48:13">==</operator> <name pos:start="48:15" pos:end="48:15">x</name> <operator pos:start="48:17" pos:end="48:18">&amp;&amp;</operator> <name pos:start="48:20" pos:end="48:21">ny</name> <operator pos:start="48:23" pos:end="48:24">==</operator> <name pos:start="48:26" pos:end="48:26">y</name></expr>)</condition>
    <block pos:start="49:5" pos:end="51:5">{<block_content pos:start="50:7" pos:end="50:25">
      <expr_stmt pos:start="50:7" pos:end="50:25"><expr pos:start="50:7" pos:end="50:24"><name pos:start="50:7" pos:end="50:9">ans</name> <operator pos:start="50:11" pos:end="50:11">=</operator> <call pos:start="50:13" pos:end="50:24"><name pos:start="50:13" pos:end="50:15">max</name><argument_list pos:start="50:16" pos:end="50:24">(<argument pos:start="50:17" pos:end="50:19"><expr pos:start="50:17" pos:end="50:19"><name pos:start="50:17" pos:end="50:19">ans</name></expr></argument>, <argument pos:start="50:22" pos:end="50:23"><expr pos:start="50:22" pos:end="50:23"><name pos:start="50:22" pos:end="50:23">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="52:5" pos:end="58:5">else if <condition pos:start="52:13" pos:end="52:21">(<expr pos:start="52:14" pos:end="52:20"><name pos:start="52:14" pos:end="52:15">nf</name> <operator pos:start="52:17" pos:end="52:18">==</operator> <literal type="number" pos:start="52:20" pos:end="52:20">1</literal></expr>)</condition>
    <block pos:start="53:5" pos:end="58:5">{<block_content pos:start="54:7" pos:end="57:45">
      <if_stmt pos:start="54:7" pos:end="55:45"><if pos:start="54:7" pos:end="55:45">if <condition pos:start="54:10" pos:end="54:36">(<expr pos:start="54:11" pos:end="54:35"><literal type="number" pos:start="54:11" pos:end="54:11">0</literal> <operator pos:start="54:13" pos:end="54:13">&lt;</operator> <name pos:start="54:15" pos:end="54:16">nx</name> <operator pos:start="54:18" pos:end="54:18">+</operator> <literal type="number" pos:start="54:20" pos:end="54:20">1</literal> <operator pos:start="54:22" pos:end="54:23">&amp;&amp;</operator> <name pos:start="54:25" pos:end="54:26">nx</name> <operator pos:start="54:28" pos:end="54:28">+</operator> <literal type="number" pos:start="54:30" pos:end="54:30">1</literal> <operator pos:start="54:32" pos:end="54:33">&lt;=</operator> <name pos:start="54:35" pos:end="54:35">n</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:45"><block_content pos:start="55:9" pos:end="55:45">
        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:9">q</name><index pos:start="55:10" pos:end="55:14">[<expr pos:start="55:11" pos:end="55:13"><name pos:start="55:11" pos:end="55:11">r</name><operator pos:start="55:12" pos:end="55:13">++</operator></expr>]</index></name><operator pos:start="55:15" pos:end="55:15">.</operator><call pos:start="55:16" pos:end="55:44"><name pos:start="55:16" pos:end="55:19">init</name><argument_list pos:start="55:20" pos:end="55:44">(<argument pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:22">nx</name> <operator pos:start="55:24" pos:end="55:24">+</operator> <literal type="number" pos:start="55:26" pos:end="55:26">1</literal></expr></argument>, <argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><name pos:start="55:29" pos:end="55:30">ny</name></expr></argument>, <argument pos:start="55:33" pos:end="55:39"><expr pos:start="55:33" pos:end="55:39"><name pos:start="55:33" pos:end="55:34">ns</name> <operator pos:start="55:36" pos:end="55:36">+</operator> <name pos:start="55:38" pos:end="55:39">nm</name></expr></argument>, <argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><name pos:start="55:42" pos:end="55:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="56:7" pos:end="57:45"><if pos:start="56:7" pos:end="57:45">if <condition pos:start="56:10" pos:end="56:36">(<expr pos:start="56:11" pos:end="56:35"><literal type="number" pos:start="56:11" pos:end="56:11">0</literal> <operator pos:start="56:13" pos:end="56:13">&lt;</operator> <name pos:start="56:15" pos:end="56:16">ny</name> <operator pos:start="56:18" pos:end="56:18">+</operator> <literal type="number" pos:start="56:20" pos:end="56:20">1</literal> <operator pos:start="56:22" pos:end="56:23">&amp;&amp;</operator> <name pos:start="56:25" pos:end="56:26">ny</name> <operator pos:start="56:28" pos:end="56:28">+</operator> <literal type="number" pos:start="56:30" pos:end="56:30">1</literal> <operator pos:start="56:32" pos:end="56:33">&lt;=</operator> <name pos:start="56:35" pos:end="56:35">m</name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:45"><block_content pos:start="57:9" pos:end="57:45">
        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:9">q</name><index pos:start="57:10" pos:end="57:14">[<expr pos:start="57:11" pos:end="57:13"><name pos:start="57:11" pos:end="57:11">r</name><operator pos:start="57:12" pos:end="57:13">++</operator></expr>]</index></name><operator pos:start="57:15" pos:end="57:15">.</operator><call pos:start="57:16" pos:end="57:44"><name pos:start="57:16" pos:end="57:19">init</name><argument_list pos:start="57:20" pos:end="57:44">(<argument pos:start="57:21" pos:end="57:22"><expr pos:start="57:21" pos:end="57:22"><name pos:start="57:21" pos:end="57:22">nx</name></expr></argument>, <argument pos:start="57:25" pos:end="57:30"><expr pos:start="57:25" pos:end="57:30"><name pos:start="57:25" pos:end="57:26">ny</name> <operator pos:start="57:28" pos:end="57:28">+</operator> <literal type="number" pos:start="57:30" pos:end="57:30">1</literal></expr></argument>, <argument pos:start="57:33" pos:end="57:39"><expr pos:start="57:33" pos:end="57:39"><name pos:start="57:33" pos:end="57:34">ns</name> <operator pos:start="57:36" pos:end="57:36">+</operator> <name pos:start="57:38" pos:end="57:39">nm</name></expr></argument>, <argument pos:start="57:42" pos:end="57:43"><expr pos:start="57:42" pos:end="57:43"><name pos:start="57:42" pos:end="57:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="59:5" pos:end="65:5">else if <condition pos:start="59:13" pos:end="59:21">(<expr pos:start="59:14" pos:end="59:20"><name pos:start="59:14" pos:end="59:15">nf</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <literal type="number" pos:start="59:20" pos:end="59:20">2</literal></expr>)</condition>
    <block pos:start="60:5" pos:end="65:5">{<block_content pos:start="61:7" pos:end="64:45">
      <if_stmt pos:start="61:7" pos:end="62:45"><if pos:start="61:7" pos:end="62:45">if <condition pos:start="61:10" pos:end="61:36">(<expr pos:start="61:11" pos:end="61:35"><literal type="number" pos:start="61:11" pos:end="61:11">0</literal> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <name pos:start="61:15" pos:end="61:16">nx</name> <operator pos:start="61:18" pos:end="61:18">+</operator> <literal type="number" pos:start="61:20" pos:end="61:20">1</literal> <operator pos:start="61:22" pos:end="61:23">&amp;&amp;</operator> <name pos:start="61:25" pos:end="61:26">nx</name> <operator pos:start="61:28" pos:end="61:28">+</operator> <literal type="number" pos:start="61:30" pos:end="61:30">1</literal> <operator pos:start="61:32" pos:end="61:33">&lt;=</operator> <name pos:start="61:35" pos:end="61:35">n</name></expr>)</condition><block type="pseudo" pos:start="62:9" pos:end="62:45"><block_content pos:start="62:9" pos:end="62:45">
        <expr_stmt pos:start="62:9" pos:end="62:45"><expr pos:start="62:9" pos:end="62:44"><name pos:start="62:9" pos:end="62:14"><name pos:start="62:9" pos:end="62:9">q</name><index pos:start="62:10" pos:end="62:14">[<expr pos:start="62:11" pos:end="62:13"><name pos:start="62:11" pos:end="62:11">r</name><operator pos:start="62:12" pos:end="62:13">++</operator></expr>]</index></name><operator pos:start="62:15" pos:end="62:15">.</operator><call pos:start="62:16" pos:end="62:44"><name pos:start="62:16" pos:end="62:19">init</name><argument_list pos:start="62:20" pos:end="62:44">(<argument pos:start="62:21" pos:end="62:26"><expr pos:start="62:21" pos:end="62:26"><name pos:start="62:21" pos:end="62:22">nx</name> <operator pos:start="62:24" pos:end="62:24">+</operator> <literal type="number" pos:start="62:26" pos:end="62:26">1</literal></expr></argument>, <argument pos:start="62:29" pos:end="62:30"><expr pos:start="62:29" pos:end="62:30"><name pos:start="62:29" pos:end="62:30">ny</name></expr></argument>, <argument pos:start="62:33" pos:end="62:39"><expr pos:start="62:33" pos:end="62:39"><name pos:start="62:33" pos:end="62:34">ns</name> <operator pos:start="62:36" pos:end="62:36">+</operator> <name pos:start="62:38" pos:end="62:39">nm</name></expr></argument>, <argument pos:start="62:42" pos:end="62:43"><expr pos:start="62:42" pos:end="62:43"><name pos:start="62:42" pos:end="62:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="63:7" pos:end="64:45"><if pos:start="63:7" pos:end="64:45">if <condition pos:start="63:10" pos:end="63:36">(<expr pos:start="63:11" pos:end="63:35"><literal type="number" pos:start="63:11" pos:end="63:11">0</literal> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <name pos:start="63:15" pos:end="63:16">ny</name> <operator pos:start="63:18" pos:end="63:18">-</operator> <literal type="number" pos:start="63:20" pos:end="63:20">1</literal> <operator pos:start="63:22" pos:end="63:23">&amp;&amp;</operator> <name pos:start="63:25" pos:end="63:26">ny</name> <operator pos:start="63:28" pos:end="63:28">-</operator> <literal type="number" pos:start="63:30" pos:end="63:30">1</literal> <operator pos:start="63:32" pos:end="63:33">&lt;=</operator> <name pos:start="63:35" pos:end="63:35">m</name></expr>)</condition><block type="pseudo" pos:start="64:9" pos:end="64:45"><block_content pos:start="64:9" pos:end="64:45">
        <expr_stmt pos:start="64:9" pos:end="64:45"><expr pos:start="64:9" pos:end="64:44"><name pos:start="64:9" pos:end="64:14"><name pos:start="64:9" pos:end="64:9">q</name><index pos:start="64:10" pos:end="64:14">[<expr pos:start="64:11" pos:end="64:13"><name pos:start="64:11" pos:end="64:11">r</name><operator pos:start="64:12" pos:end="64:13">++</operator></expr>]</index></name><operator pos:start="64:15" pos:end="64:15">.</operator><call pos:start="64:16" pos:end="64:44"><name pos:start="64:16" pos:end="64:19">init</name><argument_list pos:start="64:20" pos:end="64:44">(<argument pos:start="64:21" pos:end="64:22"><expr pos:start="64:21" pos:end="64:22"><name pos:start="64:21" pos:end="64:22">nx</name></expr></argument>, <argument pos:start="64:25" pos:end="64:30"><expr pos:start="64:25" pos:end="64:30"><name pos:start="64:25" pos:end="64:26">ny</name> <operator pos:start="64:28" pos:end="64:28">-</operator> <literal type="number" pos:start="64:30" pos:end="64:30">1</literal></expr></argument>, <argument pos:start="64:33" pos:end="64:39"><expr pos:start="64:33" pos:end="64:39"><name pos:start="64:33" pos:end="64:34">ns</name> <operator pos:start="64:36" pos:end="64:36">+</operator> <name pos:start="64:38" pos:end="64:39">nm</name></expr></argument>, <argument pos:start="64:42" pos:end="64:43"><expr pos:start="64:42" pos:end="64:43"><name pos:start="64:42" pos:end="64:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="66:5" pos:end="72:5">else if <condition pos:start="66:13" pos:end="66:21">(<expr pos:start="66:14" pos:end="66:20"><name pos:start="66:14" pos:end="66:15">nf</name> <operator pos:start="66:17" pos:end="66:18">==</operator> <literal type="number" pos:start="66:20" pos:end="66:20">3</literal></expr>)</condition>
    <block pos:start="67:5" pos:end="72:5">{<block_content pos:start="68:7" pos:end="71:45">
      <if_stmt pos:start="68:7" pos:end="69:45"><if pos:start="68:7" pos:end="69:45">if <condition pos:start="68:10" pos:end="68:36">(<expr pos:start="68:11" pos:end="68:35"><literal type="number" pos:start="68:11" pos:end="68:11">0</literal> <operator pos:start="68:13" pos:end="68:13">&lt;</operator> <name pos:start="68:15" pos:end="68:16">nx</name> <operator pos:start="68:18" pos:end="68:18">-</operator> <literal type="number" pos:start="68:20" pos:end="68:20">1</literal> <operator pos:start="68:22" pos:end="68:23">&amp;&amp;</operator> <name pos:start="68:25" pos:end="68:26">nx</name> <operator pos:start="68:28" pos:end="68:28">-</operator> <literal type="number" pos:start="68:30" pos:end="68:30">1</literal> <operator pos:start="68:32" pos:end="68:33">&lt;=</operator> <name pos:start="68:35" pos:end="68:35">n</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:45"><block_content pos:start="69:9" pos:end="69:45">
        <expr_stmt pos:start="69:9" pos:end="69:45"><expr pos:start="69:9" pos:end="69:44"><name pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:9">q</name><index pos:start="69:10" pos:end="69:14">[<expr pos:start="69:11" pos:end="69:13"><name pos:start="69:11" pos:end="69:11">r</name><operator pos:start="69:12" pos:end="69:13">++</operator></expr>]</index></name><operator pos:start="69:15" pos:end="69:15">.</operator><call pos:start="69:16" pos:end="69:44"><name pos:start="69:16" pos:end="69:19">init</name><argument_list pos:start="69:20" pos:end="69:44">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:22">nx</name> <operator pos:start="69:24" pos:end="69:24">-</operator> <literal type="number" pos:start="69:26" pos:end="69:26">1</literal></expr></argument>, <argument pos:start="69:29" pos:end="69:30"><expr pos:start="69:29" pos:end="69:30"><name pos:start="69:29" pos:end="69:30">ny</name></expr></argument>, <argument pos:start="69:33" pos:end="69:39"><expr pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:34">ns</name> <operator pos:start="69:36" pos:end="69:36">+</operator> <name pos:start="69:38" pos:end="69:39">nm</name></expr></argument>, <argument pos:start="69:42" pos:end="69:43"><expr pos:start="69:42" pos:end="69:43"><name pos:start="69:42" pos:end="69:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="70:7" pos:end="71:45"><if pos:start="70:7" pos:end="71:45">if <condition pos:start="70:10" pos:end="70:36">(<expr pos:start="70:11" pos:end="70:35"><literal type="number" pos:start="70:11" pos:end="70:11">0</literal> <operator pos:start="70:13" pos:end="70:13">&lt;</operator> <name pos:start="70:15" pos:end="70:16">ny</name> <operator pos:start="70:18" pos:end="70:18">+</operator> <literal type="number" pos:start="70:20" pos:end="70:20">1</literal> <operator pos:start="70:22" pos:end="70:23">&amp;&amp;</operator> <name pos:start="70:25" pos:end="70:26">ny</name> <operator pos:start="70:28" pos:end="70:28">+</operator> <literal type="number" pos:start="70:30" pos:end="70:30">1</literal> <operator pos:start="70:32" pos:end="70:33">&lt;=</operator> <name pos:start="70:35" pos:end="70:35">m</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:45"><block_content pos:start="71:9" pos:end="71:45">
        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:9">q</name><index pos:start="71:10" pos:end="71:14">[<expr pos:start="71:11" pos:end="71:13"><name pos:start="71:11" pos:end="71:11">r</name><operator pos:start="71:12" pos:end="71:13">++</operator></expr>]</index></name><operator pos:start="71:15" pos:end="71:15">.</operator><call pos:start="71:16" pos:end="71:44"><name pos:start="71:16" pos:end="71:19">init</name><argument_list pos:start="71:20" pos:end="71:44">(<argument pos:start="71:21" pos:end="71:22"><expr pos:start="71:21" pos:end="71:22"><name pos:start="71:21" pos:end="71:22">nx</name></expr></argument>, <argument pos:start="71:25" pos:end="71:30"><expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:26">ny</name> <operator pos:start="71:28" pos:end="71:28">+</operator> <literal type="number" pos:start="71:30" pos:end="71:30">1</literal></expr></argument>, <argument pos:start="71:33" pos:end="71:39"><expr pos:start="71:33" pos:end="71:39"><name pos:start="71:33" pos:end="71:34">ns</name> <operator pos:start="71:36" pos:end="71:36">+</operator> <name pos:start="71:38" pos:end="71:39">nm</name></expr></argument>, <argument pos:start="71:42" pos:end="71:43"><expr pos:start="71:42" pos:end="71:43"><name pos:start="71:42" pos:end="71:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else pos:start="73:5" pos:end="79:5">else
    <block pos:start="74:5" pos:end="79:5">{<block_content pos:start="75:7" pos:end="78:45">
      <if_stmt pos:start="75:7" pos:end="76:45"><if pos:start="75:7" pos:end="76:45">if <condition pos:start="75:10" pos:end="75:36">(<expr pos:start="75:11" pos:end="75:35"><literal type="number" pos:start="75:11" pos:end="75:11">0</literal> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <name pos:start="75:15" pos:end="75:16">nx</name> <operator pos:start="75:18" pos:end="75:18">-</operator> <literal type="number" pos:start="75:20" pos:end="75:20">1</literal> <operator pos:start="75:22" pos:end="75:23">&amp;&amp;</operator> <name pos:start="75:25" pos:end="75:26">nx</name> <operator pos:start="75:28" pos:end="75:28">-</operator> <literal type="number" pos:start="75:30" pos:end="75:30">1</literal> <operator pos:start="75:32" pos:end="75:33">&lt;=</operator> <name pos:start="75:35" pos:end="75:35">n</name></expr>)</condition><block type="pseudo" pos:start="76:9" pos:end="76:45"><block_content pos:start="76:9" pos:end="76:45">
        <expr_stmt pos:start="76:9" pos:end="76:45"><expr pos:start="76:9" pos:end="76:44"><name pos:start="76:9" pos:end="76:14"><name pos:start="76:9" pos:end="76:9">q</name><index pos:start="76:10" pos:end="76:14">[<expr pos:start="76:11" pos:end="76:13"><name pos:start="76:11" pos:end="76:11">r</name><operator pos:start="76:12" pos:end="76:13">++</operator></expr>]</index></name><operator pos:start="76:15" pos:end="76:15">.</operator><call pos:start="76:16" pos:end="76:44"><name pos:start="76:16" pos:end="76:19">init</name><argument_list pos:start="76:20" pos:end="76:44">(<argument pos:start="76:21" pos:end="76:26"><expr pos:start="76:21" pos:end="76:26"><name pos:start="76:21" pos:end="76:22">nx</name> <operator pos:start="76:24" pos:end="76:24">-</operator> <literal type="number" pos:start="76:26" pos:end="76:26">1</literal></expr></argument>, <argument pos:start="76:29" pos:end="76:30"><expr pos:start="76:29" pos:end="76:30"><name pos:start="76:29" pos:end="76:30">ny</name></expr></argument>, <argument pos:start="76:33" pos:end="76:39"><expr pos:start="76:33" pos:end="76:39"><name pos:start="76:33" pos:end="76:34">ns</name> <operator pos:start="76:36" pos:end="76:36">+</operator> <name pos:start="76:38" pos:end="76:39">nm</name></expr></argument>, <argument pos:start="76:42" pos:end="76:43"><expr pos:start="76:42" pos:end="76:43"><name pos:start="76:42" pos:end="76:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="77:7" pos:end="78:45"><if pos:start="77:7" pos:end="78:45">if <condition pos:start="77:10" pos:end="77:36">(<expr pos:start="77:11" pos:end="77:35"><literal type="number" pos:start="77:11" pos:end="77:11">0</literal> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <name pos:start="77:15" pos:end="77:16">ny</name> <operator pos:start="77:18" pos:end="77:18">-</operator> <literal type="number" pos:start="77:20" pos:end="77:20">1</literal> <operator pos:start="77:22" pos:end="77:23">&amp;&amp;</operator> <name pos:start="77:25" pos:end="77:26">ny</name> <operator pos:start="77:28" pos:end="77:28">-</operator> <literal type="number" pos:start="77:30" pos:end="77:30">1</literal> <operator pos:start="77:32" pos:end="77:33">&lt;=</operator> <name pos:start="77:35" pos:end="77:35">n</name></expr>)</condition><block type="pseudo" pos:start="78:9" pos:end="78:45"><block_content pos:start="78:9" pos:end="78:45">
        <expr_stmt pos:start="78:9" pos:end="78:45"><expr pos:start="78:9" pos:end="78:44"><name pos:start="78:9" pos:end="78:14"><name pos:start="78:9" pos:end="78:9">q</name><index pos:start="78:10" pos:end="78:14">[<expr pos:start="78:11" pos:end="78:13"><name pos:start="78:11" pos:end="78:11">r</name><operator pos:start="78:12" pos:end="78:13">++</operator></expr>]</index></name><operator pos:start="78:15" pos:end="78:15">.</operator><call pos:start="78:16" pos:end="78:44"><name pos:start="78:16" pos:end="78:19">init</name><argument_list pos:start="78:20" pos:end="78:44">(<argument pos:start="78:21" pos:end="78:22"><expr pos:start="78:21" pos:end="78:22"><name pos:start="78:21" pos:end="78:22">nx</name></expr></argument>, <argument pos:start="78:25" pos:end="78:30"><expr pos:start="78:25" pos:end="78:30"><name pos:start="78:25" pos:end="78:26">ny</name> <operator pos:start="78:28" pos:end="78:28">-</operator> <literal type="number" pos:start="78:30" pos:end="78:30">1</literal></expr></argument>, <argument pos:start="78:33" pos:end="78:39"><expr pos:start="78:33" pos:end="78:39"><name pos:start="78:33" pos:end="78:34">ns</name> <operator pos:start="78:36" pos:end="78:36">+</operator> <name pos:start="78:38" pos:end="78:39">nm</name></expr></argument>, <argument pos:start="78:42" pos:end="78:43"><expr pos:start="78:42" pos:end="78:43"><name pos:start="78:42" pos:end="78:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  
  <expr_stmt pos:start="82:3" pos:end="82:22"><expr pos:start="82:3" pos:end="82:21"><call pos:start="82:3" pos:end="82:21"><name pos:start="82:3" pos:end="82:8">printf</name><argument_list pos:start="82:9" pos:end="82:21">(<argument pos:start="82:10" pos:end="82:15"><expr pos:start="82:10" pos:end="82:15"><literal type="string" pos:start="82:10" pos:end="82:15">"%d\n"</literal></expr></argument>, <argument pos:start="82:18" pos:end="82:20"><expr pos:start="82:18" pos:end="82:20"><name pos:start="82:18" pos:end="82:20">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return pos:start="83:3" pos:end="83:11">return <expr pos:start="83:10" pos:end="83:10"><literal type="number" pos:start="83:10" pos:end="83:10">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
