<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/78/78.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<function pos:start="3:1" pos:end="77:1"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:8">main</name><parameter_list pos:start="3:9" pos:end="3:10">()</parameter_list>
<block pos:start="4:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="76:13">
    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">n</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:11"><expr pos:start="6:5" pos:end="6:10"><name pos:start="6:5" pos:end="6:7">cin</name><operator pos:start="6:8" pos:end="6:9">&gt;&gt;</operator><name pos:start="6:10" pos:end="6:10">n</name></expr>;</expr_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:9">stack</name><argument_list type="generic" pos:start="7:10" pos:end="7:14">&lt;<argument pos:start="7:11" pos:end="7:13"><expr pos:start="7:11" pos:end="7:13"><name pos:start="7:11" pos:end="7:13">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="7:16" pos:end="7:16">a</name></decl>,<decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:14"/><name pos:start="7:18" pos:end="7:18">b</name></decl>;</decl_stmt>
    <while pos:start="8:5" pos:end="56:5">while<condition pos:start="8:10" pos:end="8:14">(<expr pos:start="8:11" pos:end="8:13"><name pos:start="8:11" pos:end="8:11">n</name><operator pos:start="8:12" pos:end="8:13">--</operator></expr>)</condition><block pos:start="8:15" pos:end="56:5">{<block_content pos:start="9:9" pos:end="55:9">
        <decl_stmt pos:start="9:9" pos:end="9:17"><decl pos:start="9:9" pos:end="9:16"><type pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:14">string</name></type> <name pos:start="9:16" pos:end="9:16">s</name></decl>;</decl_stmt>
        <expr_stmt pos:start="10:9" pos:end="10:15"><expr pos:start="10:9" pos:end="10:14"><name pos:start="10:9" pos:end="10:11">cin</name><operator pos:start="10:12" pos:end="10:13">&gt;&gt;</operator><name pos:start="10:14" pos:end="10:14">s</name></expr>;</expr_stmt>
        <if_stmt pos:start="11:9" pos:end="55:9"><if pos:start="11:9" pos:end="31:9">if<condition pos:start="11:11" pos:end="11:18">(<expr pos:start="11:12" pos:end="11:17"><name pos:start="11:12" pos:end="11:12">s</name><operator pos:start="11:13" pos:end="11:14">==</operator><literal type="char" pos:start="11:15" pos:end="11:17">'A'</literal></expr>)</condition><block pos:start="11:19" pos:end="31:9">{<block_content pos:start="12:13" pos:end="30:13">
            <decl_stmt pos:start="12:13" pos:end="12:21"><decl pos:start="12:13" pos:end="12:20"><type pos:start="12:13" pos:end="12:18"><name pos:start="12:13" pos:end="12:18">string</name></type> <name pos:start="12:20" pos:end="12:20">x</name></decl>;</decl_stmt>
            <expr_stmt pos:start="13:13" pos:end="13:19"><expr pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:15">cin</name><operator pos:start="13:16" pos:end="13:17">&gt;&gt;</operator><name pos:start="13:18" pos:end="13:18">x</name></expr>;</expr_stmt>
            <if_stmt pos:start="14:13" pos:end="30:13"><if pos:start="14:13" pos:end="18:13">if<condition pos:start="14:15" pos:end="14:22">(<expr pos:start="14:16" pos:end="14:21"><name pos:start="14:16" pos:end="14:16">x</name><operator pos:start="14:17" pos:end="14:18">==</operator><literal type="char" pos:start="14:19" pos:end="14:21">'I'</literal></expr>)</condition><block pos:start="14:23" pos:end="18:13">{<block_content pos:start="15:17" pos:end="17:29">
                <decl_stmt pos:start="15:17" pos:end="15:25"><decl pos:start="15:17" pos:end="15:24"><type pos:start="15:17" pos:end="15:19"><name pos:start="15:17" pos:end="15:19">int</name></type> <name pos:start="15:21" pos:end="15:24">data</name></decl>;</decl_stmt>
                <expr_stmt pos:start="16:17" pos:end="16:26"><expr pos:start="16:17" pos:end="16:25"><name pos:start="16:17" pos:end="16:19">cin</name><operator pos:start="16:20" pos:end="16:21">&gt;&gt;</operator><name pos:start="16:22" pos:end="16:25">data</name></expr>;</expr_stmt>
                <expr_stmt pos:start="17:17" pos:end="17:29"><expr pos:start="17:17" pos:end="17:28"><call pos:start="17:17" pos:end="17:28"><name pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:17">a</name><operator pos:start="17:18" pos:end="17:18">.</operator><name pos:start="17:19" pos:end="17:22">push</name></name><argument_list pos:start="17:23" pos:end="17:28">(<argument pos:start="17:24" pos:end="17:27"><expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><if type="elseif" pos:start="18:14" pos:end="22:13">else if<condition pos:start="18:21" pos:end="18:28">(<expr pos:start="18:22" pos:end="18:27"><name pos:start="18:22" pos:end="18:22">x</name><operator pos:start="18:23" pos:end="18:24">==</operator><literal type="char" pos:start="18:25" pos:end="18:27">'D'</literal></expr>)</condition><block pos:start="18:29" pos:end="22:13">{<block_content pos:start="19:17" pos:end="21:17">
                <if_stmt pos:start="19:17" pos:end="21:17"><if pos:start="19:17" pos:end="21:17">if<condition pos:start="19:19" pos:end="19:30">(<expr pos:start="19:20" pos:end="19:29"><operator pos:start="19:20" pos:end="19:20">!</operator><call pos:start="19:21" pos:end="19:29"><name pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:21">a</name><operator pos:start="19:22" pos:end="19:22">.</operator><name pos:start="19:23" pos:end="19:27">empty</name></name><argument_list pos:start="19:28" pos:end="19:29">()</argument_list></call></expr>)</condition><block pos:start="19:31" pos:end="21:17">{<block_content pos:start="20:21" pos:end="20:28">
                    <expr_stmt pos:start="20:21" pos:end="20:28"><expr pos:start="20:21" pos:end="20:27"><call pos:start="20:21" pos:end="20:27"><name pos:start="20:21" pos:end="20:25"><name pos:start="20:21" pos:end="20:21">a</name><operator pos:start="20:22" pos:end="20:22">.</operator><name pos:start="20:23" pos:end="20:25">pop</name></name><argument_list pos:start="20:26" pos:end="20:27">()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if><else pos:start="22:14" pos:end="30:13">else<block pos:start="22:18" pos:end="30:13">{<block_content pos:start="23:17" pos:end="29:17">
                <decl_stmt pos:start="23:17" pos:end="23:29"><decl pos:start="23:17" pos:end="23:28"><type pos:start="23:17" pos:end="23:26"><name pos:start="23:17" pos:end="23:26"><name pos:start="23:17" pos:end="23:21">stack</name><argument_list type="generic" pos:start="23:22" pos:end="23:26">&lt;<argument pos:start="23:23" pos:end="23:25"><expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="23:28" pos:end="23:28">c</name></decl>;</decl_stmt>
                <while pos:start="24:17" pos:end="26:17">while<condition pos:start="24:22" pos:end="24:33">(<expr pos:start="24:23" pos:end="24:32"><operator pos:start="24:23" pos:end="24:23">!</operator><call pos:start="24:24" pos:end="24:32"><name pos:start="24:24" pos:end="24:30"><name pos:start="24:24" pos:end="24:24">b</name><operator pos:start="24:25" pos:end="24:25">.</operator><name pos:start="24:26" pos:end="24:30">empty</name></name><argument_list pos:start="24:31" pos:end="24:32">()</argument_list></call></expr>)</condition><block pos:start="24:34" pos:end="26:17">{<block_content pos:start="25:21" pos:end="25:36">
                    <expr_stmt pos:start="25:21" pos:end="25:36"><expr pos:start="25:21" pos:end="25:35"><call pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:21">c</name><operator pos:start="25:22" pos:end="25:22">.</operator><name pos:start="25:23" pos:end="25:26">push</name></name><argument_list pos:start="25:27" pos:end="25:35">(<argument pos:start="25:28" pos:end="25:34"><expr pos:start="25:28" pos:end="25:34"><call pos:start="25:28" pos:end="25:34"><name pos:start="25:28" pos:end="25:32"><name pos:start="25:28" pos:end="25:28">b</name><operator pos:start="25:29" pos:end="25:29">.</operator><name pos:start="25:30" pos:end="25:32">top</name></name><argument_list pos:start="25:33" pos:end="25:34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <while pos:start="27:17" pos:end="29:17">while<condition pos:start="27:22" pos:end="27:33">(<expr pos:start="27:23" pos:end="27:32"><operator pos:start="27:23" pos:end="27:23">!</operator><call pos:start="27:24" pos:end="27:32"><name pos:start="27:24" pos:end="27:30"><name pos:start="27:24" pos:end="27:24">c</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:30">empty</name></name><argument_list pos:start="27:31" pos:end="27:32">()</argument_list></call></expr>)</condition><block pos:start="27:34" pos:end="29:17">{<block_content pos:start="28:21" pos:end="28:36">
                    <expr_stmt pos:start="28:21" pos:end="28:36"><expr pos:start="28:21" pos:end="28:35"><call pos:start="28:21" pos:end="28:35"><name pos:start="28:21" pos:end="28:26"><name pos:start="28:21" pos:end="28:21">a</name><operator pos:start="28:22" pos:end="28:22">.</operator><name pos:start="28:23" pos:end="28:26">push</name></name><argument_list pos:start="28:27" pos:end="28:35">(<argument pos:start="28:28" pos:end="28:34"><expr pos:start="28:28" pos:end="28:34"><call pos:start="28:28" pos:end="28:34"><name pos:start="28:28" pos:end="28:32"><name pos:start="28:28" pos:end="28:28">c</name><operator pos:start="28:29" pos:end="28:29">.</operator><name pos:start="28:30" pos:end="28:32">top</name></name><argument_list pos:start="28:33" pos:end="28:34">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if><else pos:start="31:10" pos:end="55:9">else<block pos:start="31:14" pos:end="55:9">{<block_content pos:start="32:13" pos:end="54:13">
            <decl_stmt pos:start="32:13" pos:end="32:21"><decl pos:start="32:13" pos:end="32:20"><type pos:start="32:13" pos:end="32:18"><name pos:start="32:13" pos:end="32:18">string</name></type> <name pos:start="32:20" pos:end="32:20">s</name></decl>;</decl_stmt>
            <expr_stmt pos:start="33:13" pos:end="33:19"><expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:15">cin</name><operator pos:start="33:16" pos:end="33:17">&gt;&gt;</operator><name pos:start="33:18" pos:end="33:18">s</name></expr>;</expr_stmt>
            <if_stmt pos:start="34:13" pos:end="54:13"><if pos:start="34:13" pos:end="54:13">if<condition pos:start="34:15" pos:end="34:22">(<expr pos:start="34:16" pos:end="34:21"><name pos:start="34:16" pos:end="34:16">s</name><operator pos:start="34:17" pos:end="34:18">==</operator><literal type="char" pos:start="34:19" pos:end="34:21">'A'</literal></expr>)</condition><block pos:start="34:23" pos:end="54:13">{<block_content pos:start="35:17" pos:end="53:17">
                <decl_stmt pos:start="35:17" pos:end="35:25"><decl pos:start="35:17" pos:end="35:24"><type pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">string</name></type> <name pos:start="35:24" pos:end="35:24">x</name></decl>;</decl_stmt>
                <expr_stmt pos:start="36:17" pos:end="36:23"><expr pos:start="36:17" pos:end="36:22"><name pos:start="36:17" pos:end="36:19">cin</name><operator pos:start="36:20" pos:end="36:21">&gt;&gt;</operator><name pos:start="36:22" pos:end="36:22">x</name></expr>;</expr_stmt>
                <if_stmt pos:start="37:17" pos:end="53:17"><if pos:start="37:17" pos:end="41:17">if<condition pos:start="37:19" pos:end="37:26">(<expr pos:start="37:20" pos:end="37:25"><name pos:start="37:20" pos:end="37:20">x</name><operator pos:start="37:21" pos:end="37:22">==</operator><literal type="char" pos:start="37:23" pos:end="37:25">'I'</literal></expr>)</condition><block pos:start="37:27" pos:end="41:17">{<block_content pos:start="38:21" pos:end="40:33">
                    <decl_stmt pos:start="38:21" pos:end="38:29"><decl pos:start="38:21" pos:end="38:28"><type pos:start="38:21" pos:end="38:23"><name pos:start="38:21" pos:end="38:23">int</name></type> <name pos:start="38:25" pos:end="38:28">data</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="39:21" pos:end="39:30"><expr pos:start="39:21" pos:end="39:29"><name pos:start="39:21" pos:end="39:23">cin</name><operator pos:start="39:24" pos:end="39:25">&gt;&gt;</operator><name pos:start="39:26" pos:end="39:29">data</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="40:21" pos:end="40:33"><expr pos:start="40:21" pos:end="40:32"><call pos:start="40:21" pos:end="40:32"><name pos:start="40:21" pos:end="40:26"><name pos:start="40:21" pos:end="40:21">b</name><operator pos:start="40:22" pos:end="40:22">.</operator><name pos:start="40:23" pos:end="40:26">push</name></name><argument_list pos:start="40:27" pos:end="40:32">(<argument pos:start="40:28" pos:end="40:31"><expr pos:start="40:28" pos:end="40:31"><name pos:start="40:28" pos:end="40:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if><if type="elseif" pos:start="41:18" pos:end="45:17">else if<condition pos:start="41:25" pos:end="41:32">(<expr pos:start="41:26" pos:end="41:31"><name pos:start="41:26" pos:end="41:26">x</name><operator pos:start="41:27" pos:end="41:28">==</operator><literal type="char" pos:start="41:29" pos:end="41:31">'D'</literal></expr>)</condition><block pos:start="41:33" pos:end="45:17">{<block_content pos:start="42:20" pos:end="44:20">
                   <if_stmt pos:start="42:20" pos:end="44:20"><if pos:start="42:20" pos:end="44:20">if<condition pos:start="42:22" pos:end="42:33">(<expr pos:start="42:23" pos:end="42:32"><operator pos:start="42:23" pos:end="42:23">!</operator><call pos:start="42:24" pos:end="42:32"><name pos:start="42:24" pos:end="42:30"><name pos:start="42:24" pos:end="42:24">b</name><operator pos:start="42:25" pos:end="42:25">.</operator><name pos:start="42:26" pos:end="42:30">empty</name></name><argument_list pos:start="42:31" pos:end="42:32">()</argument_list></call></expr>)</condition><block pos:start="42:34" pos:end="44:20">{<block_content pos:start="43:25" pos:end="43:32">
                        <expr_stmt pos:start="43:25" pos:end="43:32"><expr pos:start="43:25" pos:end="43:31"><call pos:start="43:25" pos:end="43:31"><name pos:start="43:25" pos:end="43:29"><name pos:start="43:25" pos:end="43:25">b</name><operator pos:start="43:26" pos:end="43:26">.</operator><name pos:start="43:27" pos:end="43:29">pop</name></name><argument_list pos:start="43:30" pos:end="43:31">()</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if></if_stmt>
                </block_content>}</block></if><else pos:start="45:18" pos:end="53:17">else<block pos:start="45:22" pos:end="53:17">{<block_content pos:start="46:21" pos:end="52:21">
                    <decl_stmt pos:start="46:21" pos:end="46:33"><decl pos:start="46:21" pos:end="46:32"><type pos:start="46:21" pos:end="46:30"><name pos:start="46:21" pos:end="46:30"><name pos:start="46:21" pos:end="46:25">stack</name><argument_list type="generic" pos:start="46:26" pos:end="46:30">&lt;<argument pos:start="46:27" pos:end="46:29"><expr pos:start="46:27" pos:end="46:29"><name pos:start="46:27" pos:end="46:29">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="46:32" pos:end="46:32">c</name></decl>;</decl_stmt>
                    <while pos:start="47:21" pos:end="49:21">while<condition pos:start="47:26" pos:end="47:37">(<expr pos:start="47:27" pos:end="47:36"><operator pos:start="47:27" pos:end="47:27">!</operator><call pos:start="47:28" pos:end="47:36"><name pos:start="47:28" pos:end="47:34"><name pos:start="47:28" pos:end="47:28">a</name><operator pos:start="47:29" pos:end="47:29">.</operator><name pos:start="47:30" pos:end="47:34">empty</name></name><argument_list pos:start="47:35" pos:end="47:36">()</argument_list></call></expr>)</condition><block pos:start="47:38" pos:end="49:21">{<block_content pos:start="48:25" pos:end="48:40">
                        <expr_stmt pos:start="48:25" pos:end="48:40"><expr pos:start="48:25" pos:end="48:39"><call pos:start="48:25" pos:end="48:39"><name pos:start="48:25" pos:end="48:30"><name pos:start="48:25" pos:end="48:25">c</name><operator pos:start="48:26" pos:end="48:26">.</operator><name pos:start="48:27" pos:end="48:30">push</name></name><argument_list pos:start="48:31" pos:end="48:39">(<argument pos:start="48:32" pos:end="48:38"><expr pos:start="48:32" pos:end="48:38"><call pos:start="48:32" pos:end="48:38"><name pos:start="48:32" pos:end="48:36"><name pos:start="48:32" pos:end="48:32">a</name><operator pos:start="48:33" pos:end="48:33">.</operator><name pos:start="48:34" pos:end="48:36">top</name></name><argument_list pos:start="48:37" pos:end="48:38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <while pos:start="50:21" pos:end="52:21">while<condition pos:start="50:26" pos:end="50:37">(<expr pos:start="50:27" pos:end="50:36"><operator pos:start="50:27" pos:end="50:27">!</operator><call pos:start="50:28" pos:end="50:36"><name pos:start="50:28" pos:end="50:34"><name pos:start="50:28" pos:end="50:28">c</name><operator pos:start="50:29" pos:end="50:29">.</operator><name pos:start="50:30" pos:end="50:34">empty</name></name><argument_list pos:start="50:35" pos:end="50:36">()</argument_list></call></expr>)</condition><block pos:start="50:38" pos:end="52:21">{<block_content pos:start="51:25" pos:end="51:40">
                        <expr_stmt pos:start="51:25" pos:end="51:40"><expr pos:start="51:25" pos:end="51:39"><call pos:start="51:25" pos:end="51:39"><name pos:start="51:25" pos:end="51:30"><name pos:start="51:25" pos:end="51:25">b</name><operator pos:start="51:26" pos:end="51:26">.</operator><name pos:start="51:27" pos:end="51:30">push</name></name><argument_list pos:start="51:31" pos:end="51:39">(<argument pos:start="51:32" pos:end="51:38"><expr pos:start="51:32" pos:end="51:38"><call pos:start="51:32" pos:end="51:38"><name pos:start="51:32" pos:end="51:36"><name pos:start="51:32" pos:end="51:32">c</name><operator pos:start="51:33" pos:end="51:33">.</operator><name pos:start="51:34" pos:end="51:36">top</name></name><argument_list pos:start="51:37" pos:end="51:38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <decl_stmt pos:start="57:5" pos:end="57:17"><decl pos:start="57:5" pos:end="57:16"><type pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:9">stack</name><argument_list type="generic" pos:start="57:10" pos:end="57:14">&lt;<argument pos:start="57:11" pos:end="57:13"><expr pos:start="57:11" pos:end="57:13"><name pos:start="57:11" pos:end="57:13">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="57:16" pos:end="57:16">c</name></decl>;</decl_stmt>
    <while pos:start="58:5" pos:end="61:5">while<condition pos:start="58:10" pos:end="58:21">(<expr pos:start="58:11" pos:end="58:20"><operator pos:start="58:11" pos:end="58:11">!</operator><call pos:start="58:12" pos:end="58:20"><name pos:start="58:12" pos:end="58:18"><name pos:start="58:12" pos:end="58:12">a</name><operator pos:start="58:13" pos:end="58:13">.</operator><name pos:start="58:14" pos:end="58:18">empty</name></name><argument_list pos:start="58:19" pos:end="58:20">()</argument_list></call></expr>)</condition><block pos:start="58:22" pos:end="61:5">{<block_content pos:start="59:9" pos:end="60:16">
        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><call pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:9">c</name><operator pos:start="59:10" pos:end="59:10">.</operator><name pos:start="59:11" pos:end="59:14">push</name></name><argument_list pos:start="59:15" pos:end="59:23">(<argument pos:start="59:16" pos:end="59:22"><expr pos:start="59:16" pos:end="59:22"><call pos:start="59:16" pos:end="59:22"><name pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:16">a</name><operator pos:start="59:17" pos:end="59:17">.</operator><name pos:start="59:18" pos:end="59:20">top</name></name><argument_list pos:start="59:21" pos:end="59:22">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:16"><expr pos:start="60:9" pos:end="60:15"><call pos:start="60:9" pos:end="60:15"><name pos:start="60:9" pos:end="60:13"><name pos:start="60:9" pos:end="60:9">a</name><operator pos:start="60:10" pos:end="60:10">.</operator><name pos:start="60:11" pos:end="60:13">pop</name></name><argument_list pos:start="60:14" pos:end="60:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while pos:start="62:5" pos:end="65:5">while<condition pos:start="62:10" pos:end="62:21">(<expr pos:start="62:11" pos:end="62:20"><operator pos:start="62:11" pos:end="62:11">!</operator><call pos:start="62:12" pos:end="62:20"><name pos:start="62:12" pos:end="62:18"><name pos:start="62:12" pos:end="62:12">c</name><operator pos:start="62:13" pos:end="62:13">.</operator><name pos:start="62:14" pos:end="62:18">empty</name></name><argument_list pos:start="62:19" pos:end="62:20">()</argument_list></call></expr>)</condition><block pos:start="62:22" pos:end="65:5">{<block_content pos:start="63:9" pos:end="64:16">
        <expr_stmt pos:start="63:9" pos:end="63:27"><expr pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:12">cout</name><operator pos:start="63:13" pos:end="63:14">&lt;&lt;</operator><call pos:start="63:15" pos:end="63:21"><name pos:start="63:15" pos:end="63:19"><name pos:start="63:15" pos:end="63:15">c</name><operator pos:start="63:16" pos:end="63:16">.</operator><name pos:start="63:17" pos:end="63:19">top</name></name><argument_list pos:start="63:20" pos:end="63:21">()</argument_list></call><operator pos:start="63:22" pos:end="63:23">&lt;&lt;</operator><literal type="string" pos:start="63:24" pos:end="63:26">" "</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="64:9" pos:end="64:16"><expr pos:start="64:9" pos:end="64:15"><call pos:start="64:9" pos:end="64:15"><name pos:start="64:9" pos:end="64:13"><name pos:start="64:9" pos:end="64:9">c</name><operator pos:start="64:10" pos:end="64:10">.</operator><name pos:start="64:11" pos:end="64:13">pop</name></name><argument_list pos:start="64:14" pos:end="64:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="66:5" pos:end="66:15"><expr pos:start="66:5" pos:end="66:14"><name pos:start="66:5" pos:end="66:8">cout</name><operator pos:start="66:9" pos:end="66:10">&lt;&lt;</operator><name pos:start="66:11" pos:end="66:14">endl</name></expr>;</expr_stmt>
    <while pos:start="67:5" pos:end="70:5">while<condition pos:start="67:10" pos:end="67:21">(<expr pos:start="67:11" pos:end="67:20"><operator pos:start="67:11" pos:end="67:11">!</operator><call pos:start="67:12" pos:end="67:20"><name pos:start="67:12" pos:end="67:18"><name pos:start="67:12" pos:end="67:12">b</name><operator pos:start="67:13" pos:end="67:13">.</operator><name pos:start="67:14" pos:end="67:18">empty</name></name><argument_list pos:start="67:19" pos:end="67:20">()</argument_list></call></expr>)</condition><block pos:start="67:22" pos:end="70:5">{<block_content pos:start="68:9" pos:end="69:16">
        <expr_stmt pos:start="68:9" pos:end="68:24"><expr pos:start="68:9" pos:end="68:23"><call pos:start="68:9" pos:end="68:23"><name pos:start="68:9" pos:end="68:14"><name pos:start="68:9" pos:end="68:9">c</name><operator pos:start="68:10" pos:end="68:10">.</operator><name pos:start="68:11" pos:end="68:14">push</name></name><argument_list pos:start="68:15" pos:end="68:23">(<argument pos:start="68:16" pos:end="68:22"><expr pos:start="68:16" pos:end="68:22"><call pos:start="68:16" pos:end="68:22"><name pos:start="68:16" pos:end="68:20"><name pos:start="68:16" pos:end="68:16">b</name><operator pos:start="68:17" pos:end="68:17">.</operator><name pos:start="68:18" pos:end="68:20">top</name></name><argument_list pos:start="68:21" pos:end="68:22">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><call pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">b</name><operator pos:start="69:10" pos:end="69:10">.</operator><name pos:start="69:11" pos:end="69:13">pop</name></name><argument_list pos:start="69:14" pos:end="69:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while pos:start="71:5" pos:end="74:5">while<condition pos:start="71:10" pos:end="71:21">(<expr pos:start="71:11" pos:end="71:20"><operator pos:start="71:11" pos:end="71:11">!</operator><call pos:start="71:12" pos:end="71:20"><name pos:start="71:12" pos:end="71:18"><name pos:start="71:12" pos:end="71:12">c</name><operator pos:start="71:13" pos:end="71:13">.</operator><name pos:start="71:14" pos:end="71:18">empty</name></name><argument_list pos:start="71:19" pos:end="71:20">()</argument_list></call></expr>)</condition><block pos:start="71:22" pos:end="74:5">{<block_content pos:start="72:9" pos:end="73:16">
        <expr_stmt pos:start="72:9" pos:end="72:27"><expr pos:start="72:9" pos:end="72:26"><name pos:start="72:9" pos:end="72:12">cout</name><operator pos:start="72:13" pos:end="72:14">&lt;&lt;</operator><call pos:start="72:15" pos:end="72:21"><name pos:start="72:15" pos:end="72:19"><name pos:start="72:15" pos:end="72:15">c</name><operator pos:start="72:16" pos:end="72:16">.</operator><name pos:start="72:17" pos:end="72:19">top</name></name><argument_list pos:start="72:20" pos:end="72:21">()</argument_list></call><operator pos:start="72:22" pos:end="72:23">&lt;&lt;</operator><literal type="string" pos:start="72:24" pos:end="72:26">" "</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="73:9" pos:end="73:16"><expr pos:start="73:9" pos:end="73:15"><call pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:9">c</name><operator pos:start="73:10" pos:end="73:10">.</operator><name pos:start="73:11" pos:end="73:13">pop</name></name><argument_list pos:start="73:14" pos:end="73:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="75:5" pos:end="75:15"><expr pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:8">cout</name><operator pos:start="75:9" pos:end="75:10">&lt;&lt;</operator><name pos:start="75:11" pos:end="75:14">endl</name></expr>;</expr_stmt>
    <return pos:start="76:5" pos:end="76:13">return <expr pos:start="76:12" pos:end="76:12"><literal type="number" pos:start="76:12" pos:end="76:12">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
