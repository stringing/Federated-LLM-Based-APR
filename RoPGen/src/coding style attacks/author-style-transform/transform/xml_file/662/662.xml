<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/662/662.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:20">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<using pos:start="3:1" pos:end="3:20">using <namespace pos:start="3:7" pos:end="3:20">namespace <name pos:start="3:17" pos:end="3:19">std</name>;</namespace></using>
<decl_stmt pos:start="4:1" pos:end="4:17"><decl pos:start="4:1" pos:end="4:16"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:16"><name pos:start="4:5" pos:end="4:7">num</name><index pos:start="4:8" pos:end="4:16">[<expr pos:start="4:9" pos:end="4:15"><literal type="number" pos:start="4:9" pos:end="4:15">1000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="5:1" pos:end="23:1"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:8">main</name><parameter_list pos:start="5:9" pos:end="5:10">()</parameter_list> <block pos:start="5:12" pos:end="23:1">{<block_content pos:start="6:5" pos:end="22:13">
    <expr_stmt pos:start="6:5" pos:end="6:35"><expr pos:start="6:5" pos:end="6:34"><call pos:start="6:5" pos:end="6:34"><name pos:start="6:5" pos:end="6:11">freopen</name><argument_list pos:start="6:12" pos:end="6:34">(<argument pos:start="6:13" pos:end="6:21"><expr pos:start="6:13" pos:end="6:21"><literal type="string" pos:start="6:13" pos:end="6:21">"ball.in"</literal></expr></argument>, <argument pos:start="6:24" pos:end="6:26"><expr pos:start="6:24" pos:end="6:26"><literal type="string" pos:start="6:24" pos:end="6:26">"r"</literal></expr></argument>, <argument pos:start="6:29" pos:end="6:33"><expr pos:start="6:29" pos:end="6:33"><name pos:start="6:29" pos:end="6:33">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:37"><expr pos:start="7:5" pos:end="7:36"><call pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:11">freopen</name><argument_list pos:start="7:12" pos:end="7:36">(<argument pos:start="7:13" pos:end="7:22"><expr pos:start="7:13" pos:end="7:22"><literal type="string" pos:start="7:13" pos:end="7:22">"ball.out"</literal></expr></argument>, <argument pos:start="7:25" pos:end="7:27"><expr pos:start="7:25" pos:end="7:27"><literal type="string" pos:start="7:25" pos:end="7:27">"w"</literal></expr></argument>, <argument pos:start="7:30" pos:end="7:35"><expr pos:start="7:30" pos:end="7:35"><name pos:start="7:30" pos:end="7:35">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:16"><decl pos:start="8:5" pos:end="8:9"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:9">n</name></decl>, <decl pos:start="8:12" pos:end="8:12"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:12" pos:end="8:12">m</name></decl>, <decl pos:start="8:15" pos:end="8:15"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:15" pos:end="8:15">x</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:24"><expr pos:start="9:5" pos:end="9:23"><call pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:9">scanf</name><argument_list pos:start="9:10" pos:end="9:23">(<argument pos:start="9:11" pos:end="9:16"><expr pos:start="9:11" pos:end="9:16"><literal type="string" pos:start="9:11" pos:end="9:16">"%d%d"</literal></expr></argument>,<argument pos:start="9:18" pos:end="9:19"><expr pos:start="9:18" pos:end="9:19"><operator pos:start="9:18" pos:end="9:18">&amp;</operator><name pos:start="9:19" pos:end="9:19">m</name></expr></argument>,<argument pos:start="9:21" pos:end="9:22"><expr pos:start="9:21" pos:end="9:22"><operator pos:start="9:21" pos:end="9:21">&amp;</operator><name pos:start="9:22" pos:end="9:22">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="10:5" pos:end="12:5">for <control pos:start="10:9" pos:end="10:31">(<init pos:start="10:10" pos:end="10:19"><decl pos:start="10:10" pos:end="10:18"><type pos:start="10:10" pos:end="10:12"><name pos:start="10:10" pos:end="10:12">int</name></type> <name pos:start="10:14" pos:end="10:14">i</name> <init pos:start="10:16" pos:end="10:18">= <expr pos:start="10:18" pos:end="10:18"><literal type="number" pos:start="10:18" pos:end="10:18">0</literal></expr></init></decl>;</init> <condition pos:start="10:21" pos:end="10:26"><expr pos:start="10:21" pos:end="10:25"><name pos:start="10:21" pos:end="10:21">i</name> <operator pos:start="10:23" pos:end="10:23">&lt;</operator> <name pos:start="10:25" pos:end="10:25">m</name></expr>;</condition> <incr pos:start="10:28" pos:end="10:30"><expr pos:start="10:28" pos:end="10:30"><name pos:start="10:28" pos:end="10:28">i</name><operator pos:start="10:29" pos:end="10:30">++</operator></expr></incr>)</control> <block pos:start="10:33" pos:end="12:5">{<block_content pos:start="11:9" pos:end="11:28">
        <expr_stmt pos:start="11:9" pos:end="11:28"><expr pos:start="11:9" pos:end="11:27"><call pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:13">scanf</name><argument_list pos:start="11:14" pos:end="11:27">(<argument pos:start="11:15" pos:end="11:18"><expr pos:start="11:15" pos:end="11:18"><literal type="string" pos:start="11:15" pos:end="11:18">"%d"</literal></expr></argument>,<argument pos:start="11:20" pos:end="11:26"><expr pos:start="11:20" pos:end="11:26"><operator pos:start="11:20" pos:end="11:20">&amp;</operator><name pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:23">num</name><index pos:start="11:24" pos:end="11:26">[<expr pos:start="11:25" pos:end="11:25"><name pos:start="11:25" pos:end="11:25">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><call pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:8">sort</name><argument_list pos:start="13:9" pos:end="13:19">(<argument pos:start="13:10" pos:end="13:12"><expr pos:start="13:10" pos:end="13:12"><name pos:start="13:10" pos:end="13:12">num</name></expr></argument>,<argument pos:start="13:14" pos:end="13:18"><expr pos:start="13:14" pos:end="13:18"><name pos:start="13:14" pos:end="13:16">num</name><operator pos:start="13:17" pos:end="13:17">+</operator><name pos:start="13:18" pos:end="13:18">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="14:5" pos:end="21:5">for<control pos:start="14:8" pos:end="14:24">(<init pos:start="14:9" pos:end="14:16"><decl pos:start="14:9" pos:end="14:15"><type pos:start="14:9" pos:end="14:11"><name pos:start="14:9" pos:end="14:11">int</name></type> <name pos:start="14:13" pos:end="14:13">i</name><init pos:start="14:14" pos:end="14:15">=<expr pos:start="14:15" pos:end="14:15"><literal type="number" pos:start="14:15" pos:end="14:15">0</literal></expr></init></decl>;</init><condition pos:start="14:17" pos:end="14:20"><expr pos:start="14:17" pos:end="14:19"><name pos:start="14:17" pos:end="14:17">i</name><operator pos:start="14:18" pos:end="14:18">&lt;</operator><name pos:start="14:19" pos:end="14:19">n</name></expr>;</condition><incr pos:start="14:21" pos:end="14:23"><expr pos:start="14:21" pos:end="14:23"><name pos:start="14:21" pos:end="14:21">i</name><operator pos:start="14:22" pos:end="14:23">++</operator></expr></incr>)</control><block pos:start="14:25" pos:end="21:5">{<block_content pos:start="15:9" pos:end="20:9">
        <expr_stmt pos:start="15:9" pos:end="15:23"><expr pos:start="15:9" pos:end="15:22"><call pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:13">scanf</name><argument_list pos:start="15:14" pos:end="15:22">(<argument pos:start="15:15" pos:end="15:18"><expr pos:start="15:15" pos:end="15:18"><literal type="string" pos:start="15:15" pos:end="15:18">"%d"</literal></expr></argument>,<argument pos:start="15:20" pos:end="15:21"><expr pos:start="15:20" pos:end="15:21"><operator pos:start="15:20" pos:end="15:20">&amp;</operator><name pos:start="15:21" pos:end="15:21">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="16:9" pos:end="20:9"><if pos:start="16:9" pos:end="18:9">if<condition pos:start="16:11" pos:end="16:38">(<expr pos:start="16:12" pos:end="16:37"><call pos:start="16:12" pos:end="16:37"><name pos:start="16:12" pos:end="16:24">binary_search</name><argument_list pos:start="16:25" pos:end="16:37">(<argument pos:start="16:26" pos:end="16:28"><expr pos:start="16:26" pos:end="16:28"><name pos:start="16:26" pos:end="16:28">num</name></expr></argument>,<argument pos:start="16:30" pos:end="16:34"><expr pos:start="16:30" pos:end="16:34"><name pos:start="16:30" pos:end="16:32">num</name><operator pos:start="16:33" pos:end="16:33">+</operator><name pos:start="16:34" pos:end="16:34">m</name></expr></argument>,<argument pos:start="16:36" pos:end="16:36"><expr pos:start="16:36" pos:end="16:36"><name pos:start="16:36" pos:end="16:36">k</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="16:39" pos:end="18:9">{<block_content pos:start="17:13" pos:end="17:28">
            <expr_stmt pos:start="17:13" pos:end="17:28"><expr pos:start="17:13" pos:end="17:27"><call pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:18">printf</name><argument_list pos:start="17:19" pos:end="17:27">(<argument pos:start="17:20" pos:end="17:26"><expr pos:start="17:20" pos:end="17:26"><literal type="string" pos:start="17:20" pos:end="17:26">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else pos:start="18:10" pos:end="20:9">else<block pos:start="18:14" pos:end="20:9">{<block_content pos:start="19:13" pos:end="19:27">
            <expr_stmt pos:start="19:13" pos:end="19:27"><expr pos:start="19:13" pos:end="19:26"><call pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:18">printf</name><argument_list pos:start="19:19" pos:end="19:26">(<argument pos:start="19:20" pos:end="19:25"><expr pos:start="19:20" pos:end="19:25"><literal type="string" pos:start="19:20" pos:end="19:25">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return pos:start="22:5" pos:end="22:13">return <expr pos:start="22:12" pos:end="22:12"><literal type="number" pos:start="22:12" pos:end="22:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
