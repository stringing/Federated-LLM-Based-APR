<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/451/451.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:18"><decl pos:start="3:1" pos:end="3:17"><type pos:start="3:1" pos:end="3:9"><specifier pos:start="3:1" pos:end="3:5">const</specifier> <name pos:start="3:7" pos:end="3:9">int</name></type> <name pos:start="3:11" pos:end="3:14">Maxn</name><init pos:start="3:15" pos:end="3:17">=<expr pos:start="3:16" pos:end="3:17"><literal type="number" pos:start="3:16" pos:end="3:17">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:21"><decl pos:start="4:1" pos:end="4:20"><type pos:start="4:1" pos:end="4:9"><specifier pos:start="4:1" pos:end="4:5">const</specifier> <name pos:start="4:7" pos:end="4:9">int</name></type> <name pos:start="4:11" pos:end="4:14">Maxk</name><init pos:start="4:15" pos:end="4:20">=<expr pos:start="4:16" pos:end="4:20"><literal type="number" pos:start="4:16" pos:end="4:17">20</literal><operator pos:start="4:18" pos:end="4:18">*</operator><literal type="number" pos:start="4:19" pos:end="4:20">19</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:13"><decl pos:start="5:1" pos:end="5:12"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:6">Ar</name><index pos:start="5:7" pos:end="5:12">[<expr pos:start="5:8" pos:end="5:11"><name pos:start="5:8" pos:end="5:11">Maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="6:1" pos:end="6:18"><decl pos:start="6:1" pos:end="6:17"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:17"><name pos:start="6:5" pos:end="6:5">c</name><index pos:start="6:6" pos:end="6:11">[<expr pos:start="6:7" pos:end="6:10"><name pos:start="6:7" pos:end="6:10">Maxk</name></expr>]</index><index pos:start="6:12" pos:end="6:17">[<expr pos:start="6:13" pos:end="6:16"><name pos:start="6:13" pos:end="6:16">Maxk</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:22"><decl pos:start="7:1" pos:end="7:21"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:6">dp</name><index pos:start="7:7" pos:end="7:15">[<expr pos:start="7:8" pos:end="7:14"><literal type="number" pos:start="7:8" pos:end="7:8">1</literal><operator pos:start="7:9" pos:end="7:10">&lt;&lt;</operator><name pos:start="7:11" pos:end="7:14">Maxn</name></expr>]</index><index pos:start="7:16" pos:end="7:21">[<expr pos:start="7:17" pos:end="7:20"><name pos:start="7:17" pos:end="7:20">Maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="8:1" pos:end="17:1"><type pos:start="8:1" pos:end="8:3"><name pos:start="8:1" pos:end="8:3">int</name></type> <name pos:start="8:5" pos:end="8:12">bitcount</name><parameter_list pos:start="8:13" pos:end="8:19">(<parameter pos:start="8:14" pos:end="8:18"><decl pos:start="8:14" pos:end="8:18"><type pos:start="8:14" pos:end="8:16"><name pos:start="8:14" pos:end="8:16">int</name></type> <name pos:start="8:18" pos:end="8:18">x</name></decl></parameter>)</parameter_list>
<block pos:start="9:1" pos:end="17:1">{<block_content pos:start="10:5" pos:end="16:15">
    <decl_stmt pos:start="10:5" pos:end="10:14"><decl pos:start="10:5" pos:end="10:13"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:11">cnt</name><init pos:start="10:12" pos:end="10:13">=<expr pos:start="10:13" pos:end="10:13"><literal type="number" pos:start="10:13" pos:end="10:13">0</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="11:5" pos:end="15:5">while<condition pos:start="11:10" pos:end="11:12">(<expr pos:start="11:11" pos:end="11:11"><name pos:start="11:11" pos:end="11:11">x</name></expr>)</condition>
    <block pos:start="12:5" pos:end="15:5">{<block_content pos:start="13:9" pos:end="14:14">
        <expr_stmt pos:start="13:9" pos:end="13:18"><expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:9">x</name><operator pos:start="13:10" pos:end="13:11">-=</operator><name pos:start="13:12" pos:end="13:12">x</name><operator pos:start="13:13" pos:end="13:13">&amp;</operator><operator pos:start="13:14" pos:end="13:14">(</operator><operator pos:start="13:15" pos:end="13:15">-</operator><name pos:start="13:16" pos:end="13:16">x</name><operator pos:start="13:17" pos:end="13:17">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:14"><expr pos:start="14:9" pos:end="14:13"><name pos:start="14:9" pos:end="14:11">cnt</name><operator pos:start="14:12" pos:end="14:13">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="16:5" pos:end="16:15">return <expr pos:start="16:12" pos:end="16:14"><name pos:start="16:12" pos:end="16:14">cnt</name></expr>;</return>
</block_content>}</block></function>
<function pos:start="18:1" pos:end="64:1"><type pos:start="18:1" pos:end="18:3"><name pos:start="18:1" pos:end="18:3">int</name></type> <name pos:start="18:5" pos:end="18:8">main</name><parameter_list pos:start="18:9" pos:end="18:10">()</parameter_list>
<block pos:start="19:1" pos:end="64:1">{<block_content pos:start="20:5" pos:end="63:13">
    <expr_stmt pos:start="20:5" pos:end="20:33"><expr pos:start="20:5" pos:end="20:32"><call pos:start="20:5" pos:end="20:32"><name pos:start="20:5" pos:end="20:11">freopen</name><argument_list pos:start="20:12" pos:end="20:32">(<argument pos:start="20:13" pos:end="20:21"><expr pos:start="20:13" pos:end="20:21"><literal type="string" pos:start="20:13" pos:end="20:21">"meal.in"</literal></expr></argument>,<argument pos:start="20:23" pos:end="20:25"><expr pos:start="20:23" pos:end="20:25"><literal type="string" pos:start="20:23" pos:end="20:25">"r"</literal></expr></argument>,<argument pos:start="20:27" pos:end="20:31"><expr pos:start="20:27" pos:end="20:31"><name pos:start="20:27" pos:end="20:31">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><call pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:11">freopen</name><argument_list pos:start="21:12" pos:end="21:34">(<argument pos:start="21:13" pos:end="21:22"><expr pos:start="21:13" pos:end="21:22"><literal type="string" pos:start="21:13" pos:end="21:22">"meal.out"</literal></expr></argument>,<argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><literal type="string" pos:start="21:24" pos:end="21:26">"w"</literal></expr></argument>,<argument pos:start="21:28" pos:end="21:33"><expr pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:33">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:14"><decl pos:start="22:5" pos:end="22:9"><type pos:start="22:5" pos:end="22:7"><name pos:start="22:5" pos:end="22:7">int</name></type> <name pos:start="22:9" pos:end="22:9">n</name></decl>,<decl pos:start="22:11" pos:end="22:11"><type ref="prev" pos:start="22:5" pos:end="22:7"/><name pos:start="22:11" pos:end="22:11">m</name></decl>,<decl pos:start="22:13" pos:end="22:13"><type ref="prev" pos:start="22:5" pos:end="22:7"/><name pos:start="22:13" pos:end="22:13">k</name></decl>;</decl_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><call pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:9">scanf</name><argument_list pos:start="23:10" pos:end="23:28">(<argument pos:start="23:11" pos:end="23:18"><expr pos:start="23:11" pos:end="23:18"><literal type="string" pos:start="23:11" pos:end="23:18">"%d%d%d"</literal></expr></argument>,<argument pos:start="23:20" pos:end="23:21"><expr pos:start="23:20" pos:end="23:21"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:21">n</name></expr></argument>,<argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:24">m</name></expr></argument>,<argument pos:start="23:26" pos:end="23:27"><expr pos:start="23:26" pos:end="23:27"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:27">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="24:5" pos:end="27:5">for<control pos:start="24:8" pos:end="24:24">(<init pos:start="24:9" pos:end="24:16"><decl pos:start="24:9" pos:end="24:15"><type pos:start="24:9" pos:end="24:11"><name pos:start="24:9" pos:end="24:11">int</name></type> <name pos:start="24:13" pos:end="24:13">i</name><init pos:start="24:14" pos:end="24:15">=<expr pos:start="24:15" pos:end="24:15"><literal type="number" pos:start="24:15" pos:end="24:15">0</literal></expr></init></decl>;</init><condition pos:start="24:17" pos:end="24:20"><expr pos:start="24:17" pos:end="24:19"><name pos:start="24:17" pos:end="24:17">i</name><operator pos:start="24:18" pos:end="24:18">&lt;</operator><name pos:start="24:19" pos:end="24:19">n</name></expr>;</condition><incr pos:start="24:21" pos:end="24:23"><expr pos:start="24:21" pos:end="24:23"><name pos:start="24:21" pos:end="24:21">i</name><operator pos:start="24:22" pos:end="24:23">++</operator></expr></incr>)</control>
    <block pos:start="25:5" pos:end="27:5">{<block_content pos:start="26:9" pos:end="26:27">
        <expr_stmt pos:start="26:9" pos:end="26:27"><expr pos:start="26:9" pos:end="26:26"><call pos:start="26:9" pos:end="26:26"><name pos:start="26:9" pos:end="26:13">scanf</name><argument_list pos:start="26:14" pos:end="26:26">(<argument pos:start="26:15" pos:end="26:18"><expr pos:start="26:15" pos:end="26:18"><literal type="string" pos:start="26:15" pos:end="26:18">"%d"</literal></expr></argument>,<argument pos:start="26:20" pos:end="26:25"><expr pos:start="26:20" pos:end="26:25"><operator pos:start="26:20" pos:end="26:20">&amp;</operator><name pos:start="26:21" pos:end="26:25"><name pos:start="26:21" pos:end="26:22">Ar</name><index pos:start="26:23" pos:end="26:25">[<expr pos:start="26:24" pos:end="26:24"><name pos:start="26:24" pos:end="26:24">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="28:5" pos:end="33:5">for<control pos:start="28:8" pos:end="28:24">(<init pos:start="28:9" pos:end="28:16"><decl pos:start="28:9" pos:end="28:15"><type pos:start="28:9" pos:end="28:11"><name pos:start="28:9" pos:end="28:11">int</name></type> <name pos:start="28:13" pos:end="28:13">i</name><init pos:start="28:14" pos:end="28:15">=<expr pos:start="28:15" pos:end="28:15"><literal type="number" pos:start="28:15" pos:end="28:15">0</literal></expr></init></decl>;</init><condition pos:start="28:17" pos:end="28:20"><expr pos:start="28:17" pos:end="28:19"><name pos:start="28:17" pos:end="28:17">i</name><operator pos:start="28:18" pos:end="28:18">&lt;</operator><name pos:start="28:19" pos:end="28:19">k</name></expr>;</condition><incr pos:start="28:21" pos:end="28:23"><expr pos:start="28:21" pos:end="28:23"><name pos:start="28:21" pos:end="28:21">i</name><operator pos:start="28:22" pos:end="28:23">++</operator></expr></incr>)</control>
    <block pos:start="29:5" pos:end="33:5">{<block_content pos:start="30:9" pos:end="32:33">
        <decl_stmt pos:start="30:9" pos:end="30:16"><decl pos:start="30:9" pos:end="30:13"><type pos:start="30:9" pos:end="30:11"><name pos:start="30:9" pos:end="30:11">int</name></type> <name pos:start="30:13" pos:end="30:13">x</name></decl>,<decl pos:start="30:15" pos:end="30:15"><type ref="prev" pos:start="30:9" pos:end="30:11"/><name pos:start="30:15" pos:end="30:15">y</name></decl>;</decl_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:28"><expr pos:start="31:9" pos:end="31:27"><call pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:13">scanf</name><argument_list pos:start="31:14" pos:end="31:27">(<argument pos:start="31:15" pos:end="31:20"><expr pos:start="31:15" pos:end="31:20"><literal type="string" pos:start="31:15" pos:end="31:20">"%d%d"</literal></expr></argument>,<argument pos:start="31:22" pos:end="31:23"><expr pos:start="31:22" pos:end="31:23"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:23">x</name></expr></argument>,<argument pos:start="31:25" pos:end="31:26"><expr pos:start="31:25" pos:end="31:26"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:26">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:33"><expr pos:start="32:9" pos:end="32:32"><call pos:start="32:9" pos:end="32:32"><name pos:start="32:9" pos:end="32:13">scanf</name><argument_list pos:start="32:14" pos:end="32:32">(<argument pos:start="32:15" pos:end="32:18"><expr pos:start="32:15" pos:end="32:18"><literal type="string" pos:start="32:15" pos:end="32:18">"%d"</literal></expr></argument>,<argument pos:start="32:20" pos:end="32:31"><expr pos:start="32:20" pos:end="32:31"><operator pos:start="32:20" pos:end="32:20">&amp;</operator><name pos:start="32:21" pos:end="32:31"><name pos:start="32:21" pos:end="32:21">c</name><index pos:start="32:22" pos:end="32:26">[<expr pos:start="32:23" pos:end="32:25"><name pos:start="32:23" pos:end="32:23">x</name><operator pos:start="32:24" pos:end="32:24">-</operator><literal type="number" pos:start="32:25" pos:end="32:25">1</literal></expr>]</index><index pos:start="32:27" pos:end="32:31">[<expr pos:start="32:28" pos:end="32:30"><name pos:start="32:28" pos:end="32:28">y</name><operator pos:start="32:29" pos:end="32:29">-</operator><literal type="number" pos:start="32:30" pos:end="32:30">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="34:5" pos:end="37:5">for<control pos:start="34:8" pos:end="34:24">(<init pos:start="34:9" pos:end="34:16"><decl pos:start="34:9" pos:end="34:15"><type pos:start="34:9" pos:end="34:11"><name pos:start="34:9" pos:end="34:11">int</name></type> <name pos:start="34:13" pos:end="34:13">i</name><init pos:start="34:14" pos:end="34:15">=<expr pos:start="34:15" pos:end="34:15"><literal type="number" pos:start="34:15" pos:end="34:15">0</literal></expr></init></decl>;</init><condition pos:start="34:17" pos:end="34:20"><expr pos:start="34:17" pos:end="34:19"><name pos:start="34:17" pos:end="34:17">i</name><operator pos:start="34:18" pos:end="34:18">&lt;</operator><name pos:start="34:19" pos:end="34:19">n</name></expr>;</condition><incr pos:start="34:21" pos:end="34:23"><expr pos:start="34:21" pos:end="34:23"><name pos:start="34:21" pos:end="34:21">i</name><operator pos:start="34:22" pos:end="34:23">++</operator></expr></incr>)</control>
    <block pos:start="35:5" pos:end="37:5">{<block_content pos:start="36:9" pos:end="36:26">
        <expr_stmt pos:start="36:9" pos:end="36:26"><expr pos:start="36:9" pos:end="36:25"><name pos:start="36:9" pos:end="36:19"><name pos:start="36:9" pos:end="36:10">dp</name><index pos:start="36:11" pos:end="36:16">[<expr pos:start="36:12" pos:end="36:15"><literal type="number" pos:start="36:12" pos:end="36:12">1</literal><operator pos:start="36:13" pos:end="36:14">&lt;&lt;</operator><name pos:start="36:15" pos:end="36:15">i</name></expr>]</index><index pos:start="36:17" pos:end="36:19">[<expr pos:start="36:18" pos:end="36:18"><name pos:start="36:18" pos:end="36:18">i</name></expr>]</index></name><operator pos:start="36:20" pos:end="36:20">=</operator><name pos:start="36:21" pos:end="36:25"><name pos:start="36:21" pos:end="36:22">Ar</name><index pos:start="36:23" pos:end="36:25">[<expr pos:start="36:24" pos:end="36:24"><name pos:start="36:24" pos:end="36:24">i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt pos:start="38:5" pos:end="38:18"><decl pos:start="38:5" pos:end="38:17"><type pos:start="38:5" pos:end="38:7"><name pos:start="38:5" pos:end="38:7">int</name></type> <name pos:start="38:9" pos:end="38:11">ans</name><init pos:start="38:12" pos:end="38:17">=<expr pos:start="38:13" pos:end="38:17"><operator pos:start="38:13" pos:end="38:13">-</operator><literal type="number" pos:start="38:14" pos:end="38:17">0x3f</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="39:5" pos:end="60:5">for<control pos:start="39:8" pos:end="39:29">(<init pos:start="39:9" pos:end="39:16"><decl pos:start="39:9" pos:end="39:15"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:13">i</name><init pos:start="39:14" pos:end="39:15">=<expr pos:start="39:15" pos:end="39:15"><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr></init></decl>;</init><condition pos:start="39:17" pos:end="39:25"><expr pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:17">i</name><operator pos:start="39:18" pos:end="39:18">&lt;</operator><operator pos:start="39:19" pos:end="39:19">(</operator><literal type="number" pos:start="39:20" pos:end="39:20">1</literal><operator pos:start="39:21" pos:end="39:22">&lt;&lt;</operator><name pos:start="39:23" pos:end="39:23">n</name><operator pos:start="39:24" pos:end="39:24">)</operator></expr>;</condition><incr pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:26">i</name><operator pos:start="39:27" pos:end="39:28">++</operator></expr></incr>)</control>
    <block pos:start="40:5" pos:end="60:5">{<block_content pos:start="41:9" pos:end="59:9">
        <for pos:start="41:9" pos:end="59:9">for<control pos:start="41:12" pos:end="41:28">(<init pos:start="41:13" pos:end="41:20"><decl pos:start="41:13" pos:end="41:19"><type pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:15">int</name></type> <name pos:start="41:17" pos:end="41:17">j</name><init pos:start="41:18" pos:end="41:19">=<expr pos:start="41:19" pos:end="41:19"><literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr></init></decl>;</init><condition pos:start="41:21" pos:end="41:24"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:21">j</name><operator pos:start="41:22" pos:end="41:22">&lt;</operator><name pos:start="41:23" pos:end="41:23">n</name></expr>;</condition><incr pos:start="41:25" pos:end="41:27"><expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:25">j</name><operator pos:start="41:26" pos:end="41:27">++</operator></expr></incr>)</control>
        <block pos:start="42:9" pos:end="59:9">{<block_content pos:start="43:13" pos:end="58:13">
            <if_stmt pos:start="43:13" pos:end="46:13"><if pos:start="43:13" pos:end="46:13">if<condition pos:start="43:15" pos:end="43:27">(<expr pos:start="43:16" pos:end="43:26"><operator pos:start="43:16" pos:end="43:16">(</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal><operator pos:start="43:18" pos:end="43:19">&lt;&lt;</operator><name pos:start="43:20" pos:end="43:20">j</name><operator pos:start="43:21" pos:end="43:21">)</operator><operator pos:start="43:22" pos:end="43:22">&amp;</operator><name pos:start="43:23" pos:end="43:23">i</name><operator pos:start="43:24" pos:end="43:25">!=</operator><literal type="number" pos:start="43:26" pos:end="43:26">0</literal></expr>)</condition>
            <block pos:start="44:13" pos:end="46:13">{<block_content pos:start="45:17" pos:end="45:25">
                <continue pos:start="45:17" pos:end="45:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <for pos:start="47:13" pos:end="54:13">for<control pos:start="47:16" pos:end="47:32">(<init pos:start="47:17" pos:end="47:24"><decl pos:start="47:17" pos:end="47:23"><type pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">int</name></type> <name pos:start="47:21" pos:end="47:21">k</name><init pos:start="47:22" pos:end="47:23">=<expr pos:start="47:23" pos:end="47:23"><literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr></init></decl>;</init><condition pos:start="47:25" pos:end="47:28"><expr pos:start="47:25" pos:end="47:27"><name pos:start="47:25" pos:end="47:25">k</name><operator pos:start="47:26" pos:end="47:26">&lt;</operator><name pos:start="47:27" pos:end="47:27">n</name></expr>;</condition><incr pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:29">k</name><operator pos:start="47:30" pos:end="47:31">++</operator></expr></incr>)</control>
            <block pos:start="48:13" pos:end="54:13">{<block_content pos:start="49:17" pos:end="53:76">
                <if_stmt pos:start="49:17" pos:end="52:17"><if pos:start="49:17" pos:end="52:17">if<condition pos:start="49:19" pos:end="49:31">(<expr pos:start="49:20" pos:end="49:30"><operator pos:start="49:20" pos:end="49:20">(</operator><literal type="number" pos:start="49:21" pos:end="49:21">1</literal><operator pos:start="49:22" pos:end="49:23">&lt;&lt;</operator><name pos:start="49:24" pos:end="49:24">k</name><operator pos:start="49:25" pos:end="49:25">)</operator><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:27">i</name><operator pos:start="49:28" pos:end="49:29">==</operator><literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>)</condition>
                <block pos:start="50:17" pos:end="52:17">{<block_content pos:start="51:21" pos:end="51:29">
                    <continue pos:start="51:21" pos:end="51:29">continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="53:17" pos:end="53:76"><expr pos:start="53:17" pos:end="53:75"><name pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:18">dp</name><index pos:start="53:19" pos:end="53:28">[<expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:20">i</name><operator pos:start="53:21" pos:end="53:21">|</operator><operator pos:start="53:22" pos:end="53:22">(</operator><literal type="number" pos:start="53:23" pos:end="53:23">1</literal><operator pos:start="53:24" pos:end="53:25">&lt;&lt;</operator><name pos:start="53:26" pos:end="53:26">j</name><operator pos:start="53:27" pos:end="53:27">)</operator></expr>]</index><index pos:start="53:29" pos:end="53:31">[<expr pos:start="53:30" pos:end="53:30"><name pos:start="53:30" pos:end="53:30">j</name></expr>]</index></name><operator pos:start="53:32" pos:end="53:32">=</operator><call pos:start="53:33" pos:end="53:75"><name pos:start="53:33" pos:end="53:35">max</name><argument_list pos:start="53:36" pos:end="53:75">(<argument pos:start="53:37" pos:end="53:51"><expr pos:start="53:37" pos:end="53:51"><name pos:start="53:37" pos:end="53:51"><name pos:start="53:37" pos:end="53:38">dp</name><index pos:start="53:39" pos:end="53:48">[<expr pos:start="53:40" pos:end="53:47"><name pos:start="53:40" pos:end="53:40">i</name><operator pos:start="53:41" pos:end="53:41">|</operator><operator pos:start="53:42" pos:end="53:42">(</operator><literal type="number" pos:start="53:43" pos:end="53:43">1</literal><operator pos:start="53:44" pos:end="53:45">&lt;&lt;</operator><name pos:start="53:46" pos:end="53:46">j</name><operator pos:start="53:47" pos:end="53:47">)</operator></expr>]</index><index pos:start="53:49" pos:end="53:51">[<expr pos:start="53:50" pos:end="53:50"><name pos:start="53:50" pos:end="53:50">j</name></expr>]</index></name></expr></argument>,<argument pos:start="53:53" pos:end="53:74"><expr pos:start="53:53" pos:end="53:74"><name pos:start="53:53" pos:end="53:60"><name pos:start="53:53" pos:end="53:54">dp</name><index pos:start="53:55" pos:end="53:57">[<expr pos:start="53:56" pos:end="53:56"><name pos:start="53:56" pos:end="53:56">i</name></expr>]</index><index pos:start="53:58" pos:end="53:60">[<expr pos:start="53:59" pos:end="53:59"><name pos:start="53:59" pos:end="53:59">k</name></expr>]</index></name><operator pos:start="53:61" pos:end="53:61">+</operator><name pos:start="53:62" pos:end="53:66"><name pos:start="53:62" pos:end="53:63">Ar</name><index pos:start="53:64" pos:end="53:66">[<expr pos:start="53:65" pos:end="53:65"><name pos:start="53:65" pos:end="53:65">j</name></expr>]</index></name><operator pos:start="53:67" pos:end="53:67">+</operator><name pos:start="53:68" pos:end="53:74"><name pos:start="53:68" pos:end="53:68">c</name><index pos:start="53:69" pos:end="53:71">[<expr pos:start="53:70" pos:end="53:70"><name pos:start="53:70" pos:end="53:70">k</name></expr>]</index><index pos:start="53:72" pos:end="53:74">[<expr pos:start="53:73" pos:end="53:73"><name pos:start="53:73" pos:end="53:73">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="55:13" pos:end="58:13"><if pos:start="55:13" pos:end="58:13">if<condition pos:start="55:15" pos:end="55:32">(<expr pos:start="55:16" pos:end="55:31"><call pos:start="55:16" pos:end="55:26"><name pos:start="55:16" pos:end="55:23">bitcount</name><argument_list pos:start="55:24" pos:end="55:26">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">i</name></expr></argument>)</argument_list></call><operator pos:start="55:27" pos:end="55:28">==</operator><name pos:start="55:29" pos:end="55:29">m</name><operator pos:start="55:30" pos:end="55:30">-</operator><literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr>)</condition>
            <block pos:start="56:13" pos:end="58:13">{<block_content pos:start="57:17" pos:end="57:45">
                <expr_stmt pos:start="57:17" pos:end="57:45"><expr pos:start="57:17" pos:end="57:44"><name pos:start="57:17" pos:end="57:19">ans</name><operator pos:start="57:20" pos:end="57:20">=</operator><call pos:start="57:21" pos:end="57:44"><name pos:start="57:21" pos:end="57:23">max</name><argument_list pos:start="57:24" pos:end="57:44">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">ans</name></expr></argument>,<argument pos:start="57:29" pos:end="57:43"><expr pos:start="57:29" pos:end="57:43"><name pos:start="57:29" pos:end="57:43"><name pos:start="57:29" pos:end="57:30">dp</name><index pos:start="57:31" pos:end="57:40">[<expr pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:32">i</name><operator pos:start="57:33" pos:end="57:33">|</operator><operator pos:start="57:34" pos:end="57:34">(</operator><literal type="number" pos:start="57:35" pos:end="57:35">1</literal><operator pos:start="57:36" pos:end="57:37">&lt;&lt;</operator><name pos:start="57:38" pos:end="57:38">j</name><operator pos:start="57:39" pos:end="57:39">)</operator></expr>]</index><index pos:start="57:41" pos:end="57:43">[<expr pos:start="57:42" pos:end="57:42"><name pos:start="57:42" pos:end="57:42">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    
    <expr_stmt pos:start="62:5" pos:end="62:23"><expr pos:start="62:5" pos:end="62:22"><call pos:start="62:5" pos:end="62:22"><name pos:start="62:5" pos:end="62:10">printf</name><argument_list pos:start="62:11" pos:end="62:22">(<argument pos:start="62:12" pos:end="62:17"><expr pos:start="62:12" pos:end="62:17"><literal type="string" pos:start="62:12" pos:end="62:17">"%d\n"</literal></expr></argument>,<argument pos:start="62:19" pos:end="62:21"><expr pos:start="62:19" pos:end="62:21"><name pos:start="62:19" pos:end="62:21">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
