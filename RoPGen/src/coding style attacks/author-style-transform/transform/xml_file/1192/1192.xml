<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1192/1192.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<function pos:start="3:1" pos:end="23:1"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:5">f</name><parameter_list pos:start="3:6" pos:end="3:18">(<parameter pos:start="3:7" pos:end="3:17"><decl pos:start="3:7" pos:end="3:17"><type pos:start="3:7" pos:end="3:15"><name pos:start="3:7" pos:end="3:10">long</name> <name pos:start="3:12" pos:end="3:15">long</name></type> <name pos:start="3:17" pos:end="3:17">n</name></decl></parameter>)</parameter_list><block pos:start="3:19" pos:end="23:1">{<block_content pos:start="4:5" pos:end="22:5">
    <if_stmt pos:start="4:5" pos:end="7:5"><if pos:start="4:5" pos:end="7:5">if<condition pos:start="4:7" pos:end="4:13">(<expr pos:start="4:8" pos:end="4:12"><name pos:start="4:8" pos:end="4:8">n</name><operator pos:start="4:9" pos:end="4:10">==</operator><literal type="number" pos:start="4:11" pos:end="4:12">12</literal></expr>)</condition><block pos:start="4:14" pos:end="7:5">{<block_content pos:start="5:9" pos:end="6:16">
        <expr_stmt pos:start="5:9" pos:end="5:29"><expr pos:start="5:9" pos:end="5:28"><name pos:start="5:9" pos:end="5:12">cout</name><operator pos:start="5:13" pos:end="5:14">&lt;&lt;</operator><literal type="string" pos:start="5:15" pos:end="5:28">"12, 6, 3, 12"</literal></expr>;</expr_stmt>
       <return pos:start="6:8" pos:end="6:16">return <expr pos:start="6:15" pos:end="6:15"><literal type="number" pos:start="6:15" pos:end="6:15">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="8:5" pos:end="11:5"><if pos:start="8:5" pos:end="11:5">if<condition pos:start="8:7" pos:end="8:12">(<expr pos:start="8:8" pos:end="8:11"><name pos:start="8:8" pos:end="8:8">n</name><operator pos:start="8:9" pos:end="8:10">==</operator><literal type="number" pos:start="8:11" pos:end="8:11">6</literal></expr>)</condition><block pos:start="8:13" pos:end="11:5">{<block_content pos:start="9:9" pos:end="10:17">
        <expr_stmt pos:start="9:9" pos:end="9:28"><expr pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:12">cout</name><operator pos:start="9:13" pos:end="9:14">&lt;&lt;</operator><literal type="string" pos:start="9:15" pos:end="9:27">"6, 3, 12, 6"</literal></expr>;</expr_stmt>
        <return pos:start="10:9" pos:end="10:17">return <expr pos:start="10:16" pos:end="10:16"><literal type="number" pos:start="10:16" pos:end="10:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="12:5" pos:end="15:5"><if pos:start="12:5" pos:end="15:5">if<condition pos:start="12:7" pos:end="12:12">(<expr pos:start="12:8" pos:end="12:11"><name pos:start="12:8" pos:end="12:8">n</name><operator pos:start="12:9" pos:end="12:10">==</operator><literal type="number" pos:start="12:11" pos:end="12:11">3</literal></expr>)</condition><block pos:start="12:13" pos:end="15:5">{<block_content pos:start="13:9" pos:end="14:18">
        <expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:12">cout</name><operator pos:start="13:13" pos:end="13:14">&lt;&lt;</operator><literal type="string" pos:start="13:15" pos:end="13:27">"3, 12, 6, 3"</literal></expr>;</expr_stmt>
         <return pos:start="14:10" pos:end="14:18">return <expr pos:start="14:17" pos:end="14:17"><literal type="number" pos:start="14:17" pos:end="14:17">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:18"><expr pos:start="16:5" pos:end="16:17"><name pos:start="16:5" pos:end="16:8">cout</name><operator pos:start="16:9" pos:end="16:10">&lt;&lt;</operator><name pos:start="16:11" pos:end="16:11">n</name><operator pos:start="16:12" pos:end="16:13">&lt;&lt;</operator><literal type="string" pos:start="16:14" pos:end="16:17">", "</literal></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="22:5"><if pos:start="17:5" pos:end="19:5">if<condition pos:start="17:7" pos:end="17:14">(<expr pos:start="17:8" pos:end="17:13"><name pos:start="17:8" pos:end="17:8">n</name><operator pos:start="17:9" pos:end="17:9">%</operator><literal type="number" pos:start="17:10" pos:end="17:10">2</literal><operator pos:start="17:11" pos:end="17:12">==</operator><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>)</condition><block pos:start="17:15" pos:end="19:5">{<block_content pos:start="18:9" pos:end="18:13">
        <expr_stmt pos:start="18:9" pos:end="18:13"><expr pos:start="18:9" pos:end="18:12"><name pos:start="18:9" pos:end="18:9">n</name><operator pos:start="18:10" pos:end="18:11">/=</operator><literal type="number" pos:start="18:12" pos:end="18:12">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else pos:start="20:5" pos:end="22:5">else<block pos:start="20:9" pos:end="22:5">{<block_content pos:start="21:9" pos:end="21:16">
        <expr_stmt pos:start="21:9" pos:end="21:16"><expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:9">n</name><operator pos:start="21:10" pos:end="21:10">=</operator><name pos:start="21:11" pos:end="21:11">n</name><operator pos:start="21:12" pos:end="21:12">*</operator><literal type="number" pos:start="21:13" pos:end="21:14">3</literal><operator pos:start="21:14" pos:end="21:14">+</operator><literal type="number" pos:start="21:15" pos:end="21:15">3</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function pos:start="24:1" pos:end="29:1"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:8">main</name><parameter_list pos:start="24:9" pos:end="24:10">()</parameter_list><block pos:start="24:11" pos:end="29:1">{<block_content pos:start="25:5" pos:end="28:13">
    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">d</name></decl>;</decl_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:11"><expr pos:start="26:5" pos:end="26:10"><name pos:start="26:5" pos:end="26:7">cin</name><operator pos:start="26:8" pos:end="26:9">&gt;&gt;</operator><name pos:start="26:10" pos:end="26:10">d</name></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:9"><expr pos:start="27:5" pos:end="27:8"><call pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:5">f</name><argument_list pos:start="27:6" pos:end="27:8">(<argument pos:start="27:7" pos:end="27:7"><expr pos:start="27:7" pos:end="27:7"><name pos:start="27:7" pos:end="27:7">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="28:5" pos:end="28:13">return <expr pos:start="28:12" pos:end="28:12"><literal type="number" pos:start="28:12" pos:end="28:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
