<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1043/1043.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:17">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:17">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:20">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define pos:start="3:1" pos:end="3:51">#<cpp:directive pos:start="3:2" pos:end="3:7">define</cpp:directive> <cpp:macro pos:start="3:9" pos:end="3:15"><name pos:start="3:9" pos:end="3:15">BFSNEXT</name></cpp:macro> <cpp:value pos:start="3:17" pos:end="3:51">now.score+map[now.x,now.y],now.from</cpp:value></cpp:define>
<using pos:start="4:1" pos:end="4:20">using <namespace pos:start="4:7" pos:end="4:20">namespace <name pos:start="4:17" pos:end="4:19">std</name>;</namespace></using>

<decl_stmt pos:start="6:1" pos:end="6:21"><decl pos:start="6:1" pos:end="6:5"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:5">n</name></decl>, <decl pos:start="6:8" pos:end="6:8"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:8" pos:end="6:8">m</name></decl>, <decl pos:start="6:11" pos:end="6:11"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:11" pos:end="6:11">x</name></decl>, <decl pos:start="6:14" pos:end="6:14"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:14" pos:end="6:14">y</name></decl>, <decl pos:start="6:17" pos:end="6:17"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:17" pos:end="6:17">v</name></decl>, <decl pos:start="6:20" pos:end="6:20"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:20" pos:end="6:20">c</name></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:20"><decl pos:start="7:1" pos:end="7:19"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:7">map</name><index pos:start="7:8" pos:end="7:13">[<expr pos:start="7:9" pos:end="7:12"><literal type="number" pos:start="7:9" pos:end="7:12">1010</literal></expr>]</index><index pos:start="7:14" pos:end="7:19">[<expr pos:start="7:15" pos:end="7:18"><literal type="number" pos:start="7:15" pos:end="7:18">1010</literal></expr>]</index></name></decl>;</decl_stmt>
<struct pos:start="8:1" pos:end="21:11">struct <name pos:start="8:8" pos:end="8:12">queue</name>
<block pos:start="9:1" pos:end="21:1">{<public type="default" pos:start="10:3" pos:end="20:3">
  <decl_stmt pos:start="10:3" pos:end="10:11"><decl pos:start="10:3" pos:end="10:7"><type pos:start="10:3" pos:end="10:5"><name pos:start="10:3" pos:end="10:5">int</name></type> <name pos:start="10:7" pos:end="10:7">x</name></decl>, <decl pos:start="10:10" pos:end="10:10"><type ref="prev" pos:start="10:3" pos:end="10:5"/><name pos:start="10:10" pos:end="10:10">y</name></decl>;</decl_stmt>
  <decl_stmt pos:start="11:3" pos:end="11:12"><decl pos:start="11:3" pos:end="11:11"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type> <name pos:start="11:7" pos:end="11:11">score</name></decl>;</decl_stmt>
  <decl_stmt pos:start="12:3" pos:end="12:11"><decl pos:start="12:3" pos:end="12:10"><type pos:start="12:3" pos:end="12:5"><name pos:start="12:3" pos:end="12:5">int</name></type> <name pos:start="12:7" pos:end="12:10">from</name></decl>;</decl_stmt>
  
  <function pos:start="14:3" pos:end="20:3"><type pos:start="14:3" pos:end="14:6"><name pos:start="14:3" pos:end="14:6">void</name></type> <name pos:start="14:8" pos:end="14:11">init</name><parameter_list pos:start="14:12" pos:end="14:50">(<parameter pos:start="14:13" pos:end="14:18"><decl pos:start="14:13" pos:end="14:18"><type pos:start="14:13" pos:end="14:18"><name pos:start="14:13" pos:end="14:15">int</name></type> <name pos:start="14:17" pos:end="14:18">_x</name></decl></parameter>, <parameter pos:start="14:21" pos:end="14:26"><decl pos:start="14:21" pos:end="14:26"><type pos:start="14:21" pos:end="14:26"><name pos:start="14:21" pos:end="14:23">int</name></type> <name pos:start="14:25" pos:end="14:26">_y</name></decl></parameter>, <parameter pos:start="14:29" pos:end="14:38"><decl pos:start="14:29" pos:end="14:38"><type pos:start="14:29" pos:end="14:38"><name pos:start="14:29" pos:end="14:31">int</name></type> <name pos:start="14:33" pos:end="14:38">_score</name></decl></parameter>, <parameter pos:start="14:41" pos:end="14:49"><decl pos:start="14:41" pos:end="14:49"><type pos:start="14:41" pos:end="14:49"><name pos:start="14:41" pos:end="14:43">int</name></type> <name pos:start="14:45" pos:end="14:49">_from</name></decl></parameter>)</parameter_list>
  <block pos:start="15:3" pos:end="20:3">{<block_content pos:start="16:5" pos:end="19:17">
    <expr_stmt pos:start="16:5" pos:end="16:11"><expr pos:start="16:5" pos:end="16:10"><name pos:start="16:5" pos:end="16:5">x</name> <operator pos:start="16:7" pos:end="16:7">=</operator> <name pos:start="16:9" pos:end="16:10">_x</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:11"><expr pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:5">y</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <name pos:start="17:9" pos:end="17:10">_y</name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:19"><expr pos:start="18:5" pos:end="18:18"><name pos:start="18:5" pos:end="18:9">score</name> <operator pos:start="18:11" pos:end="18:11">=</operator> <name pos:start="18:13" pos:end="18:18">_score</name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:8">from</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <name pos:start="19:12" pos:end="19:16">_from</name></expr>;</expr_stmt>
  </block_content>}</block></function>
</public>}</block><decl pos:start="21:2" pos:end="21:10"><name pos:start="21:2" pos:end="21:10"><name pos:start="21:2" pos:end="21:2">q</name><index pos:start="21:3" pos:end="21:10">[<expr pos:start="21:4" pos:end="21:9"><literal type="number" pos:start="21:4" pos:end="21:9">101010</literal></expr>]</index></name></decl>;</struct>
<decl_stmt pos:start="22:1" pos:end="22:17"><decl pos:start="22:1" pos:end="22:9"><type pos:start="22:1" pos:end="22:3"><name pos:start="22:1" pos:end="22:3">int</name></type> <name pos:start="22:5" pos:end="22:5">l</name> <init pos:start="22:7" pos:end="22:9">= <expr pos:start="22:9" pos:end="22:9"><literal type="number" pos:start="22:9" pos:end="22:9">0</literal></expr></init></decl>, <decl pos:start="22:12" pos:end="22:16"><type ref="prev" pos:start="22:1" pos:end="22:3"/><name pos:start="22:12" pos:end="22:12">r</name> <init pos:start="22:14" pos:end="22:16">= <expr pos:start="22:16" pos:end="22:16"><literal type="number" pos:start="22:16" pos:end="22:16">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="23:1" pos:end="23:13"><decl pos:start="23:1" pos:end="23:12"><type pos:start="23:1" pos:end="23:3"><name pos:start="23:1" pos:end="23:3">int</name></type> <name pos:start="23:5" pos:end="23:7">ans</name> <init pos:start="23:9" pos:end="23:12">= <expr pos:start="23:11" pos:end="23:12"><operator pos:start="23:11" pos:end="23:11">-</operator><literal type="number" pos:start="23:12" pos:end="23:12">1</literal></expr></init></decl>;</decl_stmt>

<function pos:start="25:1" pos:end="87:1"><type pos:start="25:1" pos:end="25:3"><name pos:start="25:1" pos:end="25:3">int</name></type> <name pos:start="25:5" pos:end="25:8">main</name> <parameter_list pos:start="25:10" pos:end="25:11">()</parameter_list>
<block pos:start="26:1" pos:end="87:1">{<block_content pos:start="27:3" pos:end="86:11">
  <expr_stmt pos:start="27:3" pos:end="27:36"><expr pos:start="27:3" pos:end="27:35"><call pos:start="27:3" pos:end="27:35"><name pos:start="27:3" pos:end="27:9">freopen</name> <argument_list pos:start="27:11" pos:end="27:35">(<argument pos:start="27:12" pos:end="27:22"><expr pos:start="27:12" pos:end="27:22"><literal type="string" pos:start="27:12" pos:end="27:22">"escape.in"</literal></expr></argument>, <argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><literal type="string" pos:start="27:25" pos:end="27:27">"r"</literal></expr></argument>, <argument pos:start="27:30" pos:end="27:34"><expr pos:start="27:30" pos:end="27:34"><name pos:start="27:30" pos:end="27:34">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt pos:start="28:3" pos:end="28:38"><expr pos:start="28:3" pos:end="28:37"><call pos:start="28:3" pos:end="28:37"><name pos:start="28:3" pos:end="28:9">freopen</name> <argument_list pos:start="28:11" pos:end="28:37">(<argument pos:start="28:12" pos:end="28:23"><expr pos:start="28:12" pos:end="28:23"><literal type="string" pos:start="28:12" pos:end="28:23">"escape.out"</literal></expr></argument>, <argument pos:start="28:26" pos:end="28:28"><expr pos:start="28:26" pos:end="28:28"><literal type="string" pos:start="28:26" pos:end="28:28">"w"</literal></expr></argument>, <argument pos:start="28:31" pos:end="28:36"><expr pos:start="28:31" pos:end="28:36"><name pos:start="28:31" pos:end="28:36">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt pos:start="29:3" pos:end="29:48"><expr pos:start="29:3" pos:end="29:47"><call pos:start="29:3" pos:end="29:47"><name pos:start="29:3" pos:end="29:7">scanf</name><argument_list pos:start="29:8" pos:end="29:47">(<argument pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:22"><literal type="string" pos:start="29:9" pos:end="29:22">"%d%d%d%d%d%d"</literal></expr></argument>, <argument pos:start="29:25" pos:end="29:26"><expr pos:start="29:25" pos:end="29:26"><operator pos:start="29:25" pos:end="29:25">&amp;</operator><name pos:start="29:26" pos:end="29:26">n</name></expr></argument>, <argument pos:start="29:29" pos:end="29:30"><expr pos:start="29:29" pos:end="29:30"><operator pos:start="29:29" pos:end="29:29">&amp;</operator><name pos:start="29:30" pos:end="29:30">m</name></expr></argument>, <argument pos:start="29:33" pos:end="29:34"><expr pos:start="29:33" pos:end="29:34"><operator pos:start="29:33" pos:end="29:33">&amp;</operator><name pos:start="29:34" pos:end="29:34">x</name></expr></argument>, <argument pos:start="29:37" pos:end="29:38"><expr pos:start="29:37" pos:end="29:38"><operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:38">y</name></expr></argument>, <argument pos:start="29:41" pos:end="29:42"><expr pos:start="29:41" pos:end="29:42"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:42">v</name></expr></argument>, <argument pos:start="29:45" pos:end="29:46"><expr pos:start="29:45" pos:end="29:46"><operator pos:start="29:45" pos:end="29:45">&amp;</operator><name pos:start="29:46" pos:end="29:46">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for pos:start="30:3" pos:end="36:3">for <control pos:start="30:7" pos:end="30:31">(<init pos:start="30:8" pos:end="30:17"><decl pos:start="30:8" pos:end="30:16"><type pos:start="30:8" pos:end="30:10"><name pos:start="30:8" pos:end="30:10">int</name></type> <name pos:start="30:12" pos:end="30:12">i</name> <init pos:start="30:14" pos:end="30:16">= <expr pos:start="30:16" pos:end="30:16"><literal type="number" pos:start="30:16" pos:end="30:16">1</literal></expr></init></decl>;</init> <condition pos:start="30:19" pos:end="30:25"><expr pos:start="30:19" pos:end="30:24"><name pos:start="30:19" pos:end="30:19">i</name> <operator pos:start="30:21" pos:end="30:22">&lt;=</operator> <name pos:start="30:24" pos:end="30:24">n</name></expr>;</condition> <incr pos:start="30:27" pos:end="30:30"><expr pos:start="30:27" pos:end="30:30"><name pos:start="30:27" pos:end="30:27">i</name> <operator pos:start="30:29" pos:end="30:30">++</operator></expr></incr>)</control>
  <block pos:start="31:3" pos:end="36:3">{<block_content pos:start="32:6" pos:end="35:6">
     <for pos:start="32:6" pos:end="35:6">for <control pos:start="32:10" pos:end="32:34">(<init pos:start="32:11" pos:end="32:20"><decl pos:start="32:11" pos:end="32:19"><type pos:start="32:11" pos:end="32:13"><name pos:start="32:11" pos:end="32:13">int</name></type> <name pos:start="32:15" pos:end="32:15">j</name> <init pos:start="32:17" pos:end="32:19">= <expr pos:start="32:19" pos:end="32:19"><literal type="number" pos:start="32:19" pos:end="32:19">1</literal></expr></init></decl>;</init> <condition pos:start="32:22" pos:end="32:28"><expr pos:start="32:22" pos:end="32:27"><name pos:start="32:22" pos:end="32:22">j</name> <operator pos:start="32:24" pos:end="32:25">&lt;=</operator> <name pos:start="32:27" pos:end="32:27">m</name></expr>;</condition> <incr pos:start="32:30" pos:end="32:33"><expr pos:start="32:30" pos:end="32:33"><name pos:start="32:30" pos:end="32:30">j</name> <operator pos:start="32:32" pos:end="32:33">++</operator></expr></incr>)</control>
     <block pos:start="33:6" pos:end="35:6">{<block_content pos:start="34:8" pos:end="34:31">
       <expr_stmt pos:start="34:8" pos:end="34:31"><expr pos:start="34:8" pos:end="34:30"><call pos:start="34:8" pos:end="34:30"><name pos:start="34:8" pos:end="34:12">scanf</name><argument_list pos:start="34:13" pos:end="34:30">(<argument pos:start="34:14" pos:end="34:17"><expr pos:start="34:14" pos:end="34:17"><literal type="string" pos:start="34:14" pos:end="34:17">"%d"</literal></expr></argument>, <argument pos:start="34:20" pos:end="34:29"><expr pos:start="34:20" pos:end="34:29"><operator pos:start="34:20" pos:end="34:20">&amp;</operator><name pos:start="34:21" pos:end="34:29"><name pos:start="34:21" pos:end="34:23">map</name><index pos:start="34:24" pos:end="34:26">[<expr pos:start="34:25" pos:end="34:25"><name pos:start="34:25" pos:end="34:25">i</name></expr>]</index><index pos:start="34:27" pos:end="34:29">[<expr pos:start="34:28" pos:end="34:28"><name pos:start="34:28" pos:end="34:28">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
  </block_content>}</block></for>
  
  
  <expr_stmt pos:start="39:3" pos:end="39:101"><expr pos:start="39:3" pos:end="39:25"><name pos:start="39:3" pos:end="39:8"><name pos:start="39:3" pos:end="39:3">q</name><index pos:start="39:4" pos:end="39:8">[<expr pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:5">r</name><operator pos:start="39:6" pos:end="39:7">++</operator></expr>]</index></name><operator pos:start="39:9" pos:end="39:9">.</operator><call pos:start="39:10" pos:end="39:25"><name pos:start="39:10" pos:end="39:13">init</name><argument_list pos:start="39:14" pos:end="39:25">(<argument pos:start="39:15" pos:end="39:15"><expr pos:start="39:15" pos:end="39:15"><name pos:start="39:15" pos:end="39:15">x</name></expr></argument>, <argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><name pos:start="39:18" pos:end="39:18">y</name></expr></argument>, <argument pos:start="39:21" pos:end="39:21"><expr pos:start="39:21" pos:end="39:21"><name pos:start="39:21" pos:end="39:21">c</name></expr></argument>, <argument pos:start="39:24" pos:end="39:24"><expr pos:start="39:24" pos:end="39:24"><literal type="number" pos:start="39:24" pos:end="39:24">1</literal></expr></argument>)</argument_list></call></expr><operator pos:start="39:26" pos:end="39:26">,</operator> <expr pos:start="39:28" pos:end="39:50"><name pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:28">q</name><index pos:start="39:29" pos:end="39:33">[<expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:30">r</name><operator pos:start="39:31" pos:end="39:32">++</operator></expr>]</index></name><operator pos:start="39:34" pos:end="39:34">.</operator><call pos:start="39:35" pos:end="39:50"><name pos:start="39:35" pos:end="39:38">init</name><argument_list pos:start="39:39" pos:end="39:50">(<argument pos:start="39:40" pos:end="39:40"><expr pos:start="39:40" pos:end="39:40"><name pos:start="39:40" pos:end="39:40">x</name></expr></argument>, <argument pos:start="39:43" pos:end="39:43"><expr pos:start="39:43" pos:end="39:43"><name pos:start="39:43" pos:end="39:43">y</name></expr></argument>, <argument pos:start="39:46" pos:end="39:46"><expr pos:start="39:46" pos:end="39:46"><name pos:start="39:46" pos:end="39:46">c</name></expr></argument>, <argument pos:start="39:49" pos:end="39:49"><expr pos:start="39:49" pos:end="39:49"><literal type="number" pos:start="39:49" pos:end="39:49">2</literal></expr></argument>)</argument_list></call></expr><operator pos:start="39:51" pos:end="39:51">,</operator> <expr pos:start="39:53" pos:end="39:75"><name pos:start="39:53" pos:end="39:58"><name pos:start="39:53" pos:end="39:53">q</name><index pos:start="39:54" pos:end="39:58">[<expr pos:start="39:55" pos:end="39:57"><name pos:start="39:55" pos:end="39:55">r</name><operator pos:start="39:56" pos:end="39:57">++</operator></expr>]</index></name><operator pos:start="39:59" pos:end="39:59">.</operator><call pos:start="39:60" pos:end="39:75"><name pos:start="39:60" pos:end="39:63">init</name><argument_list pos:start="39:64" pos:end="39:75">(<argument pos:start="39:65" pos:end="39:65"><expr pos:start="39:65" pos:end="39:65"><name pos:start="39:65" pos:end="39:65">x</name></expr></argument>, <argument pos:start="39:68" pos:end="39:68"><expr pos:start="39:68" pos:end="39:68"><name pos:start="39:68" pos:end="39:68">y</name></expr></argument>, <argument pos:start="39:71" pos:end="39:71"><expr pos:start="39:71" pos:end="39:71"><name pos:start="39:71" pos:end="39:71">c</name></expr></argument>, <argument pos:start="39:74" pos:end="39:74"><expr pos:start="39:74" pos:end="39:74"><literal type="number" pos:start="39:74" pos:end="39:74">3</literal></expr></argument>)</argument_list></call></expr><operator pos:start="39:76" pos:end="39:76">,</operator> <expr pos:start="39:78" pos:end="39:100"><name pos:start="39:78" pos:end="39:83"><name pos:start="39:78" pos:end="39:78">q</name><index pos:start="39:79" pos:end="39:83">[<expr pos:start="39:80" pos:end="39:82"><name pos:start="39:80" pos:end="39:80">r</name><operator pos:start="39:81" pos:end="39:82">++</operator></expr>]</index></name><operator pos:start="39:84" pos:end="39:84">.</operator><call pos:start="39:85" pos:end="39:100"><name pos:start="39:85" pos:end="39:88">init</name><argument_list pos:start="39:89" pos:end="39:100">(<argument pos:start="39:90" pos:end="39:90"><expr pos:start="39:90" pos:end="39:90"><name pos:start="39:90" pos:end="39:90">x</name></expr></argument>, <argument pos:start="39:93" pos:end="39:93"><expr pos:start="39:93" pos:end="39:93"><name pos:start="39:93" pos:end="39:93">y</name></expr></argument>, <argument pos:start="39:96" pos:end="39:96"><expr pos:start="39:96" pos:end="39:96"><name pos:start="39:96" pos:end="39:96">c</name></expr></argument>, <argument pos:start="39:99" pos:end="39:99"><expr pos:start="39:99" pos:end="39:99"><literal type="number" pos:start="39:99" pos:end="39:99">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while pos:start="40:3" pos:end="83:3">while <condition pos:start="40:9" pos:end="40:15">(<expr pos:start="40:10" pos:end="40:14"><name pos:start="40:10" pos:end="40:10">l</name> <operator pos:start="40:12" pos:end="40:12">&lt;</operator> <name pos:start="40:14" pos:end="40:14">r</name></expr>)</condition>
  <block pos:start="41:3" pos:end="83:3">{<block_content pos:start="42:5" pos:end="82:5">
    <decl_stmt pos:start="42:5" pos:end="42:84"><decl pos:start="42:5" pos:end="42:19"><type pos:start="42:5" pos:end="42:7"><name pos:start="42:5" pos:end="42:7">int</name></type> <name pos:start="42:9" pos:end="42:10">nx</name> <init pos:start="42:12" pos:end="42:19">= <expr pos:start="42:14" pos:end="42:19"><name pos:start="42:14" pos:end="42:17"><name pos:start="42:14" pos:end="42:14">q</name><index pos:start="42:15" pos:end="42:17">[<expr pos:start="42:16" pos:end="42:16"><name pos:start="42:16" pos:end="42:16">l</name></expr>]</index></name><operator pos:start="42:18" pos:end="42:18">.</operator><name pos:start="42:19" pos:end="42:19">x</name></expr></init></decl>, <decl pos:start="42:22" pos:end="42:32"><type ref="prev" pos:start="42:5" pos:end="42:7"/><name pos:start="42:22" pos:end="42:23">ny</name> <init pos:start="42:25" pos:end="42:32">= <expr pos:start="42:27" pos:end="42:32"><name pos:start="42:27" pos:end="42:30"><name pos:start="42:27" pos:end="42:27">q</name><index pos:start="42:28" pos:end="42:30">[<expr pos:start="42:29" pos:end="42:29"><name pos:start="42:29" pos:end="42:29">l</name></expr>]</index></name><operator pos:start="42:31" pos:end="42:31">.</operator><name pos:start="42:32" pos:end="42:32">y</name></expr></init></decl>, <decl pos:start="42:35" pos:end="42:49"><type ref="prev" pos:start="42:5" pos:end="42:7"/><name pos:start="42:35" pos:end="42:36">ns</name> <init pos:start="42:38" pos:end="42:49">= <expr pos:start="42:40" pos:end="42:49"><name pos:start="42:40" pos:end="42:43"><name pos:start="42:40" pos:end="42:40">q</name><index pos:start="42:41" pos:end="42:43">[<expr pos:start="42:42" pos:end="42:42"><name pos:start="42:42" pos:end="42:42">l</name></expr>]</index></name><operator pos:start="42:44" pos:end="42:44">.</operator><name pos:start="42:45" pos:end="42:49">score</name></expr></init></decl>, <decl pos:start="42:52" pos:end="42:65"><type ref="prev" pos:start="42:5" pos:end="42:7"/><name pos:start="42:52" pos:end="42:53">nf</name> <init pos:start="42:55" pos:end="42:65">= <expr pos:start="42:57" pos:end="42:65"><name pos:start="42:57" pos:end="42:60"><name pos:start="42:57" pos:end="42:57">q</name><index pos:start="42:58" pos:end="42:60">[<expr pos:start="42:59" pos:end="42:59"><name pos:start="42:59" pos:end="42:59">l</name></expr>]</index></name><operator pos:start="42:61" pos:end="42:61">.</operator><name pos:start="42:62" pos:end="42:65">from</name></expr></init></decl>, <decl pos:start="42:68" pos:end="42:83"><type ref="prev" pos:start="42:5" pos:end="42:7"/><name pos:start="42:68" pos:end="42:69">nm</name> <init pos:start="42:71" pos:end="42:83">= <expr pos:start="42:73" pos:end="42:83"><name pos:start="42:73" pos:end="42:83"><name pos:start="42:73" pos:end="42:75">map</name><index pos:start="42:76" pos:end="42:79">[<expr pos:start="42:77" pos:end="42:78"><name pos:start="42:77" pos:end="42:78">nx</name></expr>]</index><index pos:start="42:80" pos:end="42:83">[<expr pos:start="42:81" pos:end="42:82"><name pos:start="42:81" pos:end="42:82">ny</name></expr>]</index></name></expr></init></decl>;</decl_stmt><expr_stmt pos:start="42:85" pos:end="42:88"><expr pos:start="42:85" pos:end="42:87"><name pos:start="42:85" pos:end="42:85">l</name><operator pos:start="42:86" pos:end="42:87">++</operator></expr>;</expr_stmt>
    <if_stmt pos:start="43:5" pos:end="50:5"><if pos:start="43:5" pos:end="46:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:10">ns</name> <operator pos:start="43:12" pos:end="43:13">&lt;=</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition>
    <block pos:start="44:5" pos:end="46:5">{<block_content pos:start="45:7" pos:end="45:15">
      <continue pos:start="45:7" pos:end="45:15">continue;</continue>
    </block_content>}</block></if>
    <if type="elseif" pos:start="47:5" pos:end="50:5">else if <condition pos:start="47:13" pos:end="47:21">( <expr pos:start="47:15" pos:end="47:20"><name pos:start="47:15" pos:end="47:16">ns</name> <operator pos:start="47:18" pos:end="47:18">&gt;</operator> <name pos:start="47:20" pos:end="47:20">c</name></expr>)</condition>
    <block pos:start="48:5" pos:end="50:5">{<block_content pos:start="49:7" pos:end="49:13">
      <expr_stmt pos:start="49:7" pos:end="49:13"><expr pos:start="49:7" pos:end="49:12"><name pos:start="49:7" pos:end="49:8">ns</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <name pos:start="49:12" pos:end="49:12">c</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="51:5" pos:end="82:5"><if pos:start="51:5" pos:end="54:5">if <condition pos:start="51:8" pos:end="51:101">(<expr pos:start="51:9" pos:end="51:100"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:11">nx</name> <operator pos:start="51:13" pos:end="51:14">==</operator> <literal type="number" pos:start="51:16" pos:end="51:16">1</literal> <operator pos:start="51:18" pos:end="51:19">&amp;&amp;</operator> <name pos:start="51:21" pos:end="51:22">ny</name> <operator pos:start="51:24" pos:end="51:25">==</operator> <literal type="number" pos:start="51:27" pos:end="51:27">1</literal><operator pos:start="51:28" pos:end="51:28">)</operator> <operator pos:start="51:30" pos:end="51:31">||</operator> <operator pos:start="51:33" pos:end="51:33">(</operator><name pos:start="51:34" pos:end="51:35">nx</name> <operator pos:start="51:37" pos:end="51:38">==</operator> <name pos:start="51:40" pos:end="51:40">n</name> <operator pos:start="51:42" pos:end="51:43">&amp;&amp;</operator> <name pos:start="51:45" pos:end="51:46">ny</name> <operator pos:start="51:48" pos:end="51:49">==</operator> <literal type="number" pos:start="51:51" pos:end="51:51">1</literal><operator pos:start="51:52" pos:end="51:52">)</operator> <operator pos:start="51:54" pos:end="51:55">||</operator> <operator pos:start="51:57" pos:end="51:57">(</operator><name pos:start="51:58" pos:end="51:59">nx</name> <operator pos:start="51:61" pos:end="51:62">==</operator> <literal type="number" pos:start="51:64" pos:end="51:64">1</literal> <operator pos:start="51:66" pos:end="51:67">&amp;&amp;</operator> <name pos:start="51:69" pos:end="51:70">ny</name> <operator pos:start="51:72" pos:end="51:73">==</operator> <name pos:start="51:75" pos:end="51:75">m</name><operator pos:start="51:76" pos:end="51:76">)</operator> <operator pos:start="51:78" pos:end="51:79">||</operator> <operator pos:start="51:81" pos:end="51:81">(</operator><name pos:start="51:82" pos:end="51:83">nx</name> <operator pos:start="51:85" pos:end="51:86">==</operator> <name pos:start="51:88" pos:end="51:88">n</name> <operator pos:start="51:90" pos:end="51:91">&amp;&amp;</operator> <name pos:start="51:93" pos:end="51:94">ny</name> <operator pos:start="51:96" pos:end="51:97">==</operator> <name pos:start="51:99" pos:end="51:99">m</name><operator pos:start="51:100" pos:end="51:100">)</operator></expr>)</condition>
    <block pos:start="52:5" pos:end="54:5">{<block_content pos:start="53:7" pos:end="53:25">
      <expr_stmt pos:start="53:7" pos:end="53:25"><expr pos:start="53:7" pos:end="53:24"><name pos:start="53:7" pos:end="53:9">ans</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:15">max</name><argument_list pos:start="53:16" pos:end="53:24">(<argument pos:start="53:17" pos:end="53:19"><expr pos:start="53:17" pos:end="53:19"><name pos:start="53:17" pos:end="53:19">ans</name></expr></argument>, <argument pos:start="53:22" pos:end="53:23"><expr pos:start="53:22" pos:end="53:23"><name pos:start="53:22" pos:end="53:23">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="55:5" pos:end="61:5">else if <condition pos:start="55:13" pos:end="55:21">(<expr pos:start="55:14" pos:end="55:20"><name pos:start="55:14" pos:end="55:15">nf</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <literal type="number" pos:start="55:20" pos:end="55:20">1</literal></expr>)</condition>
    <block pos:start="56:5" pos:end="61:5">{<block_content pos:start="57:7" pos:end="60:45">
      <if_stmt pos:start="57:7" pos:end="58:45"><if pos:start="57:7" pos:end="58:45">if <condition pos:start="57:10" pos:end="57:36">(<expr pos:start="57:11" pos:end="57:35"><literal type="number" pos:start="57:11" pos:end="57:11">0</literal> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <name pos:start="57:15" pos:end="57:16">nx</name> <operator pos:start="57:18" pos:end="57:18">+</operator> <literal type="number" pos:start="57:20" pos:end="57:20">1</literal> <operator pos:start="57:22" pos:end="57:23">&amp;&amp;</operator> <name pos:start="57:25" pos:end="57:26">nx</name> <operator pos:start="57:28" pos:end="57:28">+</operator> <literal type="number" pos:start="57:30" pos:end="57:30">1</literal> <operator pos:start="57:32" pos:end="57:33">&lt;=</operator> <name pos:start="57:35" pos:end="57:35">n</name></expr>)</condition><block type="pseudo" pos:start="58:9" pos:end="58:45"><block_content pos:start="58:9" pos:end="58:45">
        <expr_stmt pos:start="58:9" pos:end="58:45"><expr pos:start="58:9" pos:end="58:44"><name pos:start="58:9" pos:end="58:14"><name pos:start="58:9" pos:end="58:9">q</name><index pos:start="58:10" pos:end="58:14">[<expr pos:start="58:11" pos:end="58:13"><name pos:start="58:11" pos:end="58:11">r</name><operator pos:start="58:12" pos:end="58:13">++</operator></expr>]</index></name><operator pos:start="58:15" pos:end="58:15">.</operator><call pos:start="58:16" pos:end="58:44"><name pos:start="58:16" pos:end="58:19">init</name><argument_list pos:start="58:20" pos:end="58:44">(<argument pos:start="58:21" pos:end="58:26"><expr pos:start="58:21" pos:end="58:26"><name pos:start="58:21" pos:end="58:22">nx</name> <operator pos:start="58:24" pos:end="58:24">+</operator> <literal type="number" pos:start="58:26" pos:end="58:26">1</literal></expr></argument>, <argument pos:start="58:29" pos:end="58:30"><expr pos:start="58:29" pos:end="58:30"><name pos:start="58:29" pos:end="58:30">ny</name></expr></argument>, <argument pos:start="58:33" pos:end="58:39"><expr pos:start="58:33" pos:end="58:39"><name pos:start="58:33" pos:end="58:34">ns</name> <operator pos:start="58:36" pos:end="58:36">+</operator> <name pos:start="58:38" pos:end="58:39">nm</name></expr></argument>, <argument pos:start="58:42" pos:end="58:43"><expr pos:start="58:42" pos:end="58:43"><name pos:start="58:42" pos:end="58:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="59:7" pos:end="60:45"><if pos:start="59:7" pos:end="60:45">if <condition pos:start="59:10" pos:end="59:36">(<expr pos:start="59:11" pos:end="59:35"><literal type="number" pos:start="59:11" pos:end="59:11">0</literal> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <name pos:start="59:15" pos:end="59:16">ny</name> <operator pos:start="59:18" pos:end="59:18">+</operator> <literal type="number" pos:start="59:20" pos:end="59:20">1</literal> <operator pos:start="59:22" pos:end="59:23">&amp;&amp;</operator> <name pos:start="59:25" pos:end="59:26">ny</name> <operator pos:start="59:28" pos:end="59:28">+</operator> <literal type="number" pos:start="59:30" pos:end="59:30">1</literal> <operator pos:start="59:32" pos:end="59:33">&lt;=</operator> <name pos:start="59:35" pos:end="59:35">m</name></expr>)</condition><block type="pseudo" pos:start="60:9" pos:end="60:45"><block_content pos:start="60:9" pos:end="60:45">
        <expr_stmt pos:start="60:9" pos:end="60:45"><expr pos:start="60:9" pos:end="60:44"><name pos:start="60:9" pos:end="60:14"><name pos:start="60:9" pos:end="60:9">q</name><index pos:start="60:10" pos:end="60:14">[<expr pos:start="60:11" pos:end="60:13"><name pos:start="60:11" pos:end="60:11">r</name><operator pos:start="60:12" pos:end="60:13">++</operator></expr>]</index></name><operator pos:start="60:15" pos:end="60:15">.</operator><call pos:start="60:16" pos:end="60:44"><name pos:start="60:16" pos:end="60:19">init</name><argument_list pos:start="60:20" pos:end="60:44">(<argument pos:start="60:21" pos:end="60:22"><expr pos:start="60:21" pos:end="60:22"><name pos:start="60:21" pos:end="60:22">nx</name></expr></argument>, <argument pos:start="60:25" pos:end="60:30"><expr pos:start="60:25" pos:end="60:30"><name pos:start="60:25" pos:end="60:26">ny</name> <operator pos:start="60:28" pos:end="60:28">+</operator> <literal type="number" pos:start="60:30" pos:end="60:30">1</literal></expr></argument>, <argument pos:start="60:33" pos:end="60:39"><expr pos:start="60:33" pos:end="60:39"><name pos:start="60:33" pos:end="60:34">ns</name> <operator pos:start="60:36" pos:end="60:36">+</operator> <name pos:start="60:38" pos:end="60:39">nm</name></expr></argument>, <argument pos:start="60:42" pos:end="60:43"><expr pos:start="60:42" pos:end="60:43"><name pos:start="60:42" pos:end="60:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="62:5" pos:end="68:5">else if <condition pos:start="62:13" pos:end="62:21">(<expr pos:start="62:14" pos:end="62:20"><name pos:start="62:14" pos:end="62:15">nf</name> <operator pos:start="62:17" pos:end="62:18">==</operator> <literal type="number" pos:start="62:20" pos:end="62:20">2</literal></expr>)</condition>
    <block pos:start="63:5" pos:end="68:5">{<block_content pos:start="64:7" pos:end="67:45">
      <if_stmt pos:start="64:7" pos:end="65:45"><if pos:start="64:7" pos:end="65:45">if <condition pos:start="64:10" pos:end="64:36">(<expr pos:start="64:11" pos:end="64:35"><literal type="number" pos:start="64:11" pos:end="64:11">0</literal> <operator pos:start="64:13" pos:end="64:13">&lt;</operator> <name pos:start="64:15" pos:end="64:16">nx</name> <operator pos:start="64:18" pos:end="64:18">+</operator> <literal type="number" pos:start="64:20" pos:end="64:20">1</literal> <operator pos:start="64:22" pos:end="64:23">&amp;&amp;</operator> <name pos:start="64:25" pos:end="64:26">nx</name> <operator pos:start="64:28" pos:end="64:28">+</operator> <literal type="number" pos:start="64:30" pos:end="64:30">1</literal> <operator pos:start="64:32" pos:end="64:33">&lt;=</operator> <name pos:start="64:35" pos:end="64:35">n</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:45"><block_content pos:start="65:9" pos:end="65:45">
        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:9">q</name><index pos:start="65:10" pos:end="65:14">[<expr pos:start="65:11" pos:end="65:13"><name pos:start="65:11" pos:end="65:11">r</name><operator pos:start="65:12" pos:end="65:13">++</operator></expr>]</index></name><operator pos:start="65:15" pos:end="65:15">.</operator><call pos:start="65:16" pos:end="65:44"><name pos:start="65:16" pos:end="65:19">init</name><argument_list pos:start="65:20" pos:end="65:44">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:22">nx</name> <operator pos:start="65:24" pos:end="65:24">+</operator> <literal type="number" pos:start="65:26" pos:end="65:26">1</literal></expr></argument>, <argument pos:start="65:29" pos:end="65:30"><expr pos:start="65:29" pos:end="65:30"><name pos:start="65:29" pos:end="65:30">ny</name></expr></argument>, <argument pos:start="65:33" pos:end="65:39"><expr pos:start="65:33" pos:end="65:39"><name pos:start="65:33" pos:end="65:34">ns</name> <operator pos:start="65:36" pos:end="65:36">+</operator> <name pos:start="65:38" pos:end="65:39">nm</name></expr></argument>, <argument pos:start="65:42" pos:end="65:43"><expr pos:start="65:42" pos:end="65:43"><name pos:start="65:42" pos:end="65:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="66:7" pos:end="67:45"><if pos:start="66:7" pos:end="67:45">if <condition pos:start="66:10" pos:end="66:36">(<expr pos:start="66:11" pos:end="66:35"><literal type="number" pos:start="66:11" pos:end="66:11">0</literal> <operator pos:start="66:13" pos:end="66:13">&lt;</operator> <name pos:start="66:15" pos:end="66:16">ny</name> <operator pos:start="66:18" pos:end="66:18">-</operator> <literal type="number" pos:start="66:20" pos:end="66:20">1</literal> <operator pos:start="66:22" pos:end="66:23">&amp;&amp;</operator> <name pos:start="66:25" pos:end="66:26">ny</name> <operator pos:start="66:28" pos:end="66:28">-</operator> <literal type="number" pos:start="66:30" pos:end="66:30">1</literal> <operator pos:start="66:32" pos:end="66:33">&lt;=</operator> <name pos:start="66:35" pos:end="66:35">m</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:45"><block_content pos:start="67:9" pos:end="67:45">
        <expr_stmt pos:start="67:9" pos:end="67:45"><expr pos:start="67:9" pos:end="67:44"><name pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:9">q</name><index pos:start="67:10" pos:end="67:14">[<expr pos:start="67:11" pos:end="67:13"><name pos:start="67:11" pos:end="67:11">r</name><operator pos:start="67:12" pos:end="67:13">++</operator></expr>]</index></name><operator pos:start="67:15" pos:end="67:15">.</operator><call pos:start="67:16" pos:end="67:44"><name pos:start="67:16" pos:end="67:19">init</name><argument_list pos:start="67:20" pos:end="67:44">(<argument pos:start="67:21" pos:end="67:22"><expr pos:start="67:21" pos:end="67:22"><name pos:start="67:21" pos:end="67:22">nx</name></expr></argument>, <argument pos:start="67:25" pos:end="67:30"><expr pos:start="67:25" pos:end="67:30"><name pos:start="67:25" pos:end="67:26">ny</name> <operator pos:start="67:28" pos:end="67:28">-</operator> <literal type="number" pos:start="67:30" pos:end="67:30">1</literal></expr></argument>, <argument pos:start="67:33" pos:end="67:39"><expr pos:start="67:33" pos:end="67:39"><name pos:start="67:33" pos:end="67:34">ns</name> <operator pos:start="67:36" pos:end="67:36">+</operator> <name pos:start="67:38" pos:end="67:39">nm</name></expr></argument>, <argument pos:start="67:42" pos:end="67:43"><expr pos:start="67:42" pos:end="67:43"><name pos:start="67:42" pos:end="67:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="69:5" pos:end="75:5">else if <condition pos:start="69:13" pos:end="69:21">(<expr pos:start="69:14" pos:end="69:20"><name pos:start="69:14" pos:end="69:15">nf</name> <operator pos:start="69:17" pos:end="69:18">==</operator> <literal type="number" pos:start="69:20" pos:end="69:20">3</literal></expr>)</condition>
    <block pos:start="70:5" pos:end="75:5">{<block_content pos:start="71:7" pos:end="74:45">
      <if_stmt pos:start="71:7" pos:end="72:45"><if pos:start="71:7" pos:end="72:45">if <condition pos:start="71:10" pos:end="71:36">(<expr pos:start="71:11" pos:end="71:35"><literal type="number" pos:start="71:11" pos:end="71:11">0</literal> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <name pos:start="71:15" pos:end="71:16">nx</name> <operator pos:start="71:18" pos:end="71:18">-</operator> <literal type="number" pos:start="71:20" pos:end="71:20">1</literal> <operator pos:start="71:22" pos:end="71:23">&amp;&amp;</operator> <name pos:start="71:25" pos:end="71:26">nx</name> <operator pos:start="71:28" pos:end="71:28">-</operator> <literal type="number" pos:start="71:30" pos:end="71:30">1</literal> <operator pos:start="71:32" pos:end="71:33">&lt;=</operator> <name pos:start="71:35" pos:end="71:35">n</name></expr>)</condition><block type="pseudo" pos:start="72:9" pos:end="72:45"><block_content pos:start="72:9" pos:end="72:45">
        <expr_stmt pos:start="72:9" pos:end="72:45"><expr pos:start="72:9" pos:end="72:44"><name pos:start="72:9" pos:end="72:14"><name pos:start="72:9" pos:end="72:9">q</name><index pos:start="72:10" pos:end="72:14">[<expr pos:start="72:11" pos:end="72:13"><name pos:start="72:11" pos:end="72:11">r</name><operator pos:start="72:12" pos:end="72:13">++</operator></expr>]</index></name><operator pos:start="72:15" pos:end="72:15">.</operator><call pos:start="72:16" pos:end="72:44"><name pos:start="72:16" pos:end="72:19">init</name><argument_list pos:start="72:20" pos:end="72:44">(<argument pos:start="72:21" pos:end="72:26"><expr pos:start="72:21" pos:end="72:26"><name pos:start="72:21" pos:end="72:22">nx</name> <operator pos:start="72:24" pos:end="72:24">-</operator> <literal type="number" pos:start="72:26" pos:end="72:26">1</literal></expr></argument>, <argument pos:start="72:29" pos:end="72:30"><expr pos:start="72:29" pos:end="72:30"><name pos:start="72:29" pos:end="72:30">ny</name></expr></argument>, <argument pos:start="72:33" pos:end="72:39"><expr pos:start="72:33" pos:end="72:39"><name pos:start="72:33" pos:end="72:34">ns</name> <operator pos:start="72:36" pos:end="72:36">+</operator> <name pos:start="72:38" pos:end="72:39">nm</name></expr></argument>, <argument pos:start="72:42" pos:end="72:43"><expr pos:start="72:42" pos:end="72:43"><name pos:start="72:42" pos:end="72:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="73:7" pos:end="74:45"><if pos:start="73:7" pos:end="74:45">if <condition pos:start="73:10" pos:end="73:36">(<expr pos:start="73:11" pos:end="73:35"><literal type="number" pos:start="73:11" pos:end="73:11">0</literal> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <name pos:start="73:15" pos:end="73:16">ny</name> <operator pos:start="73:18" pos:end="73:18">+</operator> <literal type="number" pos:start="73:20" pos:end="73:20">1</literal> <operator pos:start="73:22" pos:end="73:23">&amp;&amp;</operator> <name pos:start="73:25" pos:end="73:26">ny</name> <operator pos:start="73:28" pos:end="73:28">+</operator> <literal type="number" pos:start="73:30" pos:end="73:30">1</literal> <operator pos:start="73:32" pos:end="73:33">&lt;=</operator> <name pos:start="73:35" pos:end="73:35">m</name></expr>)</condition><block type="pseudo" pos:start="74:9" pos:end="74:45"><block_content pos:start="74:9" pos:end="74:45">
        <expr_stmt pos:start="74:9" pos:end="74:45"><expr pos:start="74:9" pos:end="74:44"><name pos:start="74:9" pos:end="74:14"><name pos:start="74:9" pos:end="74:9">q</name><index pos:start="74:10" pos:end="74:14">[<expr pos:start="74:11" pos:end="74:13"><name pos:start="74:11" pos:end="74:11">r</name><operator pos:start="74:12" pos:end="74:13">++</operator></expr>]</index></name><operator pos:start="74:15" pos:end="74:15">.</operator><call pos:start="74:16" pos:end="74:44"><name pos:start="74:16" pos:end="74:19">init</name><argument_list pos:start="74:20" pos:end="74:44">(<argument pos:start="74:21" pos:end="74:22"><expr pos:start="74:21" pos:end="74:22"><name pos:start="74:21" pos:end="74:22">nx</name></expr></argument>, <argument pos:start="74:25" pos:end="74:30"><expr pos:start="74:25" pos:end="74:30"><name pos:start="74:25" pos:end="74:26">ny</name> <operator pos:start="74:28" pos:end="74:28">+</operator> <literal type="number" pos:start="74:30" pos:end="74:30">1</literal></expr></argument>, <argument pos:start="74:33" pos:end="74:39"><expr pos:start="74:33" pos:end="74:39"><name pos:start="74:33" pos:end="74:34">ns</name> <operator pos:start="74:36" pos:end="74:36">+</operator> <name pos:start="74:38" pos:end="74:39">nm</name></expr></argument>, <argument pos:start="74:42" pos:end="74:43"><expr pos:start="74:42" pos:end="74:43"><name pos:start="74:42" pos:end="74:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else pos:start="76:5" pos:end="82:5">else
    <block pos:start="77:5" pos:end="82:5">{<block_content pos:start="78:7" pos:end="81:45">
      <if_stmt pos:start="78:7" pos:end="79:45"><if pos:start="78:7" pos:end="79:45">if <condition pos:start="78:10" pos:end="78:36">(<expr pos:start="78:11" pos:end="78:35"><literal type="number" pos:start="78:11" pos:end="78:11">0</literal> <operator pos:start="78:13" pos:end="78:13">&lt;</operator> <name pos:start="78:15" pos:end="78:16">nx</name> <operator pos:start="78:18" pos:end="78:18">-</operator> <literal type="number" pos:start="78:20" pos:end="78:20">1</literal> <operator pos:start="78:22" pos:end="78:23">&amp;&amp;</operator> <name pos:start="78:25" pos:end="78:26">nx</name> <operator pos:start="78:28" pos:end="78:28">-</operator> <literal type="number" pos:start="78:30" pos:end="78:30">1</literal> <operator pos:start="78:32" pos:end="78:33">&lt;=</operator> <name pos:start="78:35" pos:end="78:35">n</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:45"><block_content pos:start="79:9" pos:end="79:45">
        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:9">q</name><index pos:start="79:10" pos:end="79:14">[<expr pos:start="79:11" pos:end="79:13"><name pos:start="79:11" pos:end="79:11">r</name><operator pos:start="79:12" pos:end="79:13">++</operator></expr>]</index></name><operator pos:start="79:15" pos:end="79:15">.</operator><call pos:start="79:16" pos:end="79:44"><name pos:start="79:16" pos:end="79:19">init</name><argument_list pos:start="79:20" pos:end="79:44">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:22">nx</name> <operator pos:start="79:24" pos:end="79:24">-</operator> <literal type="number" pos:start="79:26" pos:end="79:26">1</literal></expr></argument>, <argument pos:start="79:29" pos:end="79:30"><expr pos:start="79:29" pos:end="79:30"><name pos:start="79:29" pos:end="79:30">ny</name></expr></argument>, <argument pos:start="79:33" pos:end="79:39"><expr pos:start="79:33" pos:end="79:39"><name pos:start="79:33" pos:end="79:34">ns</name> <operator pos:start="79:36" pos:end="79:36">+</operator> <name pos:start="79:38" pos:end="79:39">nm</name></expr></argument>, <argument pos:start="79:42" pos:end="79:43"><expr pos:start="79:42" pos:end="79:43"><name pos:start="79:42" pos:end="79:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="80:7" pos:end="81:45"><if pos:start="80:7" pos:end="81:45">if <condition pos:start="80:10" pos:end="80:36">(<expr pos:start="80:11" pos:end="80:35"><literal type="number" pos:start="80:11" pos:end="80:11">0</literal> <operator pos:start="80:13" pos:end="80:13">&lt;</operator> <name pos:start="80:15" pos:end="80:16">ny</name> <operator pos:start="80:18" pos:end="80:18">-</operator> <literal type="number" pos:start="80:20" pos:end="80:20">1</literal> <operator pos:start="80:22" pos:end="80:23">&amp;&amp;</operator> <name pos:start="80:25" pos:end="80:26">ny</name> <operator pos:start="80:28" pos:end="80:28">-</operator> <literal type="number" pos:start="80:30" pos:end="80:30">1</literal> <operator pos:start="80:32" pos:end="80:33">&lt;=</operator> <name pos:start="80:35" pos:end="80:35">n</name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:45"><block_content pos:start="81:9" pos:end="81:45">
        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:9">q</name><index pos:start="81:10" pos:end="81:14">[<expr pos:start="81:11" pos:end="81:13"><name pos:start="81:11" pos:end="81:11">r</name><operator pos:start="81:12" pos:end="81:13">++</operator></expr>]</index></name><operator pos:start="81:15" pos:end="81:15">.</operator><call pos:start="81:16" pos:end="81:44"><name pos:start="81:16" pos:end="81:19">init</name><argument_list pos:start="81:20" pos:end="81:44">(<argument pos:start="81:21" pos:end="81:22"><expr pos:start="81:21" pos:end="81:22"><name pos:start="81:21" pos:end="81:22">nx</name></expr></argument>, <argument pos:start="81:25" pos:end="81:30"><expr pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:26">ny</name> <operator pos:start="81:28" pos:end="81:28">-</operator> <literal type="number" pos:start="81:30" pos:end="81:30">1</literal></expr></argument>, <argument pos:start="81:33" pos:end="81:39"><expr pos:start="81:33" pos:end="81:39"><name pos:start="81:33" pos:end="81:34">ns</name> <operator pos:start="81:36" pos:end="81:36">+</operator> <name pos:start="81:38" pos:end="81:39">nm</name></expr></argument>, <argument pos:start="81:42" pos:end="81:43"><expr pos:start="81:42" pos:end="81:43"><name pos:start="81:42" pos:end="81:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  
  <expr_stmt pos:start="85:3" pos:end="85:22"><expr pos:start="85:3" pos:end="85:21"><call pos:start="85:3" pos:end="85:21"><name pos:start="85:3" pos:end="85:8">printf</name><argument_list pos:start="85:9" pos:end="85:21">(<argument pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:15"><literal type="string" pos:start="85:10" pos:end="85:15">"%d\n"</literal></expr></argument>, <argument pos:start="85:18" pos:end="85:20"><expr pos:start="85:18" pos:end="85:20"><name pos:start="85:18" pos:end="85:20">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return pos:start="86:3" pos:end="86:11">return <expr pos:start="86:10" pos:end="86:10"><literal type="number" pos:start="86:10" pos:end="86:10">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
