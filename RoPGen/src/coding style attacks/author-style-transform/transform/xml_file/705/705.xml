<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/705/705.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:17">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:17">&lt;string&gt;</cpp:file></cpp:include>
<using pos:start="3:1" pos:end="3:20">using <namespace pos:start="3:7" pos:end="3:20">namespace <name pos:start="3:17" pos:end="3:19">std</name>;</namespace></using>
<function pos:start="4:1" pos:end="16:1"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:8">main</name> <parameter_list pos:start="4:10" pos:end="4:11">()</parameter_list> <block pos:start="4:13" pos:end="16:1">{<block_content pos:start="5:5" pos:end="15:13">
    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">string</name></type> <name pos:start="5:12" pos:end="5:12">l</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:20"><expr pos:start="6:5" pos:end="6:19"><call pos:start="6:5" pos:end="6:19"><name pos:start="6:5" pos:end="6:11">getline</name><argument_list pos:start="6:12" pos:end="6:19">(<argument pos:start="6:13" pos:end="6:15"><expr pos:start="6:13" pos:end="6:15"><name pos:start="6:13" pos:end="6:15">cin</name></expr></argument>, <argument pos:start="6:18" pos:end="6:18"><expr pos:start="6:18" pos:end="6:18"><name pos:start="6:18" pos:end="6:18">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">c</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">w</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="8:5" pos:end="14:5">for <control pos:start="8:9" pos:end="8:39">(<init pos:start="8:10" pos:end="8:19"><decl pos:start="8:10" pos:end="8:18"><type pos:start="8:10" pos:end="8:12"><name pos:start="8:10" pos:end="8:12">int</name></type> <name pos:start="8:14" pos:end="8:14">i</name> <init pos:start="8:16" pos:end="8:18">= <expr pos:start="8:18" pos:end="8:18"><literal type="number" pos:start="8:18" pos:end="8:18">0</literal></expr></init></decl>;</init> <condition pos:start="8:21" pos:end="8:34"><expr pos:start="8:21" pos:end="8:33"><name pos:start="8:21" pos:end="8:21">i</name> <operator pos:start="8:23" pos:end="8:24">&lt;=</operator> <call pos:start="8:26" pos:end="8:33"><name pos:start="8:26" pos:end="8:31"><name pos:start="8:26" pos:end="8:26">l</name><operator pos:start="8:27" pos:end="8:27">.</operator><name pos:start="8:28" pos:end="8:31">size</name></name><argument_list pos:start="8:32" pos:end="8:33">()</argument_list></call></expr>;</condition> <incr pos:start="8:36" pos:end="8:38"><expr pos:start="8:36" pos:end="8:38"><name pos:start="8:36" pos:end="8:36">i</name><operator pos:start="8:37" pos:end="8:38">++</operator></expr></incr>)</control><block pos:start="8:40" pos:end="14:5">{<block_content pos:start="9:9" pos:end="13:26">
        <if_stmt pos:start="9:9" pos:end="12:9"><if pos:start="9:9" pos:end="12:9">if <condition pos:start="9:12" pos:end="9:22">(<expr pos:start="9:13" pos:end="9:21"><name pos:start="9:13" pos:end="9:16"><name pos:start="9:13" pos:end="9:13">l</name><index pos:start="9:14" pos:end="9:16">[<expr pos:start="9:15" pos:end="9:15"><name pos:start="9:15" pos:end="9:15">i</name></expr>]</index></name> <operator pos:start="9:18" pos:end="9:19">==</operator> <literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr>)</condition><block pos:start="9:23" pos:end="12:9">{<block_content pos:start="10:13" pos:end="11:18">
            <expr_stmt pos:start="10:13" pos:end="10:18"><expr pos:start="10:13" pos:end="10:17"><name pos:start="10:13" pos:end="10:13">w</name> <operator pos:start="10:15" pos:end="10:15">=</operator> <literal type="number" pos:start="10:17" pos:end="10:17">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="11:13" pos:end="11:18"><expr pos:start="11:13" pos:end="11:17"><name pos:start="11:13" pos:end="11:13">c</name> <operator pos:start="11:15" pos:end="11:15">+</operator> <literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:26"><expr pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:12">cout</name> <operator pos:start="13:14" pos:end="13:15">&lt;&lt;</operator> <name pos:start="13:17" pos:end="13:17">l</name> <operator pos:start="13:19" pos:end="13:20">&lt;&lt;</operator> <name pos:start="13:22" pos:end="13:25">endl</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="15:5" pos:end="15:13">return <expr pos:start="15:12" pos:end="15:12"><literal type="number" pos:start="15:12" pos:end="15:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
