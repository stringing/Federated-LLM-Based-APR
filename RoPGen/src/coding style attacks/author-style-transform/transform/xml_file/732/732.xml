<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/732/732.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:20">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<using pos:start="3:1" pos:end="3:20">using <namespace pos:start="3:7" pos:end="3:20">namespace <name pos:start="3:17" pos:end="3:19">std</name>;</namespace></using>
<decl_stmt pos:start="4:1" pos:end="4:9"><decl pos:start="4:1" pos:end="4:5"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:5">n</name></decl>, <decl pos:start="4:8" pos:end="4:8"><type ref="prev" pos:start="4:1" pos:end="4:3"/><name pos:start="4:8" pos:end="4:8">b</name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:21"><decl pos:start="5:1" pos:end="5:20"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:8">minx</name> <init pos:start="5:10" pos:end="5:20">= <expr pos:start="5:12" pos:end="5:20"><literal type="number" pos:start="5:12" pos:end="5:20">100000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="6:1" pos:end="6:13"><decl pos:start="6:1" pos:end="6:12"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:8">comb</name><index pos:start="6:9" pos:end="6:12">[<expr pos:start="6:10" pos:end="6:11"><literal type="number" pos:start="6:10" pos:end="6:11">30</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="7:1" pos:end="18:1"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:7">dfs</name><parameter_list pos:start="7:8" pos:end="7:23">(<parameter pos:start="7:9" pos:end="7:13"><decl pos:start="7:9" pos:end="7:13"><type pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:13">x</name></decl></parameter>, <parameter pos:start="7:16" pos:end="7:22"><decl pos:start="7:16" pos:end="7:22"><type pos:start="7:16" pos:end="7:22"><name pos:start="7:16" pos:end="7:18">int</name></type> <name pos:start="7:20" pos:end="7:22">sum</name></decl></parameter>)</parameter_list> <block pos:start="7:25" pos:end="18:1">{<block_content pos:start="8:5" pos:end="17:20"> 
    <if_stmt pos:start="8:5" pos:end="10:5"><if pos:start="8:5" pos:end="10:5">if <condition pos:start="8:8" pos:end="8:17">(<expr pos:start="8:9" pos:end="8:16"><name pos:start="8:9" pos:end="8:11">sum</name> <operator pos:start="8:13" pos:end="8:14">&gt;=</operator> <name pos:start="8:16" pos:end="8:16">b</name></expr>)</condition> <block pos:start="8:19" pos:end="10:5">{<block_content pos:start="9:10" pos:end="9:35">
         <return pos:start="9:10" pos:end="9:35">return <expr pos:start="9:17" pos:end="9:34"><call pos:start="9:17" pos:end="9:34"><name pos:start="9:17" pos:end="9:19">min</name><argument_list pos:start="9:20" pos:end="9:34">(<argument pos:start="9:21" pos:end="9:27"><expr pos:start="9:21" pos:end="9:27"><name pos:start="9:21" pos:end="9:23">sum</name> <operator pos:start="9:25" pos:end="9:25">-</operator> <name pos:start="9:27" pos:end="9:27">b</name></expr></argument>, <argument pos:start="9:30" pos:end="9:33"><expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">minx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="11:5" pos:end="13:5"><if pos:start="11:5" pos:end="13:5">if<condition pos:start="11:7" pos:end="11:13">(<expr pos:start="11:8" pos:end="11:12"><name pos:start="11:8" pos:end="11:8">x</name> <operator pos:start="11:10" pos:end="11:10">&gt;</operator> <name pos:start="11:12" pos:end="11:12">n</name></expr>)</condition><block pos:start="11:14" pos:end="13:5">{<block_content pos:start="12:9" pos:end="12:17">
        <return pos:start="12:9" pos:end="12:17">return <expr pos:start="12:16" pos:end="12:16"><literal type="number" pos:start="12:16" pos:end="12:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:14"><decl pos:start="14:5" pos:end="14:13"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:9">i</name> <init pos:start="14:11" pos:end="14:13">= <expr pos:start="14:13" pos:end="14:13"><name pos:start="14:13" pos:end="14:13">x</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:8">minx</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:14">sum</name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:30"><expr pos:start="16:5" pos:end="16:29"><call pos:start="16:5" pos:end="16:29"><name pos:start="16:5" pos:end="16:7">dfs</name><argument_list pos:start="16:8" pos:end="16:29">(<argument pos:start="16:9" pos:end="16:13"><expr pos:start="16:9" pos:end="16:13"><name pos:start="16:9" pos:end="16:9">x</name> <operator pos:start="16:11" pos:end="16:11">+</operator> <literal type="number" pos:start="16:13" pos:end="16:13">1</literal></expr></argument>, <argument pos:start="16:16" pos:end="16:28"><expr pos:start="16:16" pos:end="16:28"><name pos:start="16:16" pos:end="16:18">sum</name> <operator pos:start="16:20" pos:end="16:20">+</operator> <name pos:start="16:22" pos:end="16:28"><name pos:start="16:22" pos:end="16:25">comb</name><index pos:start="16:26" pos:end="16:28">[<expr pos:start="16:27" pos:end="16:27"><name pos:start="16:27" pos:end="16:27">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><call pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:7">dfs</name><argument_list pos:start="17:8" pos:end="17:19">(<argument pos:start="17:9" pos:end="17:13"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">x</name> <operator pos:start="17:11" pos:end="17:11">+</operator> <literal type="number" pos:start="17:13" pos:end="17:13">1</literal></expr></argument>, <argument pos:start="17:16" pos:end="17:18"><expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="19:1" pos:end="28:1"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:8">main</name><parameter_list pos:start="19:9" pos:end="19:10">()</parameter_list><block pos:start="19:11" pos:end="28:1">{<block_content pos:start="20:5" pos:end="27:13">
    <expr_stmt pos:start="20:5" pos:end="20:36"><expr pos:start="20:5" pos:end="20:35"><call pos:start="20:5" pos:end="20:35"><name pos:start="20:5" pos:end="20:11">freopen</name><argument_list pos:start="20:12" pos:end="20:35">(<argument pos:start="20:13" pos:end="20:22"><expr pos:start="20:13" pos:end="20:22"><literal type="string" pos:start="20:13" pos:end="20:22">"shelf.in"</literal></expr></argument>, <argument pos:start="20:25" pos:end="20:27"><expr pos:start="20:25" pos:end="20:27"><literal type="string" pos:start="20:25" pos:end="20:27">"r"</literal></expr></argument>, <argument pos:start="20:30" pos:end="20:34"><expr pos:start="20:30" pos:end="20:34"><name pos:start="20:30" pos:end="20:34">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><call pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:11">freopen</name><argument_list pos:start="21:12" pos:end="21:37">(<argument pos:start="21:13" pos:end="21:23"><expr pos:start="21:13" pos:end="21:23"><literal type="string" pos:start="21:13" pos:end="21:23">"shelf.out"</literal></expr></argument>, <argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><literal type="string" pos:start="21:26" pos:end="21:28">"w"</literal></expr></argument>, <argument pos:start="21:31" pos:end="21:36"><expr pos:start="21:31" pos:end="21:36"><name pos:start="21:31" pos:end="21:36">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:18"><expr pos:start="22:5" pos:end="22:17"><name pos:start="22:5" pos:end="22:7">cin</name> <operator pos:start="22:9" pos:end="22:10">&gt;&gt;</operator> <name pos:start="22:12" pos:end="22:12">n</name> <operator pos:start="22:14" pos:end="22:15">&gt;&gt;</operator> <name pos:start="22:17" pos:end="22:17">b</name></expr>;</expr_stmt>
    <for pos:start="23:5" pos:end="25:5">for<control pos:start="23:8" pos:end="23:31">(<init pos:start="23:9" pos:end="23:18"><decl pos:start="23:9" pos:end="23:17"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">i</name> <init pos:start="23:15" pos:end="23:17">= <expr pos:start="23:17" pos:end="23:17"><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr></init></decl>;</init> <condition pos:start="23:20" pos:end="23:26"><expr pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:20">i</name> <operator pos:start="23:22" pos:end="23:23">&lt;=</operator> <name pos:start="23:25" pos:end="23:25">n</name></expr>;</condition> <incr pos:start="23:28" pos:end="23:30"><expr pos:start="23:28" pos:end="23:30"><name pos:start="23:28" pos:end="23:28">i</name><operator pos:start="23:29" pos:end="23:30">++</operator></expr></incr>)</control><block pos:start="23:32" pos:end="25:5">{<block_content pos:start="24:9" pos:end="24:23">
        <expr_stmt pos:start="24:9" pos:end="24:23"><expr pos:start="24:9" pos:end="24:22"><name pos:start="24:9" pos:end="24:11">cin</name> <operator pos:start="24:13" pos:end="24:14">&gt;&gt;</operator> <name pos:start="24:16" pos:end="24:22"><name pos:start="24:16" pos:end="24:19">comb</name><index pos:start="24:20" pos:end="24:22">[<expr pos:start="24:21" pos:end="24:21"><name pos:start="24:21" pos:end="24:21">i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="26:5" pos:end="26:30"><expr pos:start="26:5" pos:end="26:29"><name pos:start="26:5" pos:end="26:8">cout</name> <operator pos:start="26:10" pos:end="26:11">&lt;&lt;</operator> <call pos:start="26:13" pos:end="26:21"><name pos:start="26:13" pos:end="26:15">dfs</name><argument_list pos:start="26:16" pos:end="26:21">(<argument pos:start="26:17" pos:end="26:17"><expr pos:start="26:17" pos:end="26:17"><literal type="number" pos:start="26:17" pos:end="26:17">1</literal></expr></argument>, <argument pos:start="26:20" pos:end="26:20"><expr pos:start="26:20" pos:end="26:20"><literal type="number" pos:start="26:20" pos:end="26:20">0</literal></expr></argument>)</argument_list></call> <operator pos:start="26:23" pos:end="26:24">&lt;&lt;</operator> <name pos:start="26:26" pos:end="26:29">endl</name></expr>;</expr_stmt>
    <return pos:start="27:5" pos:end="27:13">return <expr pos:start="27:12" pos:end="27:12"><literal type="number" pos:start="27:12" pos:end="27:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
