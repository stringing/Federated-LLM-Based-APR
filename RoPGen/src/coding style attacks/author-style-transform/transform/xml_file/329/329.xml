<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/329/329.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:18">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:19">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:16">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:16">&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:17">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:17">&lt;vector&gt;</cpp:file></cpp:include>

<using pos:start="6:1" pos:end="6:20">using <namespace pos:start="6:7" pos:end="6:20">namespace <name pos:start="6:17" pos:end="6:19">std</name>;</namespace></using>

<decl_stmt pos:start="8:1" pos:end="8:23"><decl pos:start="8:1" pos:end="8:22"><type pos:start="8:1" pos:end="8:9"><specifier pos:start="8:1" pos:end="8:5">const</specifier> <name pos:start="8:7" pos:end="8:9">int</name></type> <name pos:start="8:11" pos:end="8:14">maxm</name> <init pos:start="8:16" pos:end="8:22">= <expr pos:start="8:18" pos:end="8:22"><literal type="number" pos:start="8:18" pos:end="8:22">10003</literal></expr></init></decl>;</decl_stmt>  
<decl_stmt pos:start="9:1" pos:end="9:24"><decl pos:start="9:1" pos:end="9:23"><type pos:start="9:1" pos:end="9:9"><specifier pos:start="9:1" pos:end="9:5">const</specifier> <name pos:start="9:7" pos:end="9:9">int</name></type> <name pos:start="9:11" pos:end="9:14">maxn</name> <init pos:start="9:16" pos:end="9:23">= <expr pos:start="9:18" pos:end="9:23"><literal type="number" pos:start="9:18" pos:end="9:23">100003</literal></expr></init></decl>;</decl_stmt>   

<struct pos:start="11:1" pos:end="14:10">struct <name pos:start="11:8" pos:end="11:11">edge</name> <block pos:start="11:13" pos:end="14:1">{<public type="default" pos:start="12:5" pos:end="13:13">
    <decl_stmt pos:start="12:5" pos:end="12:13"><decl pos:start="12:5" pos:end="12:9"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">u</name></decl>, <decl pos:start="12:12" pos:end="12:12"><type ref="prev" pos:start="12:5" pos:end="12:7"/><name pos:start="12:12" pos:end="12:12">v</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">next</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="14:3" pos:end="14:9"><name pos:start="14:3" pos:end="14:9"><name pos:start="14:3" pos:end="14:3">E</name><index pos:start="14:4" pos:end="14:9">[<expr pos:start="14:5" pos:end="14:8"><name pos:start="14:5" pos:end="14:8">maxm</name></expr>]</index></name></decl>;</struct>

<decl_stmt pos:start="16:1" pos:end="16:21"><decl pos:start="16:1" pos:end="16:11"><type pos:start="16:1" pos:end="16:3"><name pos:start="16:1" pos:end="16:3">int</name></type> <name pos:start="16:5" pos:end="16:11"><name pos:start="16:5" pos:end="16:5">p</name><index pos:start="16:6" pos:end="16:11">[<expr pos:start="16:7" pos:end="16:10"><name pos:start="16:7" pos:end="16:10">maxn</name></expr>]</index></name></decl>, <decl pos:start="16:14" pos:end="16:20"><type ref="prev" pos:start="16:1" pos:end="16:3"/><name pos:start="16:14" pos:end="16:16">eid</name> <init pos:start="16:18" pos:end="16:20">= <expr pos:start="16:20" pos:end="16:20"><literal type="number" pos:start="16:20" pos:end="16:20">0</literal></expr></init></decl>;</decl_stmt>

<function pos:start="18:1" pos:end="21:1"><type pos:start="18:1" pos:end="18:4"><name pos:start="18:1" pos:end="18:4">void</name></type> <name pos:start="18:6" pos:end="18:9">init</name><parameter_list pos:start="18:10" pos:end="18:11">()</parameter_list> <block pos:start="18:13" pos:end="21:1">{<block_content pos:start="19:5" pos:end="20:12">
    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><call pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:10">memset</name><argument_list pos:start="19:11" pos:end="19:28">(<argument pos:start="19:12" pos:end="19:12"><expr pos:start="19:12" pos:end="19:12"><name pos:start="19:12" pos:end="19:12">p</name></expr></argument>, <argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><operator pos:start="19:15" pos:end="19:15">-</operator><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr></argument>, <argument pos:start="19:19" pos:end="19:27"><expr pos:start="19:19" pos:end="19:27"><sizeof pos:start="19:19" pos:end="19:27">sizeof<argument_list pos:start="19:25" pos:end="19:27">(<argument pos:start="19:26" pos:end="19:26"><expr pos:start="19:26" pos:end="19:26"><name pos:start="19:26" pos:end="19:26">p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:12"><expr pos:start="20:5" pos:end="20:11"><name pos:start="20:5" pos:end="20:7">eid</name> <operator pos:start="20:9" pos:end="20:9">=</operator> <literal type="number" pos:start="20:11" pos:end="20:11">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="23:1" pos:end="28:1"><type pos:start="23:1" pos:end="23:4"><name pos:start="23:1" pos:end="23:4">void</name></type> <name pos:start="23:6" pos:end="23:11">insert</name><parameter_list pos:start="23:12" pos:end="23:25">(<parameter pos:start="23:13" pos:end="23:17"><decl pos:start="23:13" pos:end="23:17"><type pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:17">u</name></decl></parameter>, <parameter pos:start="23:20" pos:end="23:24"><decl pos:start="23:20" pos:end="23:24"><type pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:22">int</name></type> <name pos:start="23:24" pos:end="23:24">v</name></decl></parameter>)</parameter_list> <block pos:start="23:27" pos:end="28:1">{<block_content pos:start="24:5" pos:end="27:17">
    <expr_stmt pos:start="24:5" pos:end="24:17"><expr pos:start="24:5" pos:end="24:16"><name pos:start="24:5" pos:end="24:10"><name pos:start="24:5" pos:end="24:5">E</name><index pos:start="24:6" pos:end="24:10">[<expr pos:start="24:7" pos:end="24:9"><name pos:start="24:7" pos:end="24:9">eid</name></expr>]</index></name><operator pos:start="24:11" pos:end="24:11">.</operator><name pos:start="24:12" pos:end="24:12">u</name> <operator pos:start="24:14" pos:end="24:14">=</operator> <name pos:start="24:16" pos:end="24:16">u</name></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:5">E</name><index pos:start="25:6" pos:end="25:10">[<expr pos:start="25:7" pos:end="25:9"><name pos:start="25:7" pos:end="25:9">eid</name></expr>]</index></name><operator pos:start="25:11" pos:end="25:11">.</operator><name pos:start="25:12" pos:end="25:12">v</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:16">v</name></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:23"><expr pos:start="26:5" pos:end="26:22"><name pos:start="26:5" pos:end="26:10"><name pos:start="26:5" pos:end="26:5">E</name><index pos:start="26:6" pos:end="26:10">[<expr pos:start="26:7" pos:end="26:9"><name pos:start="26:7" pos:end="26:9">eid</name></expr>]</index></name><operator pos:start="26:11" pos:end="26:11">.</operator><name pos:start="26:12" pos:end="26:15">next</name> <operator pos:start="26:17" pos:end="26:17">=</operator> <name pos:start="26:19" pos:end="26:22"><name pos:start="26:19" pos:end="26:19">p</name><index pos:start="26:20" pos:end="26:22">[<expr pos:start="26:21" pos:end="26:21"><name pos:start="26:21" pos:end="26:21">u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:5">p</name><index pos:start="27:6" pos:end="27:8">[<expr pos:start="27:7" pos:end="27:7"><name pos:start="27:7" pos:end="27:7">u</name></expr>]</index></name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:14">eid</name><operator pos:start="27:15" pos:end="27:16">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt pos:start="30:1" pos:end="30:14"><decl pos:start="30:1" pos:end="30:13"><type pos:start="30:1" pos:end="30:3"><name pos:start="30:1" pos:end="30:3">int</name></type> <name pos:start="30:5" pos:end="30:9">times</name> <init pos:start="30:11" pos:end="30:13">= <expr pos:start="30:13" pos:end="30:13"><literal type="number" pos:start="30:13" pos:end="30:13">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="31:1" pos:end="31:25"><decl pos:start="31:1" pos:end="31:13"><type pos:start="31:1" pos:end="31:3"><name pos:start="31:1" pos:end="31:3">int</name></type> <name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:7">dfn</name><index pos:start="31:8" pos:end="31:13">[<expr pos:start="31:9" pos:end="31:12"><name pos:start="31:9" pos:end="31:12">maxn</name></expr>]</index></name></decl>, <decl pos:start="31:16" pos:end="31:24"><type ref="prev" pos:start="31:1" pos:end="31:3"/><name pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:18">low</name><index pos:start="31:19" pos:end="31:24">[<expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="32:1" pos:end="32:16"><decl pos:start="32:1" pos:end="32:15"><type pos:start="32:1" pos:end="32:3"><name pos:start="32:1" pos:end="32:3">int</name></type> <name pos:start="32:5" pos:end="32:11">bcc_cnt</name> <init pos:start="32:13" pos:end="32:15">= <expr pos:start="32:15" pos:end="32:15"><literal type="number" pos:start="32:15" pos:end="32:15">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="33:1" pos:end="33:50"><decl pos:start="33:1" pos:end="33:13"><type pos:start="33:1" pos:end="33:3"><name pos:start="33:1" pos:end="33:3">int</name></type> <name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:7">bcc</name><index pos:start="33:8" pos:end="33:13">[<expr pos:start="33:9" pos:end="33:12"><name pos:start="33:9" pos:end="33:12">maxn</name></expr>]</index></name></decl>, <decl pos:start="33:16" pos:end="33:25"><type ref="prev" pos:start="33:1" pos:end="33:3"/><name pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:19">bcce</name><index pos:start="33:20" pos:end="33:25">[<expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">maxn</name></expr>]</index></name></decl>, <decl pos:start="33:28" pos:end="33:37"><type ref="prev" pos:start="33:1" pos:end="33:3"/><name pos:start="33:28" pos:end="33:37"><name pos:start="33:28" pos:end="33:31">bccd</name><index pos:start="33:32" pos:end="33:37">[<expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">maxn</name></expr>]</index></name></decl>, <decl pos:start="33:40" pos:end="33:43"><type ref="prev" pos:start="33:1" pos:end="33:3"/><name pos:start="33:40" pos:end="33:43">ans1</name></decl>, <decl pos:start="33:46" pos:end="33:49"><type ref="prev" pos:start="33:1" pos:end="33:3"/><name pos:start="33:46" pos:end="33:49">ans2</name></decl>;</decl_stmt>
<decl_stmt pos:start="34:1" pos:end="34:13"><decl pos:start="34:1" pos:end="34:12"><type pos:start="34:1" pos:end="34:10"><name pos:start="34:1" pos:end="34:10"><name pos:start="34:1" pos:end="34:5">stack</name><argument_list type="generic" pos:start="34:6" pos:end="34:10">&lt;<argument pos:start="34:7" pos:end="34:9"><expr pos:start="34:7" pos:end="34:9"><name pos:start="34:7" pos:end="34:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="34:12" pos:end="34:12">S</name></decl>;</decl_stmt>

<function pos:start="36:1" pos:end="58:1"><type pos:start="36:1" pos:end="36:4"><name pos:start="36:1" pos:end="36:4">void</name></type> <name pos:start="36:6" pos:end="36:8">dfs</name><parameter_list pos:start="36:9" pos:end="36:23">(<parameter pos:start="36:10" pos:end="36:14"><decl pos:start="36:10" pos:end="36:14"><type pos:start="36:10" pos:end="36:14"><name pos:start="36:10" pos:end="36:12">int</name></type> <name pos:start="36:14" pos:end="36:14">u</name></decl></parameter>, <parameter pos:start="36:17" pos:end="36:22"><decl pos:start="36:17" pos:end="36:22"><type pos:start="36:17" pos:end="36:22"><name pos:start="36:17" pos:end="36:19">int</name></type> <name pos:start="36:21" pos:end="36:22">fa</name></decl></parameter>)</parameter_list> <block pos:start="36:25" pos:end="58:1">{<block_content pos:start="37:5" pos:end="57:5">
    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:7">dfn</name><index pos:start="37:8" pos:end="37:10">[<expr pos:start="37:9" pos:end="37:9"><name pos:start="37:9" pos:end="37:9">u</name></expr>]</index></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:19"><name pos:start="37:14" pos:end="37:16">low</name><index pos:start="37:17" pos:end="37:19">[<expr pos:start="37:18" pos:end="37:18"><name pos:start="37:18" pos:end="37:18">u</name></expr>]</index></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <operator pos:start="37:23" pos:end="37:24">++</operator><name pos:start="37:25" pos:end="37:29">times</name></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:14"><expr pos:start="38:5" pos:end="38:13"><call pos:start="38:5" pos:end="38:13"><name pos:start="38:5" pos:end="38:10"><name pos:start="38:5" pos:end="38:5">S</name><operator pos:start="38:6" pos:end="38:6">.</operator><name pos:start="38:7" pos:end="38:10">push</name></name><argument_list pos:start="38:11" pos:end="38:13">(<argument pos:start="38:12" pos:end="38:12"><expr pos:start="38:12" pos:end="38:12"><name pos:start="38:12" pos:end="38:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="39:5" pos:end="47:5">for<control pos:start="39:8" pos:end="39:45">(<init pos:start="39:9" pos:end="39:21"><decl pos:start="39:9" pos:end="39:20"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:13">i</name> <init pos:start="39:15" pos:end="39:20">= <expr pos:start="39:17" pos:end="39:20"><name pos:start="39:17" pos:end="39:20"><name pos:start="39:17" pos:end="39:17">p</name><index pos:start="39:18" pos:end="39:20">[<expr pos:start="39:19" pos:end="39:19"><name pos:start="39:19" pos:end="39:19">u</name></expr>]</index></name></expr></init></decl>;</init> <condition pos:start="39:23" pos:end="39:30"><expr pos:start="39:23" pos:end="39:29"><name pos:start="39:23" pos:end="39:23">i</name> <operator pos:start="39:25" pos:end="39:26">!=</operator> <operator pos:start="39:28" pos:end="39:28">-</operator><literal type="number" pos:start="39:29" pos:end="39:29">1</literal></expr>;</condition> <incr pos:start="39:32" pos:end="39:44"><expr pos:start="39:32" pos:end="39:44"><name pos:start="39:32" pos:end="39:32">i</name> <operator pos:start="39:34" pos:end="39:34">=</operator> <name pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:36">E</name><index pos:start="39:37" pos:end="39:39">[<expr pos:start="39:38" pos:end="39:38"><name pos:start="39:38" pos:end="39:38">i</name></expr>]</index></name><operator pos:start="39:40" pos:end="39:40">.</operator><name pos:start="39:41" pos:end="39:44">next</name></expr></incr>)</control> <block pos:start="39:47" pos:end="47:5">{<block_content pos:start="40:9" pos:end="46:9">
        <decl_stmt pos:start="40:9" pos:end="40:23"><decl pos:start="40:9" pos:end="40:22"><type pos:start="40:9" pos:end="40:11"><name pos:start="40:9" pos:end="40:11">int</name></type> <name pos:start="40:13" pos:end="40:13">v</name> <init pos:start="40:15" pos:end="40:22">= <expr pos:start="40:17" pos:end="40:22"><name pos:start="40:17" pos:end="40:20"><name pos:start="40:17" pos:end="40:17">E</name><index pos:start="40:18" pos:end="40:20">[<expr pos:start="40:19" pos:end="40:19"><name pos:start="40:19" pos:end="40:19">i</name></expr>]</index></name><operator pos:start="40:21" pos:end="40:21">.</operator><name pos:start="40:22" pos:end="40:22">v</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="41:9" pos:end="46:9"><if pos:start="41:9" pos:end="44:9">if<condition pos:start="41:11" pos:end="41:23">(<expr pos:start="41:12" pos:end="41:22"><name pos:start="41:12" pos:end="41:17"><name pos:start="41:12" pos:end="41:14">dfn</name><index pos:start="41:15" pos:end="41:17">[<expr pos:start="41:16" pos:end="41:16"><name pos:start="41:16" pos:end="41:16">v</name></expr>]</index></name> <operator pos:start="41:19" pos:end="41:20">==</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>)</condition> <block pos:start="41:25" pos:end="44:9">{<block_content pos:start="42:13" pos:end="43:41">
            <expr_stmt pos:start="42:13" pos:end="42:22"><expr pos:start="42:13" pos:end="42:21"><call pos:start="42:13" pos:end="42:21"><name pos:start="42:13" pos:end="42:15">dfs</name><argument_list pos:start="42:16" pos:end="42:21">(<argument pos:start="42:17" pos:end="42:17"><expr pos:start="42:17" pos:end="42:17"><name pos:start="42:17" pos:end="42:17">v</name></expr></argument>, <argument pos:start="42:20" pos:end="42:20"><expr pos:start="42:20" pos:end="42:20"><name pos:start="42:20" pos:end="42:20">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="43:13" pos:end="43:41"><expr pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:18"><name pos:start="43:13" pos:end="43:15">low</name><index pos:start="43:16" pos:end="43:18">[<expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">u</name></expr>]</index></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:40"><name pos:start="43:22" pos:end="43:24">min</name><argument_list pos:start="43:25" pos:end="43:40">(<argument pos:start="43:26" pos:end="43:31"><expr pos:start="43:26" pos:end="43:31"><name pos:start="43:26" pos:end="43:31"><name pos:start="43:26" pos:end="43:28">low</name><index pos:start="43:29" pos:end="43:31">[<expr pos:start="43:30" pos:end="43:30"><name pos:start="43:30" pos:end="43:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><name pos:start="43:34" pos:end="43:39"><name pos:start="43:34" pos:end="43:36">low</name><index pos:start="43:37" pos:end="43:39">[<expr pos:start="43:38" pos:end="43:38"><name pos:start="43:38" pos:end="43:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="44:11" pos:end="46:9">else if<condition pos:start="44:18" pos:end="44:45">(<expr pos:start="44:19" pos:end="44:44"><name pos:start="44:19" pos:end="44:24"><name pos:start="44:19" pos:end="44:21">dfn</name><index pos:start="44:22" pos:end="44:24">[<expr pos:start="44:23" pos:end="44:23"><name pos:start="44:23" pos:end="44:23">v</name></expr>]</index></name> <operator pos:start="44:26" pos:end="44:26">&lt;</operator> <name pos:start="44:28" pos:end="44:33"><name pos:start="44:28" pos:end="44:30">dfn</name><index pos:start="44:31" pos:end="44:33">[<expr pos:start="44:32" pos:end="44:32"><name pos:start="44:32" pos:end="44:32">u</name></expr>]</index></name> <operator pos:start="44:35" pos:end="44:36">&amp;&amp;</operator> <name pos:start="44:38" pos:end="44:38">v</name> <operator pos:start="44:40" pos:end="44:41">!=</operator> <name pos:start="44:43" pos:end="44:44">fa</name></expr>)</condition> <block pos:start="44:47" pos:end="46:9">{<block_content pos:start="45:13" pos:end="45:41">
            <expr_stmt pos:start="45:13" pos:end="45:41"><expr pos:start="45:13" pos:end="45:40"><name pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:15">low</name><index pos:start="45:16" pos:end="45:18">[<expr pos:start="45:17" pos:end="45:17"><name pos:start="45:17" pos:end="45:17">u</name></expr>]</index></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:40"><name pos:start="45:22" pos:end="45:24">min</name><argument_list pos:start="45:25" pos:end="45:40">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:28">low</name><index pos:start="45:29" pos:end="45:31">[<expr pos:start="45:30" pos:end="45:30"><name pos:start="45:30" pos:end="45:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="45:34" pos:end="45:39"><expr pos:start="45:34" pos:end="45:39"><name pos:start="45:34" pos:end="45:39"><name pos:start="45:34" pos:end="45:36">dfn</name><index pos:start="45:37" pos:end="45:39">[<expr pos:start="45:38" pos:end="45:38"><name pos:start="45:38" pos:end="45:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="48:5" pos:end="57:5"><if pos:start="48:5" pos:end="57:5">if<condition pos:start="48:7" pos:end="48:24">(<expr pos:start="48:8" pos:end="48:23"><name pos:start="48:8" pos:end="48:13"><name pos:start="48:8" pos:end="48:10">low</name><index pos:start="48:11" pos:end="48:13">[<expr pos:start="48:12" pos:end="48:12"><name pos:start="48:12" pos:end="48:12">u</name></expr>]</index></name> <operator pos:start="48:15" pos:end="48:16">==</operator> <name pos:start="48:18" pos:end="48:23"><name pos:start="48:18" pos:end="48:20">dfn</name><index pos:start="48:21" pos:end="48:23">[<expr pos:start="48:22" pos:end="48:22"><name pos:start="48:22" pos:end="48:22">u</name></expr>]</index></name></expr>)</condition> <block pos:start="48:26" pos:end="57:5">{<block_content pos:start="49:9" pos:end="56:9">
        <expr_stmt pos:start="49:9" pos:end="49:18"><expr pos:start="49:9" pos:end="49:17"><operator pos:start="49:9" pos:end="49:10">++</operator><name pos:start="49:11" pos:end="49:17">bcc_cnt</name></expr>;</expr_stmt>
        <while pos:start="50:9" pos:end="56:9">while<condition pos:start="50:14" pos:end="50:19">(<expr pos:start="50:15" pos:end="50:18"><literal type="boolean" pos:start="50:15" pos:end="50:18">true</literal></expr>)</condition> <block pos:start="50:21" pos:end="56:9">{<block_content pos:start="51:13" pos:end="55:29">
            <decl_stmt pos:start="51:13" pos:end="51:28"><decl pos:start="51:13" pos:end="51:27"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:17">x</name> <init pos:start="51:19" pos:end="51:27">= <expr pos:start="51:21" pos:end="51:27"><call pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:25"><name pos:start="51:21" pos:end="51:21">S</name><operator pos:start="51:22" pos:end="51:22">.</operator><name pos:start="51:23" pos:end="51:25">top</name></name><argument_list pos:start="51:26" pos:end="51:27">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="52:13" pos:end="52:20"><expr pos:start="52:13" pos:end="52:19"><call pos:start="52:13" pos:end="52:19"><name pos:start="52:13" pos:end="52:17"><name pos:start="52:13" pos:end="52:13">S</name><operator pos:start="52:14" pos:end="52:14">.</operator><name pos:start="52:15" pos:end="52:17">pop</name></name><argument_list pos:start="52:18" pos:end="52:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="53:13" pos:end="53:29"><expr pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:15">bcc</name><index pos:start="53:16" pos:end="53:18">[<expr pos:start="53:17" pos:end="53:17"><name pos:start="53:17" pos:end="53:17">x</name></expr>]</index></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:28">bcc_cnt</name></expr>;</expr_stmt>
            <expr_stmt pos:start="54:13" pos:end="54:28"><expr pos:start="54:13" pos:end="54:27"><name pos:start="54:13" pos:end="54:25"><name pos:start="54:13" pos:end="54:16">bccd</name><index pos:start="54:17" pos:end="54:25">[<expr pos:start="54:18" pos:end="54:24"><name pos:start="54:18" pos:end="54:24">bcc_cnt</name></expr>]</index></name><operator pos:start="54:26" pos:end="54:27">++</operator></expr>;</expr_stmt>
            <if_stmt pos:start="55:13" pos:end="55:29"><if pos:start="55:13" pos:end="55:29">if<condition pos:start="55:15" pos:end="55:22">(<expr pos:start="55:16" pos:end="55:21"><name pos:start="55:16" pos:end="55:16">x</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <name pos:start="55:21" pos:end="55:21">u</name></expr>)</condition><block type="pseudo" pos:start="55:24" pos:end="55:29"><block_content pos:start="55:24" pos:end="55:29"> <break pos:start="55:24" pos:end="55:29">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="60:1" pos:end="94:1"><type pos:start="60:1" pos:end="60:3"><name pos:start="60:1" pos:end="60:3">int</name></type> <name pos:start="60:5" pos:end="60:8">main</name><parameter_list pos:start="60:9" pos:end="60:10">()</parameter_list> <block pos:start="60:12" pos:end="94:1">{<block_content pos:start="61:5" pos:end="93:13">
    <expr_stmt pos:start="61:5" pos:end="61:11"><expr pos:start="61:5" pos:end="61:10"><call pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:8">init</name><argument_list pos:start="61:9" pos:end="61:10">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="62:5" pos:end="62:13"><decl pos:start="62:5" pos:end="62:9"><type pos:start="62:5" pos:end="62:7"><name pos:start="62:5" pos:end="62:7">int</name></type> <name pos:start="62:9" pos:end="62:9">n</name></decl>, <decl pos:start="62:12" pos:end="62:12"><type ref="prev" pos:start="62:5" pos:end="62:7"/><name pos:start="62:12" pos:end="62:12">m</name></decl>;</decl_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:18"><expr pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:7">cin</name> <operator pos:start="63:9" pos:end="63:10">&gt;&gt;</operator> <name pos:start="63:12" pos:end="63:12">n</name> <operator pos:start="63:14" pos:end="63:15">&gt;&gt;</operator> <name pos:start="63:17" pos:end="63:17">m</name></expr>;</expr_stmt>
    <for pos:start="64:5" pos:end="70:5">for <control pos:start="64:9" pos:end="64:31">(<init pos:start="64:10" pos:end="64:19"><decl pos:start="64:10" pos:end="64:18"><type pos:start="64:10" pos:end="64:12"><name pos:start="64:10" pos:end="64:12">int</name></type> <name pos:start="64:14" pos:end="64:14">i</name> <init pos:start="64:16" pos:end="64:18">= <expr pos:start="64:18" pos:end="64:18"><literal type="number" pos:start="64:18" pos:end="64:18">0</literal></expr></init></decl>;</init> <condition pos:start="64:21" pos:end="64:26"><expr pos:start="64:21" pos:end="64:25"><name pos:start="64:21" pos:end="64:21">i</name> <operator pos:start="64:23" pos:end="64:23">&lt;</operator> <name pos:start="64:25" pos:end="64:25">m</name></expr>;</condition> <incr pos:start="64:28" pos:end="64:30"><expr pos:start="64:28" pos:end="64:30"><operator pos:start="64:28" pos:end="64:29">++</operator><name pos:start="64:30" pos:end="64:30">i</name></expr></incr>)</control> <block pos:start="64:33" pos:end="70:5">{<block_content pos:start="65:9" pos:end="69:21">
        <decl_stmt pos:start="65:9" pos:end="65:17"><decl pos:start="65:9" pos:end="65:13"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">u</name></decl>, <decl pos:start="65:16" pos:end="65:16"><type ref="prev" pos:start="65:9" pos:end="65:11"/><name pos:start="65:16" pos:end="65:16">v</name></decl>;</decl_stmt>
        <expr_stmt pos:start="66:9" pos:end="66:22"><expr pos:start="66:9" pos:end="66:21"><name pos:start="66:9" pos:end="66:11">cin</name> <operator pos:start="66:13" pos:end="66:14">&gt;&gt;</operator> <name pos:start="66:16" pos:end="66:16">u</name> <operator pos:start="66:18" pos:end="66:19">&gt;&gt;</operator> <name pos:start="66:21" pos:end="66:21">v</name></expr>;</expr_stmt>
        <expr_stmt pos:start="67:9" pos:end="67:17"><expr pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:9">u</name><operator pos:start="67:10" pos:end="67:11">++</operator></expr><operator pos:start="67:12" pos:end="67:12">,</operator> <expr pos:start="67:14" pos:end="67:16"><name pos:start="67:14" pos:end="67:14">v</name><operator pos:start="67:15" pos:end="67:16">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="68:9" pos:end="68:21"><expr pos:start="68:9" pos:end="68:20"><call pos:start="68:9" pos:end="68:20"><name pos:start="68:9" pos:end="68:14">insert</name><argument_list pos:start="68:15" pos:end="68:20">(<argument pos:start="68:16" pos:end="68:16"><expr pos:start="68:16" pos:end="68:16"><name pos:start="68:16" pos:end="68:16">u</name></expr></argument>, <argument pos:start="68:19" pos:end="68:19"><expr pos:start="68:19" pos:end="68:19"><name pos:start="68:19" pos:end="68:19">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="69:9" pos:end="69:21"><expr pos:start="69:9" pos:end="69:20"><call pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:14">insert</name><argument_list pos:start="69:15" pos:end="69:20">(<argument pos:start="69:16" pos:end="69:16"><expr pos:start="69:16" pos:end="69:16"><name pos:start="69:16" pos:end="69:16">v</name></expr></argument>, <argument pos:start="69:19" pos:end="69:19"><expr pos:start="69:19" pos:end="69:19"><name pos:start="69:19" pos:end="69:19">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="71:5" pos:end="71:32"><expr pos:start="71:5" pos:end="71:31"><call pos:start="71:5" pos:end="71:31"><name pos:start="71:5" pos:end="71:10">memset</name><argument_list pos:start="71:11" pos:end="71:31">(<argument pos:start="71:12" pos:end="71:14"><expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">dfn</name></expr></argument>, <argument pos:start="71:17" pos:end="71:17"><expr pos:start="71:17" pos:end="71:17"><literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr></argument>, <argument pos:start="71:20" pos:end="71:30"><expr pos:start="71:20" pos:end="71:30"><sizeof pos:start="71:20" pos:end="71:30">sizeof<argument_list pos:start="71:26" pos:end="71:30">(<argument pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><name pos:start="71:27" pos:end="71:29">dfn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="72:5" pos:end="72:24"><expr pos:start="72:5" pos:end="72:23"><name pos:start="72:5" pos:end="72:9">times</name> <operator pos:start="72:11" pos:end="72:11">=</operator> <name pos:start="72:13" pos:end="72:19">bcc_cnt</name> <operator pos:start="72:21" pos:end="72:21">=</operator> <literal type="number" pos:start="72:23" pos:end="72:23">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:15"><expr pos:start="73:5" pos:end="73:14"><call pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:7">dfs</name><argument_list pos:start="73:8" pos:end="73:14">(<argument pos:start="73:9" pos:end="73:9"><expr pos:start="73:9" pos:end="73:9"><literal type="number" pos:start="73:9" pos:end="73:9">1</literal></expr></argument>, <argument pos:start="73:12" pos:end="73:13"><expr pos:start="73:12" pos:end="73:13"><operator pos:start="73:12" pos:end="73:12">-</operator><literal type="number" pos:start="73:13" pos:end="73:13">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for pos:start="75:5" pos:end="85:5">for<control pos:start="75:8" pos:end="75:38">(<init pos:start="75:9" pos:end="75:18"><decl pos:start="75:9" pos:end="75:17"><type pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">int</name></type> <name pos:start="75:13" pos:end="75:13">i</name> <init pos:start="75:15" pos:end="75:17">= <expr pos:start="75:17" pos:end="75:17"><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr></init></decl>;</init> <condition pos:start="75:20" pos:end="75:30"><expr pos:start="75:20" pos:end="75:29"><name pos:start="75:20" pos:end="75:20">i</name> <operator pos:start="75:22" pos:end="75:23">&lt;=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">2</literal> <operator pos:start="75:27" pos:end="75:27">*</operator> <name pos:start="75:29" pos:end="75:29">m</name></expr>;</condition> <incr pos:start="75:32" pos:end="75:37"><expr pos:start="75:32" pos:end="75:37"><name pos:start="75:32" pos:end="75:32">i</name> <operator pos:start="75:34" pos:end="75:35">+=</operator> <literal type="number" pos:start="75:37" pos:end="75:37">2</literal></expr></incr>)</control> <block pos:start="75:40" pos:end="85:5">{<block_content pos:start="76:9" pos:end="82:9">
        <decl_stmt pos:start="76:9" pos:end="76:28"><decl pos:start="76:9" pos:end="76:27"><type pos:start="76:9" pos:end="76:11"><name pos:start="76:9" pos:end="76:11">int</name></type> <name pos:start="76:13" pos:end="76:13">x</name> <init pos:start="76:15" pos:end="76:27">= <expr pos:start="76:17" pos:end="76:27"><name pos:start="76:17" pos:end="76:27"><name pos:start="76:17" pos:end="76:19">bcc</name><index pos:start="76:20" pos:end="76:27">[<expr pos:start="76:21" pos:end="76:26"><name pos:start="76:21" pos:end="76:24"><name pos:start="76:21" pos:end="76:21">E</name><index pos:start="76:22" pos:end="76:24">[<expr pos:start="76:23" pos:end="76:23"><name pos:start="76:23" pos:end="76:23">i</name></expr>]</index></name><operator pos:start="76:25" pos:end="76:25">.</operator><name pos:start="76:26" pos:end="76:26">u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="77:9" pos:end="77:28"><decl pos:start="77:9" pos:end="77:27"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">y</name> <init pos:start="77:15" pos:end="77:27">= <expr pos:start="77:17" pos:end="77:27"><name pos:start="77:17" pos:end="77:27"><name pos:start="77:17" pos:end="77:19">bcc</name><index pos:start="77:20" pos:end="77:27">[<expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:24"><name pos:start="77:21" pos:end="77:21">E</name><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">i</name></expr>]</index></name><operator pos:start="77:25" pos:end="77:25">.</operator><name pos:start="77:26" pos:end="77:26">v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="78:9" pos:end="82:9"><if pos:start="78:9" pos:end="80:9">if<condition pos:start="78:11" pos:end="78:18">(<expr pos:start="78:12" pos:end="78:17"><name pos:start="78:12" pos:end="78:12">x</name> <operator pos:start="78:14" pos:end="78:15">==</operator> <name pos:start="78:17" pos:end="78:17">y</name></expr>)</condition> <block pos:start="78:20" pos:end="80:9">{<block_content pos:start="79:13" pos:end="79:22">
            <expr_stmt pos:start="79:13" pos:end="79:22"><expr pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:16">bcce</name><index pos:start="79:17" pos:end="79:19">[<expr pos:start="79:18" pos:end="79:18"><name pos:start="79:18" pos:end="79:18">x</name></expr>]</index></name><operator pos:start="79:20" pos:end="79:21">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="80:11" pos:end="82:9">else <block pos:start="80:16" pos:end="82:9">{<block_content pos:start="81:13" pos:end="81:19">
            <expr_stmt pos:start="81:13" pos:end="81:19"><expr pos:start="81:13" pos:end="81:18"><name pos:start="81:13" pos:end="81:16">ans1</name><operator pos:start="81:17" pos:end="81:18">++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        
        
    </block_content>}</block></for>
    <for pos:start="86:5" pos:end="91:5">for<control pos:start="86:8" pos:end="86:37">(<init pos:start="86:9" pos:end="86:18"><decl pos:start="86:9" pos:end="86:17"><type pos:start="86:9" pos:end="86:11"><name pos:start="86:9" pos:end="86:11">int</name></type> <name pos:start="86:13" pos:end="86:13">i</name> <init pos:start="86:15" pos:end="86:17">= <expr pos:start="86:17" pos:end="86:17"><literal type="number" pos:start="86:17" pos:end="86:17">1</literal></expr></init></decl>;</init> <condition pos:start="86:20" pos:end="86:32"><expr pos:start="86:20" pos:end="86:31"><name pos:start="86:20" pos:end="86:20">i</name> <operator pos:start="86:22" pos:end="86:23">&lt;=</operator> <name pos:start="86:25" pos:end="86:31">bcc_cnt</name></expr>;</condition> <incr pos:start="86:34" pos:end="86:36"><expr pos:start="86:34" pos:end="86:36"><name pos:start="86:34" pos:end="86:34">i</name><operator pos:start="86:35" pos:end="86:36">++</operator></expr></incr>)</control> <block pos:start="86:39" pos:end="91:5">{<block_content pos:start="88:9" pos:end="90:9">
        
        <if_stmt pos:start="88:9" pos:end="90:9"><if pos:start="88:9" pos:end="90:9">if<condition pos:start="88:11" pos:end="88:29">(<expr pos:start="88:12" pos:end="88:28"><name pos:start="88:12" pos:end="88:18"><name pos:start="88:12" pos:end="88:15">bcce</name><index pos:start="88:16" pos:end="88:18">[<expr pos:start="88:17" pos:end="88:17"><name pos:start="88:17" pos:end="88:17">i</name></expr>]</index></name> <operator pos:start="88:20" pos:end="88:20">&gt;</operator> <name pos:start="88:22" pos:end="88:28"><name pos:start="88:22" pos:end="88:25">bccd</name><index pos:start="88:26" pos:end="88:28">[<expr pos:start="88:27" pos:end="88:27"><name pos:start="88:27" pos:end="88:27">i</name></expr>]</index></name></expr>)</condition> <block pos:start="88:31" pos:end="90:9">{<block_content pos:start="89:13" pos:end="89:28">
            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:16">ans2</name> <operator pos:start="89:18" pos:end="89:19">+=</operator> <name pos:start="89:21" pos:end="89:27"><name pos:start="89:21" pos:end="89:24">bcce</name><index pos:start="89:25" pos:end="89:27">[<expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="92:5" pos:end="92:40"><expr pos:start="92:5" pos:end="92:39"><name pos:start="92:5" pos:end="92:8">cout</name> <operator pos:start="92:10" pos:end="92:11">&lt;&lt;</operator> <name pos:start="92:13" pos:end="92:16">ans1</name> <operator pos:start="92:18" pos:end="92:19">&lt;&lt;</operator> <literal type="char" pos:start="92:21" pos:end="92:23">' '</literal> <operator pos:start="92:25" pos:end="92:26">&lt;&lt;</operator> <name pos:start="92:28" pos:end="92:31">ans2</name> <operator pos:start="92:33" pos:end="92:34">&lt;&lt;</operator> <literal type="char" pos:start="92:36" pos:end="92:39">'\n'</literal></expr>;</expr_stmt>
    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
