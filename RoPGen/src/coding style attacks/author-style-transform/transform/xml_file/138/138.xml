<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/138/138.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:16">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:16">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:17">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive><cpp:file pos:start="3:9" pos:end="3:17">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:15">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive><cpp:file pos:start="4:9" pos:end="4:15">&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive><cpp:file pos:start="5:9" pos:end="5:13">&lt;set&gt;</cpp:file></cpp:include>
<cpp:include pos:start="6:1" pos:end="6:13">#<cpp:directive pos:start="6:2" pos:end="6:8">include</cpp:directive><cpp:file pos:start="6:9" pos:end="6:13">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:start="7:1" pos:end="7:19">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive><cpp:file pos:start="7:9" pos:end="7:19">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="8:1" pos:end="8:15">#<cpp:directive pos:start="8:2" pos:end="8:8">include</cpp:directive><cpp:file pos:start="8:9" pos:end="8:15">&lt;queue&gt;</cpp:file></cpp:include>
<cpp:define pos:start="9:1" pos:end="9:45">#<cpp:directive pos:start="9:2" pos:end="9:7">define</cpp:directive> <cpp:macro pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:12">_for</name><parameter_list pos:start="9:13" pos:end="9:19">(<parameter pos:start="9:14" pos:end="9:14"><type pos:start="9:14" pos:end="9:14"><name pos:start="9:14" pos:end="9:14">i</name></type></parameter>,<parameter pos:start="9:16" pos:end="9:16"><type pos:start="9:16" pos:end="9:16"><name pos:start="9:16" pos:end="9:16">a</name></type></parameter>,<parameter pos:start="9:18" pos:end="9:18"><type pos:start="9:18" pos:end="9:18"><name pos:start="9:18" pos:end="9:18">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="9:21" pos:end="9:45">for (int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<using pos:start="10:1" pos:end="10:20">using <namespace pos:start="10:7" pos:end="10:20">namespace <name pos:start="10:17" pos:end="10:19">std</name>;</namespace></using>
<decl_stmt pos:start="11:1" pos:end="11:37"><decl pos:start="11:1" pos:end="11:15"><type pos:start="11:1" pos:end="11:9"><specifier pos:start="11:1" pos:end="11:5">const</specifier> <name pos:start="11:7" pos:end="11:9">int</name></type> <name pos:start="11:11" pos:end="11:11">N</name><init pos:start="11:12" pos:end="11:15">=<expr pos:start="11:13" pos:end="11:15"><literal type="number" pos:start="11:13" pos:end="11:15">105</literal></expr></init></decl>,<decl pos:start="11:17" pos:end="11:21"><type ref="prev" pos:start="11:1" pos:end="11:9"/><name pos:start="11:17" pos:end="11:17">M</name><init pos:start="11:18" pos:end="11:21">=<expr pos:start="11:19" pos:end="11:21"><literal type="number" pos:start="11:19" pos:end="11:21">210</literal></expr></init></decl>,<decl pos:start="11:23" pos:end="11:36"><type ref="prev" pos:start="11:1" pos:end="11:9"/><name pos:start="11:23" pos:end="11:25">INF</name><init pos:start="11:26" pos:end="11:36">=<expr pos:start="11:27" pos:end="11:36"><literal type="number" pos:start="11:27" pos:end="11:36">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="12:1" pos:end="12:8"><decl pos:start="12:1" pos:end="12:5"><type pos:start="12:1" pos:end="12:3"><name pos:start="12:1" pos:end="12:3">int</name></type> <name pos:start="12:5" pos:end="12:5">n</name></decl>,<decl pos:start="12:7" pos:end="12:7"><type ref="prev" pos:start="12:1" pos:end="12:3"/><name pos:start="12:7" pos:end="12:7">m</name></decl>;</decl_stmt>
<decl_stmt pos:start="13:1" pos:end="13:12"><decl pos:start="13:1" pos:end="13:11"><type pos:start="13:1" pos:end="13:6"><name pos:start="13:1" pos:end="13:6">string</name></type> <name pos:start="13:8" pos:end="13:11"><name pos:start="13:8" pos:end="13:8">a</name><index pos:start="13:9" pos:end="13:11">[<expr pos:start="13:10" pos:end="13:10"><name pos:start="13:10" pos:end="13:10">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="14:1" pos:end="14:24"><decl pos:start="14:1" pos:end="14:8"><type pos:start="14:1" pos:end="14:3"><name pos:start="14:1" pos:end="14:3">int</name></type> <name pos:start="14:5" pos:end="14:8"><name pos:start="14:5" pos:end="14:5">e</name><index pos:start="14:6" pos:end="14:8">[<expr pos:start="14:7" pos:end="14:7"><name pos:start="14:7" pos:end="14:7">M</name></expr>]</index></name></decl>,<decl pos:start="14:10" pos:end="14:14"><type ref="prev" pos:start="14:1" pos:end="14:3"/><name pos:start="14:10" pos:end="14:14"><name pos:start="14:10" pos:end="14:11">ne</name><index pos:start="14:12" pos:end="14:14">[<expr pos:start="14:13" pos:end="14:13"><name pos:start="14:13" pos:end="14:13">M</name></expr>]</index></name></decl>,<decl pos:start="14:16" pos:end="14:19"><type ref="prev" pos:start="14:1" pos:end="14:3"/><name pos:start="14:16" pos:end="14:19"><name pos:start="14:16" pos:end="14:16">h</name><index pos:start="14:17" pos:end="14:19">[<expr pos:start="14:18" pos:end="14:18"><name pos:start="14:18" pos:end="14:18">N</name></expr>]</index></name></decl>,<decl pos:start="14:21" pos:end="14:23"><type ref="prev" pos:start="14:1" pos:end="14:3"/><name pos:start="14:21" pos:end="14:23">idx</name></decl>;</decl_stmt>
<decl_stmt pos:start="15:1" pos:end="15:40"><decl pos:start="15:1" pos:end="15:12"><type pos:start="15:1" pos:end="15:3"><name pos:start="15:1" pos:end="15:3">int</name></type> <name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:9">new_h</name><index pos:start="15:10" pos:end="15:12">[<expr pos:start="15:11" pos:end="15:11"><name pos:start="15:11" pos:end="15:11">N</name></expr>]</index></name></decl>,<decl pos:start="15:14" pos:end="15:21"><type ref="prev" pos:start="15:1" pos:end="15:3"/><name pos:start="15:14" pos:end="15:21"><name pos:start="15:14" pos:end="15:18">new_e</name><index pos:start="15:19" pos:end="15:21">[<expr pos:start="15:20" pos:end="15:20"><name pos:start="15:20" pos:end="15:20">M</name></expr>]</index></name></decl>,<decl pos:start="15:23" pos:end="15:31"><type ref="prev" pos:start="15:1" pos:end="15:3"/><name pos:start="15:23" pos:end="15:31"><name pos:start="15:23" pos:end="15:28">new_ne</name><index pos:start="15:29" pos:end="15:31">[<expr pos:start="15:30" pos:end="15:30"><name pos:start="15:30" pos:end="15:30">M</name></expr>]</index></name></decl>,<decl pos:start="15:33" pos:end="15:39"><type ref="prev" pos:start="15:1" pos:end="15:3"/><name pos:start="15:33" pos:end="15:39">new_idx</name></decl>;</decl_stmt>
<decl_stmt pos:start="16:1" pos:end="16:16"><decl pos:start="16:1" pos:end="16:15"><type pos:start="16:1" pos:end="16:12"><name pos:start="16:1" pos:end="16:12"><name pos:start="16:1" pos:end="16:3">map</name><argument_list type="generic" pos:start="16:4" pos:end="16:12">&lt;<argument pos:start="16:5" pos:end="16:7"><expr pos:start="16:5" pos:end="16:7"><name pos:start="16:5" pos:end="16:7">int</name></expr></argument>,<argument pos:start="16:9" pos:end="16:11"><expr pos:start="16:9" pos:end="16:11"><name pos:start="16:9" pos:end="16:11">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="16:14" pos:end="16:15">mp</name></decl>;</decl_stmt>
<decl_stmt pos:start="17:1" pos:end="17:12"><decl pos:start="17:1" pos:end="17:11"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:9">times</name><init pos:start="17:10" pos:end="17:11">=<expr pos:start="17:11" pos:end="17:11"><literal type="number" pos:start="17:11" pos:end="17:11">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="18:1" pos:end="18:18"><decl pos:start="18:1" pos:end="18:10"><type pos:start="18:1" pos:end="18:3"><name pos:start="18:1" pos:end="18:3">int</name></type> <name pos:start="18:5" pos:end="18:10"><name pos:start="18:5" pos:end="18:7">dfn</name><index pos:start="18:8" pos:end="18:10">[<expr pos:start="18:9" pos:end="18:9"><name pos:start="18:9" pos:end="18:9">N</name></expr>]</index></name></decl>,<decl pos:start="18:12" pos:end="18:17"><type ref="prev" pos:start="18:1" pos:end="18:3"/><name pos:start="18:12" pos:end="18:17"><name pos:start="18:12" pos:end="18:14">low</name><index pos:start="18:15" pos:end="18:17">[<expr pos:start="18:16" pos:end="18:16"><name pos:start="18:16" pos:end="18:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="19:1" pos:end="19:14"><decl pos:start="19:1" pos:end="19:13"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:11">scc_cnt</name><init pos:start="19:12" pos:end="19:13">=<expr pos:start="19:13" pos:end="19:13"><literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="20:1" pos:end="20:18"><decl pos:start="20:1" pos:end="20:12"><type pos:start="20:1" pos:end="20:3"><name pos:start="20:1" pos:end="20:3">int</name></type> <name pos:start="20:5" pos:end="20:12"><name pos:start="20:5" pos:end="20:9">sccno</name><index pos:start="20:10" pos:end="20:12">[<expr pos:start="20:11" pos:end="20:11"><name pos:start="20:11" pos:end="20:11">N</name></expr>]</index></name></decl>,<decl pos:start="20:14" pos:end="20:17"><type ref="prev" pos:start="20:1" pos:end="20:3"/><name pos:start="20:14" pos:end="20:17"><name pos:start="20:14" pos:end="20:14">w</name><index pos:start="20:15" pos:end="20:17">[<expr pos:start="20:16" pos:end="20:16"><name pos:start="20:16" pos:end="20:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="21:1" pos:end="21:16"><decl pos:start="21:1" pos:end="21:15"><type pos:start="21:1" pos:end="21:8"><name pos:start="21:1" pos:end="21:8"><name pos:start="21:1" pos:end="21:3">set</name><argument_list type="generic" pos:start="21:4" pos:end="21:8">&lt;<argument pos:start="21:5" pos:end="21:7"><expr pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="21:10" pos:end="21:15"><name pos:start="21:10" pos:end="21:12">scc</name><index pos:start="21:13" pos:end="21:15">[<expr pos:start="21:14" pos:end="21:14"><name pos:start="21:14" pos:end="21:14">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="22:1" pos:end="22:13"><decl pos:start="22:1" pos:end="22:12"><type pos:start="22:1" pos:end="22:10"><name pos:start="22:1" pos:end="22:10"><name pos:start="22:1" pos:end="22:5">stack</name><argument_list type="generic" pos:start="22:6" pos:end="22:10">&lt;<argument pos:start="22:7" pos:end="22:9"><expr pos:start="22:7" pos:end="22:9"><name pos:start="22:7" pos:end="22:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="22:12" pos:end="22:12">S</name></decl>;</decl_stmt>
<decl_stmt pos:start="23:1" pos:end="23:9"><decl pos:start="23:1" pos:end="23:8"><type pos:start="23:1" pos:end="23:3"><name pos:start="23:1" pos:end="23:3">int</name></type> <name pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:5">f</name><index pos:start="23:6" pos:end="23:8">[<expr pos:start="23:7" pos:end="23:7"><name pos:start="23:7" pos:end="23:7">N</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="24:1" pos:end="28:1"><type pos:start="24:1" pos:end="24:11"><specifier pos:start="24:1" pos:end="24:6">inline</specifier> <name pos:start="24:8" pos:end="24:11">void</name></type> <name pos:start="24:13" pos:end="24:18">c_plus</name><parameter_list pos:start="24:19" pos:end="24:20">()</parameter_list><block pos:start="24:21" pos:end="28:1">{<block_content pos:start="25:5" pos:end="27:16">
    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><call pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:7">ios</name><operator pos:start="25:8" pos:end="25:9">::</operator><name pos:start="25:10" pos:end="25:24">sync_with_stdio</name></name><argument_list pos:start="25:25" pos:end="25:31">(<argument pos:start="25:26" pos:end="25:30"><expr pos:start="25:26" pos:end="25:30"><literal type="boolean" pos:start="25:26" pos:end="25:30">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:15"><expr pos:start="26:5" pos:end="26:14"><call pos:start="26:5" pos:end="26:14"><name pos:start="26:5" pos:end="26:11"><name pos:start="26:5" pos:end="26:7">cin</name><operator pos:start="26:8" pos:end="26:8">.</operator><name pos:start="26:9" pos:end="26:11">tie</name></name><argument_list pos:start="26:12" pos:end="26:14">(<argument pos:start="26:13" pos:end="26:13"><expr pos:start="26:13" pos:end="26:13"><literal type="number" pos:start="26:13" pos:end="26:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><call pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:8">cout</name><operator pos:start="27:9" pos:end="27:9">.</operator><name pos:start="27:10" pos:end="27:12">tie</name></name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="29:1" pos:end="31:1"><type pos:start="29:1" pos:end="29:10"><specifier pos:start="29:1" pos:end="29:6">inline</specifier> <name pos:start="29:8" pos:end="29:10">int</name></type> <name pos:start="29:12" pos:end="29:12">c</name><parameter_list pos:start="29:13" pos:end="29:25">(<parameter pos:start="29:14" pos:end="29:18"><decl pos:start="29:14" pos:end="29:18"><type pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:16">int</name></type> <name pos:start="29:18" pos:end="29:18">x</name></decl></parameter>,<parameter pos:start="29:20" pos:end="29:24"><decl pos:start="29:20" pos:end="29:24"><type pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:22">int</name></type> <name pos:start="29:24" pos:end="29:24">y</name></decl></parameter>)</parameter_list><block pos:start="29:26" pos:end="31:1">{<block_content pos:start="30:5" pos:end="30:19">
    <return pos:start="30:5" pos:end="30:19">return <expr pos:start="30:12" pos:end="30:18"><name pos:start="30:12" pos:end="30:12">m</name><operator pos:start="30:13" pos:end="30:13">*</operator><name pos:start="30:14" pos:end="30:14">x</name><operator pos:start="30:15" pos:end="30:15">+</operator><name pos:start="30:16" pos:end="30:16">y</name><operator pos:start="30:17" pos:end="30:17">+</operator><literal type="number" pos:start="30:18" pos:end="30:18">1</literal></expr>;</return>
</block_content>}</block></function>
<function pos:start="32:1" pos:end="35:1"><type pos:start="32:1" pos:end="32:11"><specifier pos:start="32:1" pos:end="32:6">inline</specifier> <name pos:start="32:8" pos:end="32:11">void</name></type> <name pos:start="32:13" pos:end="32:16">init</name><parameter_list pos:start="32:17" pos:end="32:18">()</parameter_list><block pos:start="32:19" pos:end="35:1">{<block_content pos:start="33:5" pos:end="34:27">
    <expr_stmt pos:start="33:5" pos:end="33:10"><expr pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:7">idx</name><operator pos:start="33:8" pos:end="33:8">=</operator><literal type="number" pos:start="33:9" pos:end="33:9">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:27"><expr pos:start="34:5" pos:end="34:26"><call pos:start="34:5" pos:end="34:26"><name pos:start="34:5" pos:end="34:10">memset</name><argument_list pos:start="34:11" pos:end="34:26">(<argument pos:start="34:12" pos:end="34:12"><expr pos:start="34:12" pos:end="34:12"><name pos:start="34:12" pos:end="34:12">h</name></expr></argument>,<argument pos:start="34:14" pos:end="34:15"><expr pos:start="34:14" pos:end="34:15"><operator pos:start="34:14" pos:end="34:14">-</operator><literal type="number" pos:start="34:15" pos:end="34:15">1</literal></expr></argument>,<argument pos:start="34:17" pos:end="34:25"><expr pos:start="34:17" pos:end="34:25"><sizeof pos:start="34:17" pos:end="34:25">sizeof<argument_list pos:start="34:23" pos:end="34:25">(<argument pos:start="34:24" pos:end="34:24"><expr pos:start="34:24" pos:end="34:24"><name pos:start="34:24" pos:end="34:24">h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="36:1" pos:end="40:1"><type pos:start="36:1" pos:end="36:11"><specifier pos:start="36:1" pos:end="36:6">inline</specifier> <name pos:start="36:8" pos:end="36:11">void</name></type> <name pos:start="36:13" pos:end="36:15">add</name><parameter_list pos:start="36:16" pos:end="36:28">(<parameter pos:start="36:17" pos:end="36:21"><decl pos:start="36:17" pos:end="36:21"><type pos:start="36:17" pos:end="36:21"><name pos:start="36:17" pos:end="36:19">int</name></type> <name pos:start="36:21" pos:end="36:21">a</name></decl></parameter>,<parameter pos:start="36:23" pos:end="36:27"><decl pos:start="36:23" pos:end="36:27"><type pos:start="36:23" pos:end="36:27"><name pos:start="36:23" pos:end="36:25">int</name></type> <name pos:start="36:27" pos:end="36:27">b</name></decl></parameter>)</parameter_list><block pos:start="36:29" pos:end="40:1">{<block_content pos:start="37:5" pos:end="39:15">
    <expr_stmt pos:start="37:5" pos:end="37:13"><expr pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:5">e</name><index pos:start="37:6" pos:end="37:10">[<expr pos:start="37:7" pos:end="37:9"><name pos:start="37:7" pos:end="37:9">idx</name></expr>]</index></name><operator pos:start="37:11" pos:end="37:11">=</operator><name pos:start="37:12" pos:end="37:12">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:17"><expr pos:start="38:5" pos:end="38:16"><name pos:start="38:5" pos:end="38:11"><name pos:start="38:5" pos:end="38:6">ne</name><index pos:start="38:7" pos:end="38:11">[<expr pos:start="38:8" pos:end="38:10"><name pos:start="38:8" pos:end="38:10">idx</name></expr>]</index></name><operator pos:start="38:12" pos:end="38:12">=</operator><name pos:start="38:13" pos:end="38:16"><name pos:start="38:13" pos:end="38:13">h</name><index pos:start="38:14" pos:end="38:16">[<expr pos:start="38:15" pos:end="38:15"><name pos:start="38:15" pos:end="38:15">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:5">h</name><index pos:start="39:6" pos:end="39:8">[<expr pos:start="39:7" pos:end="39:7"><name pos:start="39:7" pos:end="39:7">a</name></expr>]</index></name><operator pos:start="39:9" pos:end="39:9">=</operator><name pos:start="39:10" pos:end="39:12">idx</name><operator pos:start="39:13" pos:end="39:14">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="41:1" pos:end="44:1"><type pos:start="41:1" pos:end="41:11"><specifier pos:start="41:1" pos:end="41:6">inline</specifier> <name pos:start="41:8" pos:end="41:11">void</name></type> <name pos:start="41:13" pos:end="41:20">new_init</name><parameter_list pos:start="41:21" pos:end="41:22">()</parameter_list><block pos:start="41:23" pos:end="44:1">{<block_content pos:start="42:5" pos:end="43:35">
    <expr_stmt pos:start="42:5" pos:end="42:14"><expr pos:start="42:5" pos:end="42:13"><name pos:start="42:5" pos:end="42:11">new_idx</name><operator pos:start="42:12" pos:end="42:12">=</operator><literal type="number" pos:start="42:13" pos:end="42:13">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><call pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:10">memset</name><argument_list pos:start="43:11" pos:end="43:34">(<argument pos:start="43:12" pos:end="43:16"><expr pos:start="43:12" pos:end="43:16"><name pos:start="43:12" pos:end="43:16">new_h</name></expr></argument>,<argument pos:start="43:18" pos:end="43:19"><expr pos:start="43:18" pos:end="43:19"><operator pos:start="43:18" pos:end="43:18">-</operator><literal type="number" pos:start="43:19" pos:end="43:19">1</literal></expr></argument>,<argument pos:start="43:21" pos:end="43:33"><expr pos:start="43:21" pos:end="43:33"><sizeof pos:start="43:21" pos:end="43:33">sizeof<argument_list pos:start="43:27" pos:end="43:33">(<argument pos:start="43:28" pos:end="43:32"><expr pos:start="43:28" pos:end="43:32"><name pos:start="43:28" pos:end="43:32">new_h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="45:1" pos:end="49:1"><type pos:start="45:1" pos:end="45:11"><specifier pos:start="45:1" pos:end="45:6">inline</specifier> <name pos:start="45:8" pos:end="45:11">void</name></type> <name pos:start="45:13" pos:end="45:19">new_add</name><parameter_list pos:start="45:20" pos:end="45:32">(<parameter pos:start="45:21" pos:end="45:25"><decl pos:start="45:21" pos:end="45:25"><type pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:23">int</name></type> <name pos:start="45:25" pos:end="45:25">a</name></decl></parameter>,<parameter pos:start="45:27" pos:end="45:31"><decl pos:start="45:27" pos:end="45:31"><type pos:start="45:27" pos:end="45:31"><name pos:start="45:27" pos:end="45:29">int</name></type> <name pos:start="45:31" pos:end="45:31">b</name></decl></parameter>)</parameter_list><block pos:start="45:33" pos:end="49:1">{<block_content pos:start="46:5" pos:end="48:23">
    <expr_stmt pos:start="46:5" pos:end="46:21"><expr pos:start="46:5" pos:end="46:20"><name pos:start="46:5" pos:end="46:18"><name pos:start="46:5" pos:end="46:9">new_e</name><index pos:start="46:10" pos:end="46:18">[<expr pos:start="46:11" pos:end="46:17"><name pos:start="46:11" pos:end="46:17">new_idx</name></expr>]</index></name><operator pos:start="46:19" pos:end="46:19">=</operator><name pos:start="46:20" pos:end="46:20">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:10">new_ne</name><index pos:start="47:11" pos:end="47:19">[<expr pos:start="47:12" pos:end="47:18"><name pos:start="47:12" pos:end="47:18">new_idx</name></expr>]</index></name><operator pos:start="47:20" pos:end="47:20">=</operator><name pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:25">new_h</name><index pos:start="47:26" pos:end="47:28">[<expr pos:start="47:27" pos:end="47:27"><name pos:start="47:27" pos:end="47:27">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:23"><expr pos:start="48:5" pos:end="48:22"><name pos:start="48:5" pos:end="48:12"><name pos:start="48:5" pos:end="48:9">new_h</name><index pos:start="48:10" pos:end="48:12">[<expr pos:start="48:11" pos:end="48:11"><name pos:start="48:11" pos:end="48:11">a</name></expr>]</index></name><operator pos:start="48:13" pos:end="48:13">=</operator><name pos:start="48:14" pos:end="48:20">new_idx</name><operator pos:start="48:21" pos:end="48:22">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="50:1" pos:end="75:1"><type pos:start="50:1" pos:end="50:4"><name pos:start="50:1" pos:end="50:4">void</name></type> <name pos:start="50:6" pos:end="50:11">tarjan</name><parameter_list pos:start="50:12" pos:end="50:18">(<parameter pos:start="50:13" pos:end="50:17"><decl pos:start="50:13" pos:end="50:17"><type pos:start="50:13" pos:end="50:15"><name pos:start="50:13" pos:end="50:15">int</name></type> <name pos:start="50:17" pos:end="50:17">u</name></decl></parameter>)</parameter_list><block pos:start="50:19" pos:end="75:1">{<block_content pos:start="51:5" pos:end="74:5">
    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:7">dfn</name><index pos:start="51:8" pos:end="51:10">[<expr pos:start="51:9" pos:end="51:9"><name pos:start="51:9" pos:end="51:9">u</name></expr>]</index></name><operator pos:start="51:11" pos:end="51:11">=</operator><name pos:start="51:12" pos:end="51:17"><name pos:start="51:12" pos:end="51:14">low</name><index pos:start="51:15" pos:end="51:17">[<expr pos:start="51:16" pos:end="51:16"><name pos:start="51:16" pos:end="51:16">u</name></expr>]</index></name><operator pos:start="51:18" pos:end="51:18">=</operator><operator pos:start="51:19" pos:end="51:20">++</operator><name pos:start="51:21" pos:end="51:25">times</name></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:14"><expr pos:start="52:5" pos:end="52:13"><call pos:start="52:5" pos:end="52:13"><name pos:start="52:5" pos:end="52:10"><name pos:start="52:5" pos:end="52:5">S</name><operator pos:start="52:6" pos:end="52:6">.</operator><name pos:start="52:7" pos:end="52:10">push</name></name><argument_list pos:start="52:11" pos:end="52:13">(<argument pos:start="52:12" pos:end="52:12"><expr pos:start="52:12" pos:end="52:12"><name pos:start="52:12" pos:end="52:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="53:5" pos:end="61:5">for <control pos:start="53:9" pos:end="53:31">(<init pos:start="53:10" pos:end="53:20"><decl pos:start="53:10" pos:end="53:19"><type pos:start="53:10" pos:end="53:12"><name pos:start="53:10" pos:end="53:12">int</name></type> <name pos:start="53:14" pos:end="53:14">i</name><init pos:start="53:15" pos:end="53:19">=<expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:16">h</name><index pos:start="53:17" pos:end="53:19">[<expr pos:start="53:18" pos:end="53:18"><name pos:start="53:18" pos:end="53:18">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:22"><operator pos:start="53:21" pos:end="53:21">~</operator><name pos:start="53:22" pos:end="53:22">i</name></expr>;</condition><incr pos:start="53:24" pos:end="53:30"><expr pos:start="53:24" pos:end="53:30"><name pos:start="53:24" pos:end="53:24">i</name><operator pos:start="53:25" pos:end="53:25">=</operator><name pos:start="53:26" pos:end="53:30"><name pos:start="53:26" pos:end="53:27">ne</name><index pos:start="53:28" pos:end="53:30">[<expr pos:start="53:29" pos:end="53:29"><name pos:start="53:29" pos:end="53:29">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="53:32" pos:end="61:5">{<block_content pos:start="54:9" pos:end="60:9">
        <decl_stmt pos:start="54:9" pos:end="54:19"><decl pos:start="54:9" pos:end="54:18"><type pos:start="54:9" pos:end="54:11"><name pos:start="54:9" pos:end="54:11">int</name></type> <name pos:start="54:13" pos:end="54:13">v</name><init pos:start="54:14" pos:end="54:18">=<expr pos:start="54:15" pos:end="54:18"><name pos:start="54:15" pos:end="54:18"><name pos:start="54:15" pos:end="54:15">e</name><index pos:start="54:16" pos:end="54:18">[<expr pos:start="54:17" pos:end="54:17"><name pos:start="54:17" pos:end="54:17">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="55:9" pos:end="60:9"><if pos:start="55:9" pos:end="58:9">if <condition pos:start="55:12" pos:end="55:22">(<expr pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:15">dfn</name><index pos:start="55:16" pos:end="55:18">[<expr pos:start="55:17" pos:end="55:17"><name pos:start="55:17" pos:end="55:17">v</name></expr>]</index></name><operator pos:start="55:19" pos:end="55:20">==</operator><literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr>)</condition><block pos:start="55:23" pos:end="58:9">{<block_content pos:start="56:13" pos:end="57:38">
            <expr_stmt pos:start="56:13" pos:end="56:22"><expr pos:start="56:13" pos:end="56:21"><call pos:start="56:13" pos:end="56:21"><name pos:start="56:13" pos:end="56:18">tarjan</name><argument_list pos:start="56:19" pos:end="56:21">(<argument pos:start="56:20" pos:end="56:20"><expr pos:start="56:20" pos:end="56:20"><name pos:start="56:20" pos:end="56:20">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:38"><expr pos:start="57:13" pos:end="57:37"><name pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:15">low</name><index pos:start="57:16" pos:end="57:18">[<expr pos:start="57:17" pos:end="57:17"><name pos:start="57:17" pos:end="57:17">u</name></expr>]</index></name><operator pos:start="57:19" pos:end="57:19">=</operator><call pos:start="57:20" pos:end="57:37"><name pos:start="57:20" pos:end="57:22">min</name><argument_list pos:start="57:23" pos:end="57:37">(<argument pos:start="57:24" pos:end="57:29"><expr pos:start="57:24" pos:end="57:29"><name pos:start="57:24" pos:end="57:29"><name pos:start="57:24" pos:end="57:26">low</name><index pos:start="57:27" pos:end="57:29">[<expr pos:start="57:28" pos:end="57:28"><name pos:start="57:28" pos:end="57:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="57:31" pos:end="57:36"><expr pos:start="57:31" pos:end="57:36"><name pos:start="57:31" pos:end="57:36"><name pos:start="57:31" pos:end="57:33">low</name><index pos:start="57:34" pos:end="57:36">[<expr pos:start="57:35" pos:end="57:35"><name pos:start="57:35" pos:end="57:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="58:10" pos:end="60:9">else if <condition pos:start="58:18" pos:end="58:28">(<expr pos:start="58:19" pos:end="58:27"><operator pos:start="58:19" pos:end="58:19">!</operator><name pos:start="58:20" pos:end="58:27"><name pos:start="58:20" pos:end="58:24">sccno</name><index pos:start="58:25" pos:end="58:27">[<expr pos:start="58:26" pos:end="58:26"><name pos:start="58:26" pos:end="58:26">v</name></expr>]</index></name></expr>)</condition><block pos:start="58:29" pos:end="60:9">{<block_content pos:start="59:13" pos:end="59:38">
            <expr_stmt pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:15">low</name><index pos:start="59:16" pos:end="59:18">[<expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">u</name></expr>]</index></name><operator pos:start="59:19" pos:end="59:19">=</operator><call pos:start="59:20" pos:end="59:37"><name pos:start="59:20" pos:end="59:22">min</name><argument_list pos:start="59:23" pos:end="59:37">(<argument pos:start="59:24" pos:end="59:29"><expr pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:26">low</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="59:31" pos:end="59:36"><expr pos:start="59:31" pos:end="59:36"><name pos:start="59:31" pos:end="59:36"><name pos:start="59:31" pos:end="59:33">dfn</name><index pos:start="59:34" pos:end="59:36">[<expr pos:start="59:35" pos:end="59:35"><name pos:start="59:35" pos:end="59:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="62:5" pos:end="74:5"><if pos:start="62:5" pos:end="74:5">if <condition pos:start="62:8" pos:end="62:23">(<expr pos:start="62:9" pos:end="62:22"><name pos:start="62:9" pos:end="62:14"><name pos:start="62:9" pos:end="62:11">low</name><index pos:start="62:12" pos:end="62:14">[<expr pos:start="62:13" pos:end="62:13"><name pos:start="62:13" pos:end="62:13">u</name></expr>]</index></name><operator pos:start="62:15" pos:end="62:16">==</operator><name pos:start="62:17" pos:end="62:22"><name pos:start="62:17" pos:end="62:19">dfn</name><index pos:start="62:20" pos:end="62:22">[<expr pos:start="62:21" pos:end="62:21"><name pos:start="62:21" pos:end="62:21">u</name></expr>]</index></name></expr>)</condition><block pos:start="62:24" pos:end="74:5">{<block_content pos:start="63:9" pos:end="73:9">
        <expr_stmt pos:start="63:9" pos:end="63:18"><expr pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:15">scc_cnt</name><operator pos:start="63:16" pos:end="63:17">++</operator></expr>;</expr_stmt>
        <while pos:start="64:9" pos:end="73:9">while <condition pos:start="64:15" pos:end="64:20">(<expr pos:start="64:16" pos:end="64:19"><literal type="boolean" pos:start="64:16" pos:end="64:19">true</literal></expr>)</condition><block pos:start="64:21" pos:end="73:9">{<block_content pos:start="65:13" pos:end="72:13">
            <decl_stmt pos:start="65:13" pos:end="65:26"><decl pos:start="65:13" pos:end="65:25"><type pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">int</name></type> <name pos:start="65:17" pos:end="65:17">x</name><init pos:start="65:18" pos:end="65:25">=<expr pos:start="65:19" pos:end="65:25"><call pos:start="65:19" pos:end="65:25"><name pos:start="65:19" pos:end="65:23"><name pos:start="65:19" pos:end="65:19">S</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:23">top</name></name><argument_list pos:start="65:24" pos:end="65:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:20"><expr pos:start="66:13" pos:end="66:19"><call pos:start="66:13" pos:end="66:19"><name pos:start="66:13" pos:end="66:17"><name pos:start="66:13" pos:end="66:13">S</name><operator pos:start="66:14" pos:end="66:14">.</operator><name pos:start="66:15" pos:end="66:17">pop</name></name><argument_list pos:start="66:18" pos:end="66:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:15">scc</name><index pos:start="67:16" pos:end="67:24">[<expr pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:23">scc_cnt</name></expr>]</index></name><operator pos:start="67:25" pos:end="67:25">.</operator><call pos:start="67:26" pos:end="67:34"><name pos:start="67:26" pos:end="67:31">insert</name><argument_list pos:start="67:32" pos:end="67:34">(<argument pos:start="67:33" pos:end="67:33"><expr pos:start="67:33" pos:end="67:33"><name pos:start="67:33" pos:end="67:33">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:29"><expr pos:start="68:13" pos:end="68:28"><name pos:start="68:13" pos:end="68:20"><name pos:start="68:13" pos:end="68:17">sccno</name><index pos:start="68:18" pos:end="68:20">[<expr pos:start="68:19" pos:end="68:19"><name pos:start="68:19" pos:end="68:19">x</name></expr>]</index></name><operator pos:start="68:21" pos:end="68:21">=</operator><name pos:start="68:22" pos:end="68:28">scc_cnt</name></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:13">w</name><index pos:start="69:14" pos:end="69:22">[<expr pos:start="69:15" pos:end="69:21"><name pos:start="69:15" pos:end="69:21">scc_cnt</name></expr>]</index></name><operator pos:start="69:23" pos:end="69:24">+=</operator><name pos:start="69:25" pos:end="69:29"><name pos:start="69:25" pos:end="69:26">mp</name><index pos:start="69:27" pos:end="69:29">[<expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">x</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="70:13" pos:end="72:13"><if pos:start="70:13" pos:end="72:13">if <condition pos:start="70:16" pos:end="70:21">(<expr pos:start="70:17" pos:end="70:20"><name pos:start="70:17" pos:end="70:17">x</name><operator pos:start="70:18" pos:end="70:19">==</operator><name pos:start="70:20" pos:end="70:20">u</name></expr>)</condition><block pos:start="70:22" pos:end="72:13">{<block_content pos:start="71:17" pos:end="71:22">
                <break pos:start="71:17" pos:end="71:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function pos:start="76:1" pos:end="86:1"><type pos:start="76:1" pos:end="76:3"><name pos:start="76:1" pos:end="76:3">int</name></type> <name pos:start="76:5" pos:end="76:7">dfs</name><parameter_list pos:start="76:8" pos:end="76:14">(<parameter pos:start="76:9" pos:end="76:13"><decl pos:start="76:9" pos:end="76:13"><type pos:start="76:9" pos:end="76:11"><name pos:start="76:9" pos:end="76:11">int</name></type> <name pos:start="76:13" pos:end="76:13">u</name></decl></parameter>)</parameter_list><block pos:start="76:15" pos:end="86:1">{<block_content pos:start="77:5" pos:end="85:32">
    <if_stmt pos:start="77:5" pos:end="79:5"><if pos:start="77:5" pos:end="79:5">if <condition pos:start="77:8" pos:end="77:17">(<expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:9">f</name><index pos:start="77:10" pos:end="77:12">[<expr pos:start="77:11" pos:end="77:11"><name pos:start="77:11" pos:end="77:11">u</name></expr>]</index></name><operator pos:start="77:13" pos:end="77:14">!=</operator><operator pos:start="77:15" pos:end="77:15">-</operator><literal type="number" pos:start="77:16" pos:end="77:16">1</literal></expr>)</condition><block pos:start="77:18" pos:end="79:5">{<block_content pos:start="78:9" pos:end="78:20">
        <return pos:start="78:9" pos:end="78:20">return <expr pos:start="78:16" pos:end="78:19"><name pos:start="78:16" pos:end="78:19"><name pos:start="78:16" pos:end="78:16">f</name><index pos:start="78:17" pos:end="78:19">[<expr pos:start="78:18" pos:end="78:18"><name pos:start="78:18" pos:end="78:18">u</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="80:5" pos:end="80:14"><decl pos:start="80:5" pos:end="80:13"><type pos:start="80:5" pos:end="80:7"><name pos:start="80:5" pos:end="80:7">int</name></type> <name pos:start="80:9" pos:end="80:11">res</name><init pos:start="80:12" pos:end="80:13">=<expr pos:start="80:13" pos:end="80:13"><literal type="number" pos:start="80:13" pos:end="80:13">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="81:5" pos:end="84:5">for <control pos:start="81:9" pos:end="81:39">(<init pos:start="81:10" pos:end="81:24"><decl pos:start="81:10" pos:end="81:23"><type pos:start="81:10" pos:end="81:12"><name pos:start="81:10" pos:end="81:12">int</name></type> <name pos:start="81:14" pos:end="81:14">i</name><init pos:start="81:15" pos:end="81:23">=<expr pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:20">new_h</name><index pos:start="81:21" pos:end="81:23">[<expr pos:start="81:22" pos:end="81:22"><name pos:start="81:22" pos:end="81:22">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:26"><operator pos:start="81:25" pos:end="81:25">~</operator><name pos:start="81:26" pos:end="81:26">i</name></expr>;</condition><incr pos:start="81:28" pos:end="81:38"><expr pos:start="81:28" pos:end="81:38"><name pos:start="81:28" pos:end="81:28">i</name><operator pos:start="81:29" pos:end="81:29">=</operator><name pos:start="81:30" pos:end="81:38"><name pos:start="81:30" pos:end="81:35">new_ne</name><index pos:start="81:36" pos:end="81:38">[<expr pos:start="81:37" pos:end="81:37"><name pos:start="81:37" pos:end="81:37">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="81:40" pos:end="84:5">{<block_content pos:start="82:9" pos:end="83:28">
        <decl_stmt pos:start="82:9" pos:end="82:23"><decl pos:start="82:9" pos:end="82:22"><type pos:start="82:9" pos:end="82:11"><name pos:start="82:9" pos:end="82:11">int</name></type> <name pos:start="82:13" pos:end="82:13">v</name><init pos:start="82:14" pos:end="82:22">=<expr pos:start="82:15" pos:end="82:22"><name pos:start="82:15" pos:end="82:22"><name pos:start="82:15" pos:end="82:19">new_e</name><index pos:start="82:20" pos:end="82:22">[<expr pos:start="82:21" pos:end="82:21"><name pos:start="82:21" pos:end="82:21">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:11">res</name><operator pos:start="83:12" pos:end="83:12">=</operator><call pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:15">max</name><argument_list pos:start="83:16" pos:end="83:27">(<argument pos:start="83:17" pos:end="83:19"><expr pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:19">res</name></expr></argument>,<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><call pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:23">dfs</name><argument_list pos:start="83:24" pos:end="83:26">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="85:5" pos:end="85:32">return <expr pos:start="85:12" pos:end="85:31"><name pos:start="85:12" pos:end="85:15"><name pos:start="85:12" pos:end="85:12">f</name><index pos:start="85:13" pos:end="85:15">[<expr pos:start="85:14" pos:end="85:14"><name pos:start="85:14" pos:end="85:14">u</name></expr>]</index></name><operator pos:start="85:16" pos:end="85:16">=</operator><name pos:start="85:17" pos:end="85:19">res</name><operator pos:start="85:20" pos:end="85:20">+</operator><name pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:21">w</name><index pos:start="85:22" pos:end="85:31">[<expr pos:start="85:23" pos:end="85:30"><name pos:start="85:23" pos:end="85:30"><name pos:start="85:23" pos:end="85:27">sccno</name><index pos:start="85:28" pos:end="85:30">[<expr pos:start="85:29" pos:end="85:29"><name pos:start="85:29" pos:end="85:29">u</name></expr>]</index></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function pos:start="87:1" pos:end="141:1"><type pos:start="87:1" pos:end="87:3"><name pos:start="87:1" pos:end="87:3">int</name></type> <name pos:start="87:5" pos:end="87:8">main</name><parameter_list pos:start="87:9" pos:end="87:10">()</parameter_list><block pos:start="87:11" pos:end="141:1">{<block_content pos:start="88:5" pos:end="140:13">
    <expr_stmt pos:start="88:5" pos:end="88:13"><expr pos:start="88:5" pos:end="88:12"><call pos:start="88:5" pos:end="88:12"><name pos:start="88:5" pos:end="88:10">c_plus</name><argument_list pos:start="88:11" pos:end="88:12">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:11"><expr pos:start="89:5" pos:end="89:10"><call pos:start="89:5" pos:end="89:10"><name pos:start="89:5" pos:end="89:8">init</name><argument_list pos:start="89:9" pos:end="89:10">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:14"><expr pos:start="90:5" pos:end="90:13"><name pos:start="90:5" pos:end="90:7">cin</name><operator pos:start="90:8" pos:end="90:9">&gt;&gt;</operator><name pos:start="90:10" pos:end="90:10">n</name><operator pos:start="90:11" pos:end="90:12">&gt;&gt;</operator><name pos:start="90:13" pos:end="90:13">m</name></expr>;</expr_stmt>
    <macro pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:8">_for</name><argument_list pos:start="91:9" pos:end="91:15">(<argument pos:start="91:10" pos:end="91:10">i</argument>,<argument pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></argument>,<argument pos:start="91:14" pos:end="91:14">n</argument>)</argument_list></macro><block pos:start="91:16" pos:end="93:5">{<block_content pos:start="92:9" pos:end="92:18">
        <expr_stmt pos:start="92:9" pos:end="92:18"><expr pos:start="92:9" pos:end="92:17"><name pos:start="92:9" pos:end="92:11">cin</name><operator pos:start="92:12" pos:end="92:13">&gt;&gt;</operator><name pos:start="92:14" pos:end="92:17"><name pos:start="92:14" pos:end="92:14">a</name><index pos:start="92:15" pos:end="92:17">[<expr pos:start="92:16" pos:end="92:16"><name pos:start="92:16" pos:end="92:16">i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt pos:start="94:5" pos:end="94:14"><decl pos:start="94:5" pos:end="94:10"><type pos:start="94:5" pos:end="94:7"><name pos:start="94:5" pos:end="94:7">int</name></type> <name pos:start="94:9" pos:end="94:10">ex</name></decl>,<decl pos:start="94:12" pos:end="94:13"><type ref="prev" pos:start="94:5" pos:end="94:7"/><name pos:start="94:12" pos:end="94:13">ey</name></decl>;</decl_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:16"><expr pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:7">cin</name><operator pos:start="95:8" pos:end="95:9">&gt;&gt;</operator><name pos:start="95:10" pos:end="95:11">ex</name><operator pos:start="95:12" pos:end="95:13">&gt;&gt;</operator><name pos:start="95:14" pos:end="95:15">ey</name></expr>;</expr_stmt>
    <macro pos:start="96:5" pos:end="96:15"><name pos:start="96:5" pos:end="96:8">_for</name><argument_list pos:start="96:9" pos:end="96:15">(<argument pos:start="96:10" pos:end="96:10">i</argument>,<argument pos:start="96:12" pos:end="96:12"><literal type="number" pos:start="96:12" pos:end="96:12">0</literal></argument>,<argument pos:start="96:14" pos:end="96:14">n</argument>)</argument_list></macro><block pos:start="96:16" pos:end="120:5">{<block_content pos:start="97:9" pos:end="119:9">
        <macro pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:12">_for</name><argument_list pos:start="97:13" pos:end="97:19">(<argument pos:start="97:14" pos:end="97:14">j</argument>,<argument pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">0</literal></argument>,<argument pos:start="97:18" pos:end="97:18">m</argument>)</argument_list></macro><block pos:start="97:20" pos:end="119:9">{<block_content pos:start="98:13" pos:end="118:13">
            <if_stmt pos:start="98:13" pos:end="101:13"><if pos:start="98:13" pos:end="101:13">if <condition pos:start="98:16" pos:end="98:29">(<expr pos:start="98:17" pos:end="98:28"><name pos:start="98:17" pos:end="98:23"><name pos:start="98:17" pos:end="98:17">a</name><index pos:start="98:18" pos:end="98:20">[<expr pos:start="98:19" pos:end="98:19"><name pos:start="98:19" pos:end="98:19">i</name></expr>]</index><index pos:start="98:21" pos:end="98:23">[<expr pos:start="98:22" pos:end="98:22"><name pos:start="98:22" pos:end="98:22">j</name></expr>]</index></name><operator pos:start="98:24" pos:end="98:25">==</operator><literal type="char" pos:start="98:26" pos:end="98:28">'#'</literal></expr>)</condition><block pos:start="98:30" pos:end="101:13">{<block_content pos:start="99:17" pos:end="100:25">
                <expr_stmt pos:start="99:17" pos:end="99:32"><expr pos:start="99:17" pos:end="99:31"><name pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:18">mp</name><index pos:start="99:19" pos:end="99:26">[<expr pos:start="99:20" pos:end="99:25"><call pos:start="99:20" pos:end="99:25"><name pos:start="99:20" pos:end="99:20">c</name><argument_list pos:start="99:21" pos:end="99:25">(<argument pos:start="99:22" pos:end="99:22"><expr pos:start="99:22" pos:end="99:22"><name pos:start="99:22" pos:end="99:22">i</name></expr></argument>,<argument pos:start="99:24" pos:end="99:24"><expr pos:start="99:24" pos:end="99:24"><name pos:start="99:24" pos:end="99:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="99:27" pos:end="99:27">=</operator><operator pos:start="99:28" pos:end="99:28">-</operator><name pos:start="99:29" pos:end="99:31">INF</name></expr>;</expr_stmt>
                <continue pos:start="100:17" pos:end="100:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="102:13" pos:end="105:13"><if pos:start="102:13" pos:end="105:13">if <condition pos:start="102:16" pos:end="102:29">(<expr pos:start="102:17" pos:end="102:28"><name pos:start="102:17" pos:end="102:23"><name pos:start="102:17" pos:end="102:17">a</name><index pos:start="102:18" pos:end="102:20">[<expr pos:start="102:19" pos:end="102:19"><name pos:start="102:19" pos:end="102:19">i</name></expr>]</index><index pos:start="102:21" pos:end="102:23">[<expr pos:start="102:22" pos:end="102:22"><name pos:start="102:22" pos:end="102:22">j</name></expr>]</index></name><operator pos:start="102:24" pos:end="102:25">==</operator><literal type="char" pos:start="102:26" pos:end="102:28">'*'</literal></expr>)</condition><block pos:start="102:30" pos:end="105:13">{<block_content pos:start="103:17" pos:end="104:29">
                <expr_stmt pos:start="103:17" pos:end="103:37"><expr pos:start="103:17" pos:end="103:36"><call pos:start="103:17" pos:end="103:36"><name pos:start="103:17" pos:end="103:19">add</name><argument_list pos:start="103:20" pos:end="103:36">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><call pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:21">c</name><argument_list pos:start="103:22" pos:end="103:26">(<argument pos:start="103:23" pos:end="103:23"><expr pos:start="103:23" pos:end="103:23"><name pos:start="103:23" pos:end="103:23">i</name></expr></argument>,<argument pos:start="103:25" pos:end="103:25"><expr pos:start="103:25" pos:end="103:25"><name pos:start="103:25" pos:end="103:25">j</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="103:28" pos:end="103:35"><expr pos:start="103:28" pos:end="103:35"><call pos:start="103:28" pos:end="103:35"><name pos:start="103:28" pos:end="103:28">c</name><argument_list pos:start="103:29" pos:end="103:35">(<argument pos:start="103:30" pos:end="103:31"><expr pos:start="103:30" pos:end="103:31"><name pos:start="103:30" pos:end="103:31">ex</name></expr></argument>,<argument pos:start="103:33" pos:end="103:34"><expr pos:start="103:33" pos:end="103:34"><name pos:start="103:33" pos:end="103:34">ey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="104:17" pos:end="104:29"><expr pos:start="104:17" pos:end="104:28"><name pos:start="104:17" pos:end="104:26"><name pos:start="104:17" pos:end="104:18">mp</name><index pos:start="104:19" pos:end="104:26">[<expr pos:start="104:20" pos:end="104:25"><call pos:start="104:20" pos:end="104:25"><name pos:start="104:20" pos:end="104:20">c</name><argument_list pos:start="104:21" pos:end="104:25">(<argument pos:start="104:22" pos:end="104:22"><expr pos:start="104:22" pos:end="104:22"><name pos:start="104:22" pos:end="104:22">i</name></expr></argument>,<argument pos:start="104:24" pos:end="104:24"><expr pos:start="104:24" pos:end="104:24"><name pos:start="104:24" pos:end="104:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="104:27" pos:end="104:27">=</operator><literal type="number" pos:start="104:28" pos:end="104:28">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="106:13" pos:end="110:13"><if pos:start="106:13" pos:end="110:13">if <condition pos:start="106:16" pos:end="106:21">(<expr pos:start="106:17" pos:end="106:20"><name pos:start="106:17" pos:end="106:17">i</name><operator pos:start="106:18" pos:end="106:19">!=</operator><literal type="number" pos:start="106:20" pos:end="106:20">0</literal></expr>)</condition><block pos:start="106:22" pos:end="110:13">{<block_content pos:start="107:17" pos:end="109:17">
                <if_stmt pos:start="107:17" pos:end="109:17"><if pos:start="107:17" pos:end="109:17">if <condition pos:start="107:20" pos:end="107:35">(<expr pos:start="107:21" pos:end="107:34"><name pos:start="107:21" pos:end="107:29"><name pos:start="107:21" pos:end="107:21">a</name><index pos:start="107:22" pos:end="107:26">[<expr pos:start="107:23" pos:end="107:25"><name pos:start="107:23" pos:end="107:23">i</name><operator pos:start="107:24" pos:end="107:24">-</operator><literal type="number" pos:start="107:25" pos:end="107:25">1</literal></expr>]</index><index pos:start="107:27" pos:end="107:29">[<expr pos:start="107:28" pos:end="107:28"><name pos:start="107:28" pos:end="107:28">j</name></expr>]</index></name><operator pos:start="107:30" pos:end="107:31">!=</operator><literal type="char" pos:start="107:32" pos:end="107:34">'#'</literal></expr>)</condition><block pos:start="107:36" pos:end="109:17">{<block_content pos:start="108:21" pos:end="108:41">
                    <expr_stmt pos:start="108:21" pos:end="108:41"><expr pos:start="108:21" pos:end="108:40"><call pos:start="108:21" pos:end="108:40"><name pos:start="108:21" pos:end="108:23">add</name><argument_list pos:start="108:24" pos:end="108:40">(<argument pos:start="108:25" pos:end="108:32"><expr pos:start="108:25" pos:end="108:32"><call pos:start="108:25" pos:end="108:32"><name pos:start="108:25" pos:end="108:25">c</name><argument_list pos:start="108:26" pos:end="108:32">(<argument pos:start="108:27" pos:end="108:29"><expr pos:start="108:27" pos:end="108:29"><name pos:start="108:27" pos:end="108:27">i</name><operator pos:start="108:28" pos:end="108:28">-</operator><literal type="number" pos:start="108:29" pos:end="108:29">1</literal></expr></argument>,<argument pos:start="108:31" pos:end="108:31"><expr pos:start="108:31" pos:end="108:31"><name pos:start="108:31" pos:end="108:31">j</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="108:34" pos:end="108:39"><expr pos:start="108:34" pos:end="108:39"><call pos:start="108:34" pos:end="108:39"><name pos:start="108:34" pos:end="108:34">c</name><argument_list pos:start="108:35" pos:end="108:39">(<argument pos:start="108:36" pos:end="108:36"><expr pos:start="108:36" pos:end="108:36"><name pos:start="108:36" pos:end="108:36">i</name></expr></argument>,<argument pos:start="108:38" pos:end="108:38"><expr pos:start="108:38" pos:end="108:38"><name pos:start="108:38" pos:end="108:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="111:13" pos:end="115:13"><if pos:start="111:13" pos:end="115:13">if <condition pos:start="111:16" pos:end="111:21">(<expr pos:start="111:17" pos:end="111:20"><name pos:start="111:17" pos:end="111:17">j</name><operator pos:start="111:18" pos:end="111:19">!=</operator><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>)</condition><block pos:start="111:22" pos:end="115:13">{<block_content pos:start="112:17" pos:end="114:17">
                <if_stmt pos:start="112:17" pos:end="114:17"><if pos:start="112:17" pos:end="114:17">if <condition pos:start="112:20" pos:end="112:35">(<expr pos:start="112:21" pos:end="112:34"><name pos:start="112:21" pos:end="112:29"><name pos:start="112:21" pos:end="112:21">a</name><index pos:start="112:22" pos:end="112:24">[<expr pos:start="112:23" pos:end="112:23"><name pos:start="112:23" pos:end="112:23">i</name></expr>]</index><index pos:start="112:25" pos:end="112:29">[<expr pos:start="112:26" pos:end="112:28"><name pos:start="112:26" pos:end="112:26">j</name><operator pos:start="112:27" pos:end="112:27">-</operator><literal type="number" pos:start="112:28" pos:end="112:28">1</literal></expr>]</index></name><operator pos:start="112:30" pos:end="112:31">!=</operator><literal type="char" pos:start="112:32" pos:end="112:34">'#'</literal></expr>)</condition><block pos:start="112:36" pos:end="114:17">{<block_content pos:start="113:21" pos:end="113:41">
                    <expr_stmt pos:start="113:21" pos:end="113:41"><expr pos:start="113:21" pos:end="113:40"><call pos:start="113:21" pos:end="113:40"><name pos:start="113:21" pos:end="113:23">add</name><argument_list pos:start="113:24" pos:end="113:40">(<argument pos:start="113:25" pos:end="113:32"><expr pos:start="113:25" pos:end="113:32"><call pos:start="113:25" pos:end="113:32"><name pos:start="113:25" pos:end="113:25">c</name><argument_list pos:start="113:26" pos:end="113:32">(<argument pos:start="113:27" pos:end="113:27"><expr pos:start="113:27" pos:end="113:27"><name pos:start="113:27" pos:end="113:27">i</name></expr></argument>,<argument pos:start="113:29" pos:end="113:31"><expr pos:start="113:29" pos:end="113:31"><name pos:start="113:29" pos:end="113:29">j</name><operator pos:start="113:30" pos:end="113:30">-</operator><literal type="number" pos:start="113:31" pos:end="113:31">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="113:34" pos:end="113:39"><expr pos:start="113:34" pos:end="113:39"><call pos:start="113:34" pos:end="113:39"><name pos:start="113:34" pos:end="113:34">c</name><argument_list pos:start="113:35" pos:end="113:39">(<argument pos:start="113:36" pos:end="113:36"><expr pos:start="113:36" pos:end="113:36"><name pos:start="113:36" pos:end="113:36">i</name></expr></argument>,<argument pos:start="113:38" pos:end="113:38"><expr pos:start="113:38" pos:end="113:38"><name pos:start="113:38" pos:end="113:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="116:13" pos:end="118:13"><if pos:start="116:13" pos:end="118:13">if <condition pos:start="116:16" pos:end="116:34">(<expr pos:start="116:17" pos:end="116:33"><operator pos:start="116:17" pos:end="116:17">!</operator><call pos:start="116:18" pos:end="116:33"><name pos:start="116:18" pos:end="116:25"><name pos:start="116:18" pos:end="116:19">mp</name><operator pos:start="116:20" pos:end="116:20">.</operator><name pos:start="116:21" pos:end="116:25">count</name></name><argument_list pos:start="116:26" pos:end="116:33">(<argument pos:start="116:27" pos:end="116:32"><expr pos:start="116:27" pos:end="116:32"><call pos:start="116:27" pos:end="116:32"><name pos:start="116:27" pos:end="116:27">c</name><argument_list pos:start="116:28" pos:end="116:32">(<argument pos:start="116:29" pos:end="116:29"><expr pos:start="116:29" pos:end="116:29"><name pos:start="116:29" pos:end="116:29">i</name></expr></argument>,<argument pos:start="116:31" pos:end="116:31"><expr pos:start="116:31" pos:end="116:31"><name pos:start="116:31" pos:end="116:31">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="116:35" pos:end="118:13">{<block_content pos:start="117:17" pos:end="117:39">
                <expr_stmt pos:start="117:17" pos:end="117:39"><expr pos:start="117:17" pos:end="117:38"><name pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:18">mp</name><index pos:start="117:19" pos:end="117:26">[<expr pos:start="117:20" pos:end="117:25"><call pos:start="117:20" pos:end="117:25"><name pos:start="117:20" pos:end="117:20">c</name><argument_list pos:start="117:21" pos:end="117:25">(<argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><name pos:start="117:22" pos:end="117:22">i</name></expr></argument>,<argument pos:start="117:24" pos:end="117:24"><expr pos:start="117:24" pos:end="117:24"><name pos:start="117:24" pos:end="117:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="117:27" pos:end="117:27">=</operator><name pos:start="117:28" pos:end="117:34"><name pos:start="117:28" pos:end="117:28">a</name><index pos:start="117:29" pos:end="117:31">[<expr pos:start="117:30" pos:end="117:30"><name pos:start="117:30" pos:end="117:30">i</name></expr>]</index><index pos:start="117:32" pos:end="117:34">[<expr pos:start="117:33" pos:end="117:33"><name pos:start="117:33" pos:end="117:33">j</name></expr>]</index></name><operator pos:start="117:35" pos:end="117:35">-</operator><literal type="char" pos:start="117:36" pos:end="117:38">'0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
    <decl_stmt pos:start="121:5" pos:end="121:19"><decl pos:start="121:5" pos:end="121:18"><type pos:start="121:5" pos:end="121:7"><name pos:start="121:5" pos:end="121:7">int</name></type> <name pos:start="121:9" pos:end="121:12">ncnt</name><init pos:start="121:13" pos:end="121:18">=<expr pos:start="121:14" pos:end="121:18"><name pos:start="121:14" pos:end="121:14">n</name><operator pos:start="121:15" pos:end="121:15">*</operator><name pos:start="121:16" pos:end="121:16">m</name><operator pos:start="121:17" pos:end="121:17">+</operator><literal type="number" pos:start="121:18" pos:end="121:18">1</literal></expr></init></decl>;</decl_stmt>
    <macro pos:start="122:5" pos:end="122:18"><name pos:start="122:5" pos:end="122:8">_for</name><argument_list pos:start="122:9" pos:end="122:18">(<argument pos:start="122:10" pos:end="122:10">i</argument>,<argument pos:start="122:12" pos:end="122:12"><literal type="number" pos:start="122:12" pos:end="122:12">1</literal></argument>,<argument pos:start="122:14" pos:end="122:17">ncnt</argument>)</argument_list></macro><block pos:start="122:19" pos:end="126:5">{<block_content pos:start="123:9" pos:end="125:9">
        <if_stmt pos:start="123:9" pos:end="125:9"><if pos:start="123:9" pos:end="125:9">if <condition pos:start="123:12" pos:end="123:35">(<expr pos:start="123:13" pos:end="123:34"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:19"><name pos:start="123:14" pos:end="123:16">dfn</name><index pos:start="123:17" pos:end="123:19">[<expr pos:start="123:18" pos:end="123:18"><name pos:start="123:18" pos:end="123:18">i</name></expr>]</index></name> <operator pos:start="123:21" pos:end="123:22">&amp;&amp;</operator> <name pos:start="123:24" pos:end="123:28"><name pos:start="123:24" pos:end="123:25">mp</name><index pos:start="123:26" pos:end="123:28">[<expr pos:start="123:27" pos:end="123:27"><name pos:start="123:27" pos:end="123:27">i</name></expr>]</index></name><operator pos:start="123:29" pos:end="123:30">!=</operator><operator pos:start="123:31" pos:end="123:31">-</operator><name pos:start="123:32" pos:end="123:34">INF</name></expr>)</condition><block pos:start="123:36" pos:end="125:9">{<block_content pos:start="124:13" pos:end="124:22">
            <expr_stmt pos:start="124:13" pos:end="124:22"><expr pos:start="124:13" pos:end="124:21"><call pos:start="124:13" pos:end="124:21"><name pos:start="124:13" pos:end="124:18">tarjan</name><argument_list pos:start="124:19" pos:end="124:21">(<argument pos:start="124:20" pos:end="124:20"><expr pos:start="124:20" pos:end="124:20"><name pos:start="124:20" pos:end="124:20">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt pos:start="127:5" pos:end="127:15"><expr pos:start="127:5" pos:end="127:14"><call pos:start="127:5" pos:end="127:14"><name pos:start="127:5" pos:end="127:12">new_init</name><argument_list pos:start="127:13" pos:end="127:14">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="128:5" pos:end="128:26"><decl pos:start="128:5" pos:end="128:25"><type pos:start="128:5" pos:end="128:7"><name pos:start="128:5" pos:end="128:7">int</name></type> <name pos:start="128:9" pos:end="128:16">first_id</name><init pos:start="128:17" pos:end="128:25">=<expr pos:start="128:18" pos:end="128:25"><name pos:start="128:18" pos:end="128:25"><name pos:start="128:18" pos:end="128:22">sccno</name><index pos:start="128:23" pos:end="128:25">[<expr pos:start="128:24" pos:end="128:24"><literal type="number" pos:start="128:24" pos:end="128:24">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:8">_for</name><argument_list pos:start="129:9" pos:end="129:18">(<argument pos:start="129:10" pos:end="129:10">u</argument>,<argument pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">1</literal></argument>,<argument pos:start="129:14" pos:end="129:17">ncnt</argument>)</argument_list></macro><block pos:start="129:19" pos:end="136:5">{<block_content pos:start="130:9" pos:end="135:9">
        <for pos:start="130:9" pos:end="135:9">for <control pos:start="130:13" pos:end="130:35">(<init pos:start="130:14" pos:end="130:24"><decl pos:start="130:14" pos:end="130:23"><type pos:start="130:14" pos:end="130:16"><name pos:start="130:14" pos:end="130:16">int</name></type> <name pos:start="130:18" pos:end="130:18">i</name><init pos:start="130:19" pos:end="130:23">=<expr pos:start="130:20" pos:end="130:23"><name pos:start="130:20" pos:end="130:23"><name pos:start="130:20" pos:end="130:20">h</name><index pos:start="130:21" pos:end="130:23">[<expr pos:start="130:22" pos:end="130:22"><name pos:start="130:22" pos:end="130:22">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="130:25" pos:end="130:27"><expr pos:start="130:25" pos:end="130:26"><operator pos:start="130:25" pos:end="130:25">~</operator><name pos:start="130:26" pos:end="130:26">i</name></expr>;</condition><incr pos:start="130:28" pos:end="130:34"><expr pos:start="130:28" pos:end="130:34"><name pos:start="130:28" pos:end="130:28">i</name><operator pos:start="130:29" pos:end="130:29">=</operator><name pos:start="130:30" pos:end="130:34"><name pos:start="130:30" pos:end="130:31">ne</name><index pos:start="130:32" pos:end="130:34">[<expr pos:start="130:33" pos:end="130:33"><name pos:start="130:33" pos:end="130:33">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="130:36" pos:end="135:9">{<block_content pos:start="131:13" pos:end="134:13">
            <decl_stmt pos:start="131:13" pos:end="131:23"><decl pos:start="131:13" pos:end="131:22"><type pos:start="131:13" pos:end="131:15"><name pos:start="131:13" pos:end="131:15">int</name></type> <name pos:start="131:17" pos:end="131:17">v</name><init pos:start="131:18" pos:end="131:22">=<expr pos:start="131:19" pos:end="131:22"><name pos:start="131:19" pos:end="131:22"><name pos:start="131:19" pos:end="131:19">e</name><index pos:start="131:20" pos:end="131:22">[<expr pos:start="131:21" pos:end="131:21"><name pos:start="131:21" pos:end="131:21">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="132:13" pos:end="134:13"><if pos:start="132:13" pos:end="134:13">if <condition pos:start="132:16" pos:end="132:35">(<expr pos:start="132:17" pos:end="132:34"><name pos:start="132:17" pos:end="132:24"><name pos:start="132:17" pos:end="132:21">sccno</name><index pos:start="132:22" pos:end="132:24">[<expr pos:start="132:23" pos:end="132:23"><name pos:start="132:23" pos:end="132:23">u</name></expr>]</index></name><operator pos:start="132:25" pos:end="132:26">!=</operator><name pos:start="132:27" pos:end="132:34"><name pos:start="132:27" pos:end="132:31">sccno</name><index pos:start="132:32" pos:end="132:34">[<expr pos:start="132:33" pos:end="132:33"><name pos:start="132:33" pos:end="132:33">v</name></expr>]</index></name></expr>)</condition><block pos:start="132:36" pos:end="134:13">{<block_content pos:start="133:17" pos:end="133:43">
                <expr_stmt pos:start="133:17" pos:end="133:43"><expr pos:start="133:17" pos:end="133:42"><call pos:start="133:17" pos:end="133:42"><name pos:start="133:17" pos:end="133:23">new_add</name><argument_list pos:start="133:24" pos:end="133:42">(<argument pos:start="133:25" pos:end="133:32"><expr pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:29">sccno</name><index pos:start="133:30" pos:end="133:32">[<expr pos:start="133:31" pos:end="133:31"><name pos:start="133:31" pos:end="133:31">u</name></expr>]</index></name></expr></argument>,<argument pos:start="133:34" pos:end="133:41"><expr pos:start="133:34" pos:end="133:41"><name pos:start="133:34" pos:end="133:41"><name pos:start="133:34" pos:end="133:38">sccno</name><index pos:start="133:39" pos:end="133:41">[<expr pos:start="133:40" pos:end="133:40"><name pos:start="133:40" pos:end="133:40">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt pos:start="137:5" pos:end="137:27"><expr pos:start="137:5" pos:end="137:26"><call pos:start="137:5" pos:end="137:26"><name pos:start="137:5" pos:end="137:10">memset</name><argument_list pos:start="137:11" pos:end="137:26">(<argument pos:start="137:12" pos:end="137:12"><expr pos:start="137:12" pos:end="137:12"><name pos:start="137:12" pos:end="137:12">f</name></expr></argument>,<argument pos:start="137:14" pos:end="137:15"><expr pos:start="137:14" pos:end="137:15"><operator pos:start="137:14" pos:end="137:14">-</operator><literal type="number" pos:start="137:15" pos:end="137:15">1</literal></expr></argument>,<argument pos:start="137:17" pos:end="137:25"><expr pos:start="137:17" pos:end="137:25"><sizeof pos:start="137:17" pos:end="137:25">sizeof<argument_list pos:start="137:23" pos:end="137:25">(<argument pos:start="137:24" pos:end="137:24"><expr pos:start="137:24" pos:end="137:24"><name pos:start="137:24" pos:end="137:24">f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="138:5" pos:end="138:26"><decl pos:start="138:5" pos:end="138:25"><type pos:start="138:5" pos:end="138:7"><name pos:start="138:5" pos:end="138:7">int</name></type> <name pos:start="138:9" pos:end="138:11">ans</name><init pos:start="138:12" pos:end="138:25">=<expr pos:start="138:13" pos:end="138:25"><call pos:start="138:13" pos:end="138:25"><name pos:start="138:13" pos:end="138:15">dfs</name><argument_list pos:start="138:16" pos:end="138:25">(<argument pos:start="138:17" pos:end="138:24"><expr pos:start="138:17" pos:end="138:24"><name pos:start="138:17" pos:end="138:24">first_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="139:5" pos:end="139:22"><expr pos:start="139:5" pos:end="139:21"><name pos:start="139:5" pos:end="139:8">cout</name><operator pos:start="139:9" pos:end="139:10">&lt;&lt;</operator><name pos:start="139:11" pos:end="139:13">ans</name><operator pos:start="139:14" pos:end="139:14">+</operator><literal type="number" pos:start="139:15" pos:end="139:15">1</literal><operator pos:start="139:16" pos:end="139:17">&lt;&lt;</operator><name pos:start="139:18" pos:end="139:21">endl</name></expr>;</expr_stmt>
    <return pos:start="140:5" pos:end="140:13">return <expr pos:start="140:12" pos:end="140:12"><literal type="number" pos:start="140:12" pos:end="140:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
