<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1222/1222.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:16"><decl pos:start="3:1" pos:end="3:5"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:5">n</name></decl>,<decl pos:start="3:7" pos:end="3:7"><type ref="prev" pos:start="3:1" pos:end="3:3"/><name pos:start="3:7" pos:end="3:7">k</name></decl>,<decl pos:start="3:9" pos:end="3:15"><type ref="prev" pos:start="3:1" pos:end="3:3"/><name pos:start="3:9" pos:end="3:15"><name pos:start="3:9" pos:end="3:11">cow</name><index pos:start="3:12" pos:end="3:15">[<expr pos:start="3:13" pos:end="3:14"><literal type="number" pos:start="3:13" pos:end="3:14">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:13"><decl pos:start="4:1" pos:end="4:12"><type pos:start="4:1" pos:end="4:4"><name pos:start="4:1" pos:end="4:4">bool</name></type> <name pos:start="4:6" pos:end="4:12"><name pos:start="4:6" pos:end="4:8">vis</name><index pos:start="4:9" pos:end="4:12">[<expr pos:start="4:10" pos:end="4:11"><literal type="number" pos:start="4:10" pos:end="4:11">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:22"><decl pos:start="5:1" pos:end="5:21"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:8">minn</name> <init pos:start="5:10" pos:end="5:21">= <expr pos:start="5:12" pos:end="5:21"><literal type="number" pos:start="5:12" pos:end="5:21">9999999999</literal></expr></init></decl>;</decl_stmt>
<function pos:start="6:1" pos:end="20:1"><type pos:start="6:1" pos:end="6:4"><name pos:start="6:1" pos:end="6:4">void</name></type> <name pos:start="6:6" pos:end="6:8">dfs</name><parameter_list pos:start="6:9" pos:end="6:17">(<parameter pos:start="6:10" pos:end="6:16"><decl pos:start="6:10" pos:end="6:16"><type pos:start="6:10" pos:end="6:12"><name pos:start="6:10" pos:end="6:12">int</name></type> <name pos:start="6:14" pos:end="6:16">sum</name></decl></parameter>)</parameter_list><block pos:start="6:18" pos:end="20:1">{<block_content pos:start="7:5" pos:end="19:11">
    <if_stmt pos:start="7:5" pos:end="7:26"><if pos:start="7:5" pos:end="7:26">if<condition pos:start="7:7" pos:end="7:18">(<expr pos:start="7:8" pos:end="7:17"><name pos:start="7:8" pos:end="7:10">sum</name> <operator pos:start="7:12" pos:end="7:12">&gt;</operator> <name pos:start="7:14" pos:end="7:17">minn</name></expr>)</condition><block type="pseudo" pos:start="7:20" pos:end="7:26"><block_content pos:start="7:20" pos:end="7:26"> <return pos:start="7:20" pos:end="7:26">return;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="8:5" pos:end="11:5"><if pos:start="8:5" pos:end="11:5">if<condition pos:start="8:7" pos:end="8:18">(<expr pos:start="8:8" pos:end="8:17"><name pos:start="8:8" pos:end="8:8">n</name> <operator pos:start="8:10" pos:end="8:10">-</operator> <name pos:start="8:12" pos:end="8:12">k</name> <operator pos:start="8:14" pos:end="8:15">&gt;=</operator> <literal type="number" pos:start="8:17" pos:end="8:17">0</literal></expr>)</condition><block pos:start="8:19" pos:end="11:5">{<block_content pos:start="9:9" pos:end="10:15">
        <expr_stmt pos:start="9:9" pos:end="9:22"><expr pos:start="9:9" pos:end="9:21"><call pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:11">min</name><argument_list pos:start="9:12" pos:end="9:21">(<argument pos:start="9:13" pos:end="9:16"><expr pos:start="9:13" pos:end="9:16"><name pos:start="9:13" pos:end="9:16">minn</name></expr></argument>,<argument pos:start="9:18" pos:end="9:20"><expr pos:start="9:18" pos:end="9:20"><name pos:start="9:18" pos:end="9:18">n</name><operator pos:start="9:19" pos:end="9:19">-</operator><name pos:start="9:20" pos:end="9:20">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="10:9" pos:end="10:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <for pos:start="12:5" pos:end="18:5">for<control pos:start="12:8" pos:end="12:24">(<init pos:start="12:9" pos:end="12:16"><decl pos:start="12:9" pos:end="12:15"><type pos:start="12:9" pos:end="12:11"><name pos:start="12:9" pos:end="12:11">int</name></type> <name pos:start="12:13" pos:end="12:13">i</name><init pos:start="12:14" pos:end="12:15">=<expr pos:start="12:15" pos:end="12:15"><literal type="number" pos:start="12:15" pos:end="12:15">0</literal></expr></init></decl>;</init><condition pos:start="12:17" pos:end="12:20"><expr pos:start="12:17" pos:end="12:19"><name pos:start="12:17" pos:end="12:17">i</name><operator pos:start="12:18" pos:end="12:18">&lt;</operator><name pos:start="12:19" pos:end="12:19">n</name></expr>;</condition><incr pos:start="12:21" pos:end="12:23"><expr pos:start="12:21" pos:end="12:23"><name pos:start="12:21" pos:end="12:21">i</name><operator pos:start="12:22" pos:end="12:23">++</operator></expr></incr>)</control><block pos:start="12:25" pos:end="18:5">{<block_content pos:start="13:9" pos:end="17:9">
        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if<condition pos:start="13:11" pos:end="13:19">(<expr pos:start="13:12" pos:end="13:18"><operator pos:start="13:12" pos:end="13:12">!</operator><name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:15">vis</name><index pos:start="13:16" pos:end="13:18">[<expr pos:start="13:17" pos:end="13:17"><name pos:start="13:17" pos:end="13:17">i</name></expr>]</index></name></expr>)</condition><block pos:start="13:20" pos:end="17:9">{<block_content pos:start="14:13" pos:end="16:27">
            <expr_stmt pos:start="14:13" pos:end="14:26"><expr pos:start="14:13" pos:end="14:25"><name pos:start="14:13" pos:end="14:18"><name pos:start="14:13" pos:end="14:15">vis</name><index pos:start="14:16" pos:end="14:18">[<expr pos:start="14:17" pos:end="14:17"><name pos:start="14:17" pos:end="14:17">i</name></expr>]</index></name> <operator pos:start="14:20" pos:end="14:20">=</operator> <literal type="boolean" pos:start="14:22" pos:end="14:25">true</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="15:13" pos:end="15:30"><expr pos:start="15:13" pos:end="15:29"><call pos:start="15:13" pos:end="15:29"><name pos:start="15:13" pos:end="15:15">dfs</name><argument_list pos:start="15:16" pos:end="15:29">(<argument pos:start="15:17" pos:end="15:28"><expr pos:start="15:17" pos:end="15:28"><name pos:start="15:17" pos:end="15:19">sum</name> <operator pos:start="15:21" pos:end="15:21">+</operator> <name pos:start="15:23" pos:end="15:28"><name pos:start="15:23" pos:end="15:25">cow</name><index pos:start="15:26" pos:end="15:28">[<expr pos:start="15:27" pos:end="15:27"><name pos:start="15:27" pos:end="15:27">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="16:13" pos:end="16:27"><expr pos:start="16:13" pos:end="16:26"><name pos:start="16:13" pos:end="16:18"><name pos:start="16:13" pos:end="16:15">vis</name><index pos:start="16:16" pos:end="16:18">[<expr pos:start="16:17" pos:end="16:17"><name pos:start="16:17" pos:end="16:17">i</name></expr>]</index></name> <operator pos:start="16:20" pos:end="16:20">=</operator> <literal type="boolean" pos:start="16:22" pos:end="16:26">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="19:5" pos:end="19:11">return;</return>
</block_content>}</block></function>
<function pos:start="21:1" pos:end="31:1"><type pos:start="21:1" pos:end="21:3"><name pos:start="21:1" pos:end="21:3">int</name></type> <name pos:start="21:5" pos:end="21:8">main</name><parameter_list pos:start="21:9" pos:end="21:10">()</parameter_list><block pos:start="21:11" pos:end="31:1">{<block_content pos:start="22:5" pos:end="30:13">
    <expr_stmt pos:start="22:5" pos:end="22:34"><expr pos:start="22:5" pos:end="22:33"><call pos:start="22:5" pos:end="22:33"><name pos:start="22:5" pos:end="22:11">freopen</name><argument_list pos:start="22:12" pos:end="22:33">(<argument pos:start="22:13" pos:end="22:22"><expr pos:start="22:13" pos:end="22:22"><literal type="string" pos:start="22:13" pos:end="22:22">"shelf.in"</literal></expr></argument>,<argument pos:start="22:24" pos:end="22:26"><expr pos:start="22:24" pos:end="22:26"><literal type="string" pos:start="22:24" pos:end="22:26">"r"</literal></expr></argument>,<argument pos:start="22:28" pos:end="22:32"><expr pos:start="22:28" pos:end="22:32"><name pos:start="22:28" pos:end="22:32">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:11">freopen</name><argument_list pos:start="23:12" pos:end="23:35">(<argument pos:start="23:13" pos:end="23:23"><expr pos:start="23:13" pos:end="23:23"><literal type="string" pos:start="23:13" pos:end="23:23">"shelf.out"</literal></expr></argument>,<argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><literal type="string" pos:start="23:25" pos:end="23:27">"w"</literal></expr></argument>,<argument pos:start="23:29" pos:end="23:34"><expr pos:start="23:29" pos:end="23:34"><name pos:start="23:29" pos:end="23:34">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:18"><expr pos:start="24:5" pos:end="24:17"><name pos:start="24:5" pos:end="24:7">cin</name> <operator pos:start="24:9" pos:end="24:10">&gt;&gt;</operator> <name pos:start="24:12" pos:end="24:12">n</name> <operator pos:start="24:14" pos:end="24:15">&gt;&gt;</operator> <name pos:start="24:17" pos:end="24:17">k</name></expr>;</expr_stmt>
    <for pos:start="25:5" pos:end="27:5">for<control pos:start="25:8" pos:end="25:24">(<init pos:start="25:9" pos:end="25:16"><decl pos:start="25:9" pos:end="25:15"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:13">i</name><init pos:start="25:14" pos:end="25:15">=<expr pos:start="25:15" pos:end="25:15"><literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr></init></decl>;</init><condition pos:start="25:17" pos:end="25:20"><expr pos:start="25:17" pos:end="25:19"><name pos:start="25:17" pos:end="25:17">i</name><operator pos:start="25:18" pos:end="25:18">&lt;</operator><name pos:start="25:19" pos:end="25:19">n</name></expr>;</condition><incr pos:start="25:21" pos:end="25:23"><expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:21">i</name><operator pos:start="25:22" pos:end="25:23">++</operator></expr></incr>)</control><block pos:start="25:25" pos:end="27:5">{<block_content pos:start="26:9" pos:end="26:22">
        <expr_stmt pos:start="26:9" pos:end="26:22"><expr pos:start="26:9" pos:end="26:21"><name pos:start="26:9" pos:end="26:11">cin</name> <operator pos:start="26:13" pos:end="26:14">&gt;&gt;</operator> <name pos:start="26:16" pos:end="26:21"><name pos:start="26:16" pos:end="26:18">cow</name><index pos:start="26:19" pos:end="26:21">[<expr pos:start="26:20" pos:end="26:20"><name pos:start="26:20" pos:end="26:20">i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for> 
    <expr_stmt pos:start="28:5" pos:end="28:11"><expr pos:start="28:5" pos:end="28:10"><call pos:start="28:5" pos:end="28:10"><name pos:start="28:5" pos:end="28:7">dfs</name><argument_list pos:start="28:8" pos:end="28:10">(<argument pos:start="28:9" pos:end="28:9"><expr pos:start="28:9" pos:end="28:9"><literal type="number" pos:start="28:9" pos:end="28:9">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:8">cout</name> <operator pos:start="29:10" pos:end="29:11">&lt;&lt;</operator> <name pos:start="29:13" pos:end="29:16">minn</name></expr>;</expr_stmt>
    <return pos:start="30:5" pos:end="30:13">return <expr pos:start="30:12" pos:end="30:12"><literal type="number" pos:start="30:12" pos:end="30:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
