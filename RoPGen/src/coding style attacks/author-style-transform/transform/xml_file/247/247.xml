<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/247/247.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:19">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:19">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:17">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive><cpp:file pos:start="3:9" pos:end="3:17">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:15">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive><cpp:file pos:start="4:9" pos:end="4:15">&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive><cpp:file pos:start="5:9" pos:end="5:13">&lt;set&gt;</cpp:file></cpp:include>
<cpp:define pos:start="6:1" pos:end="6:45">#<cpp:directive pos:start="6:2" pos:end="6:7">define</cpp:directive> <cpp:macro pos:start="6:9" pos:end="6:19"><name pos:start="6:9" pos:end="6:12">_for</name><parameter_list pos:start="6:13" pos:end="6:19">(<parameter pos:start="6:14" pos:end="6:14"><type pos:start="6:14" pos:end="6:14"><name pos:start="6:14" pos:end="6:14">i</name></type></parameter>,<parameter pos:start="6:16" pos:end="6:16"><type pos:start="6:16" pos:end="6:16"><name pos:start="6:16" pos:end="6:16">a</name></type></parameter>,<parameter pos:start="6:18" pos:end="6:18"><type pos:start="6:18" pos:end="6:18"><name pos:start="6:18" pos:end="6:18">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="6:21" pos:end="6:45">for (int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<using pos:start="7:1" pos:end="7:20">using <namespace pos:start="7:7" pos:end="7:20">namespace <name pos:start="7:17" pos:end="7:19">std</name>;</namespace></using>
<decl_stmt pos:start="8:1" pos:end="8:26"><decl pos:start="8:1" pos:end="8:17"><type pos:start="8:1" pos:end="8:9"><specifier pos:start="8:1" pos:end="8:5">const</specifier> <name pos:start="8:7" pos:end="8:9">int</name></type> <name pos:start="8:11" pos:end="8:11">N</name><init pos:start="8:12" pos:end="8:17">=<expr pos:start="8:13" pos:end="8:17"><literal type="number" pos:start="8:13" pos:end="8:16">1e4</literal><operator pos:start="8:16" pos:end="8:16">+</operator><literal type="number" pos:start="8:17" pos:end="8:17">5</literal></expr></init></decl>,<decl pos:start="8:19" pos:end="8:25"><type ref="prev" pos:start="8:1" pos:end="8:9"/><name pos:start="8:19" pos:end="8:19">M</name><init pos:start="8:20" pos:end="8:25">=<expr pos:start="8:21" pos:end="8:25"><literal type="number" pos:start="8:21" pos:end="8:24">1e5</literal><operator pos:start="8:24" pos:end="8:24">+</operator><literal type="number" pos:start="8:25" pos:end="8:25">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="9:1" pos:end="9:8"><decl pos:start="9:1" pos:end="9:5"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:5">n</name></decl>,<decl pos:start="9:7" pos:end="9:7"><type ref="prev" pos:start="9:1" pos:end="9:3"/><name pos:start="9:7" pos:end="9:7">m</name></decl>;</decl_stmt>
<decl_stmt pos:start="10:1" pos:end="10:24"><decl pos:start="10:1" pos:end="10:7"><type pos:start="10:1" pos:end="10:3"><name pos:start="10:1" pos:end="10:3">int</name></type> <name pos:start="10:5" pos:end="10:7">idx</name></decl>,<decl pos:start="10:9" pos:end="10:12"><type ref="prev" pos:start="10:1" pos:end="10:3"/><name pos:start="10:9" pos:end="10:12"><name pos:start="10:9" pos:end="10:9">h</name><index pos:start="10:10" pos:end="10:12">[<expr pos:start="10:11" pos:end="10:11"><name pos:start="10:11" pos:end="10:11">N</name></expr>]</index></name></decl>,<decl pos:start="10:14" pos:end="10:17"><type ref="prev" pos:start="10:1" pos:end="10:3"/><name pos:start="10:14" pos:end="10:17"><name pos:start="10:14" pos:end="10:14">e</name><index pos:start="10:15" pos:end="10:17">[<expr pos:start="10:16" pos:end="10:16"><name pos:start="10:16" pos:end="10:16">M</name></expr>]</index></name></decl>,<decl pos:start="10:19" pos:end="10:23"><type ref="prev" pos:start="10:1" pos:end="10:3"/><name pos:start="10:19" pos:end="10:23"><name pos:start="10:19" pos:end="10:20">ne</name><index pos:start="10:21" pos:end="10:23">[<expr pos:start="10:22" pos:end="10:22"><name pos:start="10:22" pos:end="10:22">M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="11:1" pos:end="11:12"><decl pos:start="11:1" pos:end="11:11"><type pos:start="11:1" pos:end="11:3"><name pos:start="11:1" pos:end="11:3">int</name></type> <name pos:start="11:5" pos:end="11:9">times</name><init pos:start="11:10" pos:end="11:11">=<expr pos:start="11:11" pos:end="11:11"><literal type="number" pos:start="11:11" pos:end="11:11">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="12:1" pos:end="12:18"><decl pos:start="12:1" pos:end="12:10"><type pos:start="12:1" pos:end="12:3"><name pos:start="12:1" pos:end="12:3">int</name></type> <name pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:7">dfn</name><index pos:start="12:8" pos:end="12:10">[<expr pos:start="12:9" pos:end="12:9"><name pos:start="12:9" pos:end="12:9">N</name></expr>]</index></name></decl>,<decl pos:start="12:12" pos:end="12:17"><type ref="prev" pos:start="12:1" pos:end="12:3"/><name pos:start="12:12" pos:end="12:17"><name pos:start="12:12" pos:end="12:14">low</name><index pos:start="12:15" pos:end="12:17">[<expr pos:start="12:16" pos:end="12:16"><name pos:start="12:16" pos:end="12:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="13:1" pos:end="13:14"><decl pos:start="13:1" pos:end="13:13"><type pos:start="13:1" pos:end="13:3"><name pos:start="13:1" pos:end="13:3">int</name></type> <name pos:start="13:5" pos:end="13:11">bcc_cnt</name><init pos:start="13:12" pos:end="13:13">=<expr pos:start="13:13" pos:end="13:13"><literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="14:1" pos:end="14:13"><decl pos:start="14:1" pos:end="14:12"><type pos:start="14:1" pos:end="14:10"><name pos:start="14:1" pos:end="14:10"><name pos:start="14:1" pos:end="14:5">stack</name><argument_list type="generic" pos:start="14:6" pos:end="14:10">&lt;<argument pos:start="14:7" pos:end="14:9"><expr pos:start="14:7" pos:end="14:9"><name pos:start="14:7" pos:end="14:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="14:12" pos:end="14:12">S</name></decl>;</decl_stmt>
<decl_stmt pos:start="15:1" pos:end="15:14"><decl pos:start="15:1" pos:end="15:8"><type pos:start="15:1" pos:end="15:3"><name pos:start="15:1" pos:end="15:3">int</name></type> <name pos:start="15:5" pos:end="15:8">ans1</name></decl>,<decl pos:start="15:10" pos:end="15:13"><type ref="prev" pos:start="15:1" pos:end="15:3"/><name pos:start="15:10" pos:end="15:13">ans2</name></decl>;</decl_stmt>
<decl_stmt pos:start="16:1" pos:end="16:12"><decl pos:start="16:1" pos:end="16:11"><type pos:start="16:1" pos:end="16:4"><name pos:start="16:1" pos:end="16:4">bool</name></type> <name pos:start="16:6" pos:end="16:11"><name pos:start="16:6" pos:end="16:8">vis</name><index pos:start="16:9" pos:end="16:11">[<expr pos:start="16:10" pos:end="16:10"><name pos:start="16:10" pos:end="16:10">N</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="17:1" pos:end="21:1"><type pos:start="17:1" pos:end="17:4"><name pos:start="17:1" pos:end="17:4">void</name></type> <name pos:start="17:6" pos:end="17:11">c_plus</name><parameter_list pos:start="17:12" pos:end="17:13">()</parameter_list><block pos:start="17:14" pos:end="21:1">{<block_content pos:start="18:5" pos:end="20:16">
    <expr_stmt pos:start="18:5" pos:end="18:32"><expr pos:start="18:5" pos:end="18:31"><call pos:start="18:5" pos:end="18:31"><name pos:start="18:5" pos:end="18:24"><name pos:start="18:5" pos:end="18:7">ios</name><operator pos:start="18:8" pos:end="18:9">::</operator><name pos:start="18:10" pos:end="18:24">sync_with_stdio</name></name><argument_list pos:start="18:25" pos:end="18:31">(<argument pos:start="18:26" pos:end="18:30"><expr pos:start="18:26" pos:end="18:30"><literal type="boolean" pos:start="18:26" pos:end="18:30">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><call pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:7">cin</name><operator pos:start="19:8" pos:end="19:8">.</operator><name pos:start="19:9" pos:end="19:11">tie</name></name><argument_list pos:start="19:12" pos:end="19:14">(<argument pos:start="19:13" pos:end="19:13"><expr pos:start="19:13" pos:end="19:13"><literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:16"><expr pos:start="20:5" pos:end="20:15"><call pos:start="20:5" pos:end="20:15"><name pos:start="20:5" pos:end="20:12"><name pos:start="20:5" pos:end="20:8">cout</name><operator pos:start="20:9" pos:end="20:9">.</operator><name pos:start="20:10" pos:end="20:12">tie</name></name><argument_list pos:start="20:13" pos:end="20:15">(<argument pos:start="20:14" pos:end="20:14"><expr pos:start="20:14" pos:end="20:14"><literal type="number" pos:start="20:14" pos:end="20:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="22:1" pos:end="25:1"><type pos:start="22:1" pos:end="22:4"><name pos:start="22:1" pos:end="22:4">void</name></type> <name pos:start="22:6" pos:end="22:9">init</name><parameter_list pos:start="22:10" pos:end="22:11">()</parameter_list><block pos:start="22:12" pos:end="25:1">{<block_content pos:start="23:5" pos:end="24:27">
    <expr_stmt pos:start="23:5" pos:end="23:10"><expr pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:7">idx</name><operator pos:start="23:8" pos:end="23:8">=</operator><literal type="number" pos:start="23:9" pos:end="23:9">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:27"><expr pos:start="24:5" pos:end="24:26"><call pos:start="24:5" pos:end="24:26"><name pos:start="24:5" pos:end="24:10">memset</name><argument_list pos:start="24:11" pos:end="24:26">(<argument pos:start="24:12" pos:end="24:12"><expr pos:start="24:12" pos:end="24:12"><name pos:start="24:12" pos:end="24:12">h</name></expr></argument>,<argument pos:start="24:14" pos:end="24:15"><expr pos:start="24:14" pos:end="24:15"><operator pos:start="24:14" pos:end="24:14">-</operator><literal type="number" pos:start="24:15" pos:end="24:15">1</literal></expr></argument>,<argument pos:start="24:17" pos:end="24:25"><expr pos:start="24:17" pos:end="24:25"><sizeof pos:start="24:17" pos:end="24:25">sizeof<argument_list pos:start="24:23" pos:end="24:25">(<argument pos:start="24:24" pos:end="24:24"><expr pos:start="24:24" pos:end="24:24"><name pos:start="24:24" pos:end="24:24">h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="26:1" pos:end="30:1"><type pos:start="26:1" pos:end="26:4"><name pos:start="26:1" pos:end="26:4">void</name></type> <name pos:start="26:6" pos:end="26:8">add</name><parameter_list pos:start="26:9" pos:end="26:21">(<parameter pos:start="26:10" pos:end="26:14"><decl pos:start="26:10" pos:end="26:14"><type pos:start="26:10" pos:end="26:14"><name pos:start="26:10" pos:end="26:12">int</name></type> <name pos:start="26:14" pos:end="26:14">a</name></decl></parameter>,<parameter pos:start="26:16" pos:end="26:20"><decl pos:start="26:16" pos:end="26:20"><type pos:start="26:16" pos:end="26:20"><name pos:start="26:16" pos:end="26:18">int</name></type> <name pos:start="26:20" pos:end="26:20">b</name></decl></parameter>)</parameter_list><block pos:start="26:22" pos:end="30:1">{<block_content pos:start="27:5" pos:end="29:15">
    <expr_stmt pos:start="27:5" pos:end="27:13"><expr pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:5">e</name><index pos:start="27:6" pos:end="27:10">[<expr pos:start="27:7" pos:end="27:9"><name pos:start="27:7" pos:end="27:9">idx</name></expr>]</index></name><operator pos:start="27:11" pos:end="27:11">=</operator><name pos:start="27:12" pos:end="27:12">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:17"><expr pos:start="28:5" pos:end="28:16"><name pos:start="28:5" pos:end="28:11"><name pos:start="28:5" pos:end="28:6">ne</name><index pos:start="28:7" pos:end="28:11">[<expr pos:start="28:8" pos:end="28:10"><name pos:start="28:8" pos:end="28:10">idx</name></expr>]</index></name><operator pos:start="28:12" pos:end="28:12">=</operator><name pos:start="28:13" pos:end="28:16"><name pos:start="28:13" pos:end="28:13">h</name><index pos:start="28:14" pos:end="28:16">[<expr pos:start="28:15" pos:end="28:15"><name pos:start="28:15" pos:end="28:15">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:15"><expr pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:5">h</name><index pos:start="29:6" pos:end="29:8">[<expr pos:start="29:7" pos:end="29:7"><name pos:start="29:7" pos:end="29:7">a</name></expr>]</index></name><operator pos:start="29:9" pos:end="29:9">=</operator><name pos:start="29:10" pos:end="29:12">idx</name><operator pos:start="29:13" pos:end="29:14">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="31:1" pos:end="71:1"><type pos:start="31:1" pos:end="31:4"><name pos:start="31:1" pos:end="31:4">void</name></type> <name pos:start="31:6" pos:end="31:11">tarjan</name><parameter_list pos:start="31:12" pos:end="31:25">(<parameter pos:start="31:13" pos:end="31:17"><decl pos:start="31:13" pos:end="31:17"><type pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:17">u</name></decl></parameter>,<parameter pos:start="31:19" pos:end="31:24"><decl pos:start="31:19" pos:end="31:24"><type pos:start="31:19" pos:end="31:24"><name pos:start="31:19" pos:end="31:21">int</name></type> <name pos:start="31:23" pos:end="31:24">fa</name></decl></parameter>)</parameter_list><block pos:start="31:26" pos:end="71:1">{<block_content pos:start="32:5" pos:end="70:5">
    <expr_stmt pos:start="32:5" pos:end="32:26"><expr pos:start="32:5" pos:end="32:25"><name pos:start="32:5" pos:end="32:10"><name pos:start="32:5" pos:end="32:7">dfn</name><index pos:start="32:8" pos:end="32:10">[<expr pos:start="32:9" pos:end="32:9"><name pos:start="32:9" pos:end="32:9">u</name></expr>]</index></name><operator pos:start="32:11" pos:end="32:11">=</operator><name pos:start="32:12" pos:end="32:17"><name pos:start="32:12" pos:end="32:14">low</name><index pos:start="32:15" pos:end="32:17">[<expr pos:start="32:16" pos:end="32:16"><name pos:start="32:16" pos:end="32:16">u</name></expr>]</index></name><operator pos:start="32:18" pos:end="32:18">=</operator><operator pos:start="32:19" pos:end="32:20">++</operator><name pos:start="32:21" pos:end="32:25">times</name></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><call pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:5">S</name><operator pos:start="33:6" pos:end="33:6">.</operator><name pos:start="33:7" pos:end="33:10">push</name></name><argument_list pos:start="33:11" pos:end="33:13">(<argument pos:start="33:12" pos:end="33:12"><expr pos:start="33:12" pos:end="33:12"><name pos:start="33:12" pos:end="33:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="34:5" pos:end="45:5">for <control pos:start="34:9" pos:end="34:31">(<init pos:start="34:10" pos:end="34:20"><decl pos:start="34:10" pos:end="34:19"><type pos:start="34:10" pos:end="34:12"><name pos:start="34:10" pos:end="34:12">int</name></type> <name pos:start="34:14" pos:end="34:14">i</name><init pos:start="34:15" pos:end="34:19">=<expr pos:start="34:16" pos:end="34:19"><name pos:start="34:16" pos:end="34:19"><name pos:start="34:16" pos:end="34:16">h</name><index pos:start="34:17" pos:end="34:19">[<expr pos:start="34:18" pos:end="34:18"><name pos:start="34:18" pos:end="34:18">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="34:21" pos:end="34:23"><expr pos:start="34:21" pos:end="34:22"><operator pos:start="34:21" pos:end="34:21">~</operator><name pos:start="34:22" pos:end="34:22">i</name></expr>;</condition><incr pos:start="34:24" pos:end="34:30"><expr pos:start="34:24" pos:end="34:30"><name pos:start="34:24" pos:end="34:24">i</name><operator pos:start="34:25" pos:end="34:25">=</operator><name pos:start="34:26" pos:end="34:30"><name pos:start="34:26" pos:end="34:27">ne</name><index pos:start="34:28" pos:end="34:30">[<expr pos:start="34:29" pos:end="34:29"><name pos:start="34:29" pos:end="34:29">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="34:32" pos:end="45:5">{<block_content pos:start="35:9" pos:end="44:9">
        <decl_stmt pos:start="35:9" pos:end="35:19"><decl pos:start="35:9" pos:end="35:18"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:13">v</name><init pos:start="35:14" pos:end="35:18">=<expr pos:start="35:15" pos:end="35:18"><name pos:start="35:15" pos:end="35:18"><name pos:start="35:15" pos:end="35:15">e</name><index pos:start="35:16" pos:end="35:18">[<expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="36:9" pos:end="44:9"><if pos:start="36:9" pos:end="42:9">if <condition pos:start="36:12" pos:end="36:22">(<expr pos:start="36:13" pos:end="36:21"><name pos:start="36:13" pos:end="36:18"><name pos:start="36:13" pos:end="36:15">dfn</name><index pos:start="36:16" pos:end="36:18">[<expr pos:start="36:17" pos:end="36:17"><name pos:start="36:17" pos:end="36:17">v</name></expr>]</index></name><operator pos:start="36:19" pos:end="36:20">==</operator><literal type="number" pos:start="36:21" pos:end="36:21">0</literal></expr>)</condition><block pos:start="36:23" pos:end="42:9">{<block_content pos:start="37:13" pos:end="41:13">
            <expr_stmt pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:23"><call pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:18">tarjan</name><argument_list pos:start="37:19" pos:end="37:23">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">v</name></expr></argument>,<argument pos:start="37:22" pos:end="37:22"><expr pos:start="37:22" pos:end="37:22"><name pos:start="37:22" pos:end="37:22">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="38:13" pos:end="38:38"><expr pos:start="38:13" pos:end="38:37"><name pos:start="38:13" pos:end="38:18"><name pos:start="38:13" pos:end="38:15">low</name><index pos:start="38:16" pos:end="38:18">[<expr pos:start="38:17" pos:end="38:17"><name pos:start="38:17" pos:end="38:17">u</name></expr>]</index></name><operator pos:start="38:19" pos:end="38:19">=</operator><call pos:start="38:20" pos:end="38:37"><name pos:start="38:20" pos:end="38:22">min</name><argument_list pos:start="38:23" pos:end="38:37">(<argument pos:start="38:24" pos:end="38:29"><expr pos:start="38:24" pos:end="38:29"><name pos:start="38:24" pos:end="38:29"><name pos:start="38:24" pos:end="38:26">low</name><index pos:start="38:27" pos:end="38:29">[<expr pos:start="38:28" pos:end="38:28"><name pos:start="38:28" pos:end="38:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="38:31" pos:end="38:36"><expr pos:start="38:31" pos:end="38:36"><name pos:start="38:31" pos:end="38:36"><name pos:start="38:31" pos:end="38:33">low</name><index pos:start="38:34" pos:end="38:36">[<expr pos:start="38:35" pos:end="38:35"><name pos:start="38:35" pos:end="38:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="39:13" pos:end="41:13"><if pos:start="39:13" pos:end="41:13">if <condition pos:start="39:16" pos:end="39:30">(<expr pos:start="39:17" pos:end="39:29"><name pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:19">low</name><index pos:start="39:20" pos:end="39:22">[<expr pos:start="39:21" pos:end="39:21"><name pos:start="39:21" pos:end="39:21">v</name></expr>]</index></name><operator pos:start="39:23" pos:end="39:23">&gt;</operator><name pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:26">dfn</name><index pos:start="39:27" pos:end="39:29">[<expr pos:start="39:28" pos:end="39:28"><name pos:start="39:28" pos:end="39:28">u</name></expr>]</index></name></expr>)</condition><block pos:start="39:31" pos:end="41:13">{<block_content pos:start="40:17" pos:end="40:23">
                <expr_stmt pos:start="40:17" pos:end="40:23"><expr pos:start="40:17" pos:end="40:22"><name pos:start="40:17" pos:end="40:20">ans1</name><operator pos:start="40:21" pos:end="40:22">++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="42:10" pos:end="44:9">else if <condition pos:start="42:18" pos:end="42:41">(<expr pos:start="42:19" pos:end="42:40"><name pos:start="42:19" pos:end="42:24"><name pos:start="42:19" pos:end="42:21">dfn</name><index pos:start="42:22" pos:end="42:24">[<expr pos:start="42:23" pos:end="42:23"><name pos:start="42:23" pos:end="42:23">v</name></expr>]</index></name><operator pos:start="42:25" pos:end="42:25">&lt;</operator><name pos:start="42:26" pos:end="42:31"><name pos:start="42:26" pos:end="42:28">dfn</name><index pos:start="42:29" pos:end="42:31">[<expr pos:start="42:30" pos:end="42:30"><name pos:start="42:30" pos:end="42:30">u</name></expr>]</index></name> <operator pos:start="42:33" pos:end="42:34">&amp;&amp;</operator> <name pos:start="42:36" pos:end="42:36">v</name><operator pos:start="42:37" pos:end="42:38">!=</operator><name pos:start="42:39" pos:end="42:40">fa</name></expr>)</condition><block pos:start="42:42" pos:end="44:9">{<block_content pos:start="43:13" pos:end="43:38">
            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:18"><name pos:start="43:13" pos:end="43:15">low</name><index pos:start="43:16" pos:end="43:18">[<expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">u</name></expr>]</index></name><operator pos:start="43:19" pos:end="43:19">=</operator><call pos:start="43:20" pos:end="43:37"><name pos:start="43:20" pos:end="43:22">min</name><argument_list pos:start="43:23" pos:end="43:37">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:26">low</name><index pos:start="43:27" pos:end="43:29">[<expr pos:start="43:28" pos:end="43:28"><name pos:start="43:28" pos:end="43:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="43:31" pos:end="43:36"><expr pos:start="43:31" pos:end="43:36"><name pos:start="43:31" pos:end="43:36"><name pos:start="43:31" pos:end="43:33">dfn</name><index pos:start="43:34" pos:end="43:36">[<expr pos:start="43:35" pos:end="43:35"><name pos:start="43:35" pos:end="43:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="46:5" pos:end="70:5"><if pos:start="46:5" pos:end="70:5">if <condition pos:start="46:8" pos:end="46:23">(<expr pos:start="46:9" pos:end="46:22"><name pos:start="46:9" pos:end="46:14"><name pos:start="46:9" pos:end="46:11">dfn</name><index pos:start="46:12" pos:end="46:14">[<expr pos:start="46:13" pos:end="46:13"><name pos:start="46:13" pos:end="46:13">u</name></expr>]</index></name><operator pos:start="46:15" pos:end="46:16">==</operator><name pos:start="46:17" pos:end="46:22"><name pos:start="46:17" pos:end="46:19">low</name><index pos:start="46:20" pos:end="46:22">[<expr pos:start="46:21" pos:end="46:21"><name pos:start="46:21" pos:end="46:21">u</name></expr>]</index></name></expr>)</condition><block pos:start="46:24" pos:end="70:5">{<block_content pos:start="47:9" pos:end="69:9">
        <expr_stmt pos:start="47:9" pos:end="47:18"><expr pos:start="47:9" pos:end="47:17"><operator pos:start="47:9" pos:end="47:10">++</operator><name pos:start="47:11" pos:end="47:17">bcc_cnt</name></expr>;</expr_stmt>
        <decl_stmt pos:start="48:9" pos:end="48:23"><decl pos:start="48:9" pos:end="48:22"><type pos:start="48:9" pos:end="48:16"><name pos:start="48:9" pos:end="48:16"><name pos:start="48:9" pos:end="48:11">set</name><argument_list type="generic" pos:start="48:12" pos:end="48:16">&lt;<argument pos:start="48:13" pos:end="48:15"><expr pos:start="48:13" pos:end="48:15"><name pos:start="48:13" pos:end="48:15">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="48:18" pos:end="48:22">point</name></decl>;</decl_stmt>
        <decl_stmt pos:start="49:9" pos:end="49:18"><decl pos:start="49:9" pos:end="49:17"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:15">sum</name><init pos:start="49:16" pos:end="49:17">=<expr pos:start="49:17" pos:end="49:17"><literal type="number" pos:start="49:17" pos:end="49:17">0</literal></expr></init></decl>;</decl_stmt>
        <while pos:start="50:9" pos:end="57:9">while <condition pos:start="50:15" pos:end="50:20">(<expr pos:start="50:16" pos:end="50:19"><literal type="boolean" pos:start="50:16" pos:end="50:19">true</literal></expr>)</condition><block pos:start="50:21" pos:end="57:9">{<block_content pos:start="51:13" pos:end="56:13">
            <decl_stmt pos:start="51:13" pos:end="51:26"><decl pos:start="51:13" pos:end="51:25"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:17">x</name><init pos:start="51:18" pos:end="51:25">=<expr pos:start="51:19" pos:end="51:25"><call pos:start="51:19" pos:end="51:25"><name pos:start="51:19" pos:end="51:23"><name pos:start="51:19" pos:end="51:19">S</name><operator pos:start="51:20" pos:end="51:20">.</operator><name pos:start="51:21" pos:end="51:23">top</name></name><argument_list pos:start="51:24" pos:end="51:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="52:13" pos:end="52:28"><expr pos:start="52:13" pos:end="52:27"><call pos:start="52:13" pos:end="52:27"><name pos:start="52:13" pos:end="52:24"><name pos:start="52:13" pos:end="52:17">point</name><operator pos:start="52:18" pos:end="52:18">.</operator><name pos:start="52:19" pos:end="52:24">insert</name></name><argument_list pos:start="52:25" pos:end="52:27">(<argument pos:start="52:26" pos:end="52:26"><expr pos:start="52:26" pos:end="52:26"><name pos:start="52:26" pos:end="52:26">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="53:13" pos:end="53:20"><expr pos:start="53:13" pos:end="53:19"><call pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:17"><name pos:start="53:13" pos:end="53:13">S</name><operator pos:start="53:14" pos:end="53:14">.</operator><name pos:start="53:15" pos:end="53:17">pop</name></name><argument_list pos:start="53:18" pos:end="53:19">()</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="54:13" pos:end="56:13"><if pos:start="54:13" pos:end="56:13">if <condition pos:start="54:16" pos:end="54:21">(<expr pos:start="54:17" pos:end="54:20"><name pos:start="54:17" pos:end="54:17">x</name><operator pos:start="54:18" pos:end="54:19">==</operator><name pos:start="54:20" pos:end="54:20">u</name></expr>)</condition><block pos:start="54:22" pos:end="56:13">{<block_content pos:start="55:17" pos:end="55:22">
                <break pos:start="55:17" pos:end="55:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <for pos:start="58:9" pos:end="65:9">for <control pos:start="58:13" pos:end="58:27">(<init pos:start="58:14" pos:end="58:26"><decl pos:start="58:14" pos:end="58:26"><type pos:start="58:14" pos:end="58:17"><name pos:start="58:14" pos:end="58:17">auto</name></type> <name pos:start="58:19" pos:end="58:19">x</name><range pos:start="58:20" pos:end="58:26">: <expr pos:start="58:22" pos:end="58:26"><name pos:start="58:22" pos:end="58:26">point</name></expr></range></decl></init>)</control><block pos:start="58:28" pos:end="65:9">{<block_content pos:start="59:13" pos:end="64:13">
            <for pos:start="59:13" pos:end="64:13">for <control pos:start="59:17" pos:end="59:39">(<init pos:start="59:18" pos:end="59:28"><decl pos:start="59:18" pos:end="59:27"><type pos:start="59:18" pos:end="59:20"><name pos:start="59:18" pos:end="59:20">int</name></type> <name pos:start="59:22" pos:end="59:22">i</name><init pos:start="59:23" pos:end="59:27">=<expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:24">h</name><index pos:start="59:25" pos:end="59:27">[<expr pos:start="59:26" pos:end="59:26"><name pos:start="59:26" pos:end="59:26">x</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="59:29" pos:end="59:31"><expr pos:start="59:29" pos:end="59:30"><operator pos:start="59:29" pos:end="59:29">~</operator><name pos:start="59:30" pos:end="59:30">i</name></expr>;</condition><incr pos:start="59:32" pos:end="59:38"><expr pos:start="59:32" pos:end="59:38"><name pos:start="59:32" pos:end="59:32">i</name><operator pos:start="59:33" pos:end="59:33">=</operator><name pos:start="59:34" pos:end="59:38"><name pos:start="59:34" pos:end="59:35">ne</name><index pos:start="59:36" pos:end="59:38">[<expr pos:start="59:37" pos:end="59:37"><name pos:start="59:37" pos:end="59:37">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="59:40" pos:end="64:13">{<block_content pos:start="60:17" pos:end="63:17">
                <decl_stmt pos:start="60:17" pos:end="60:27"><decl pos:start="60:17" pos:end="60:26"><type pos:start="60:17" pos:end="60:19"><name pos:start="60:17" pos:end="60:19">int</name></type> <name pos:start="60:21" pos:end="60:21">j</name><init pos:start="60:22" pos:end="60:26">=<expr pos:start="60:23" pos:end="60:26"><name pos:start="60:23" pos:end="60:26"><name pos:start="60:23" pos:end="60:23">e</name><index pos:start="60:24" pos:end="60:26">[<expr pos:start="60:25" pos:end="60:25"><name pos:start="60:25" pos:end="60:25">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt pos:start="61:17" pos:end="63:17"><if pos:start="61:17" pos:end="63:17">if <condition pos:start="61:20" pos:end="61:43">(<expr pos:start="61:21" pos:end="61:42"><name pos:start="61:21" pos:end="61:21">j</name><operator pos:start="61:22" pos:end="61:23">!=</operator><name pos:start="61:24" pos:end="61:24">i</name> <operator pos:start="61:26" pos:end="61:27">&amp;&amp;</operator> <call pos:start="61:29" pos:end="61:42"><name pos:start="61:29" pos:end="61:39"><name pos:start="61:29" pos:end="61:33">point</name><operator pos:start="61:34" pos:end="61:34">.</operator><name pos:start="61:35" pos:end="61:39">count</name></name><argument_list pos:start="61:40" pos:end="61:42">(<argument pos:start="61:41" pos:end="61:41"><expr pos:start="61:41" pos:end="61:41"><name pos:start="61:41" pos:end="61:41">j</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="61:44" pos:end="63:17">{<block_content pos:start="62:21" pos:end="62:26">
                    <expr_stmt pos:start="62:21" pos:end="62:26"><expr pos:start="62:21" pos:end="62:25"><name pos:start="62:21" pos:end="62:23">sum</name><operator pos:start="62:24" pos:end="62:25">++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt pos:start="66:9" pos:end="66:16"><expr pos:start="66:9" pos:end="66:15"><name pos:start="66:9" pos:end="66:11">sum</name><operator pos:start="66:12" pos:end="66:14">&gt;&gt;=</operator><literal type="number" pos:start="66:15" pos:end="66:15">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="67:9" pos:end="69:9"><if pos:start="67:9" pos:end="69:9">if <condition pos:start="67:12" pos:end="67:29">(<expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:15">sum</name><operator pos:start="67:16" pos:end="67:16">&gt;</operator><call pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:21">point</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:26">size</name></name><argument_list pos:start="67:27" pos:end="67:28">()</argument_list></call></expr>)</condition><block pos:start="67:30" pos:end="69:9">{<block_content pos:start="68:13" pos:end="68:22">
            <expr_stmt pos:start="68:13" pos:end="68:22"><expr pos:start="68:13" pos:end="68:21"><name pos:start="68:13" pos:end="68:16">ans2</name><operator pos:start="68:17" pos:end="68:18">+=</operator><name pos:start="68:19" pos:end="68:21">sum</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function pos:start="72:1" pos:end="89:1"><type pos:start="72:1" pos:end="72:3"><name pos:start="72:1" pos:end="72:3">int</name></type> <name pos:start="72:5" pos:end="72:8">main</name><parameter_list pos:start="72:9" pos:end="72:10">()</parameter_list><block pos:start="72:11" pos:end="89:1">{<block_content pos:start="73:5" pos:end="88:13">
    <expr_stmt pos:start="73:5" pos:end="73:13"><expr pos:start="73:5" pos:end="73:12"><call pos:start="73:5" pos:end="73:12"><name pos:start="73:5" pos:end="73:10">c_plus</name><argument_list pos:start="73:11" pos:end="73:12">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:11"><expr pos:start="74:5" pos:end="74:10"><call pos:start="74:5" pos:end="74:10"><name pos:start="74:5" pos:end="74:8">init</name><argument_list pos:start="74:9" pos:end="74:10">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:14"><expr pos:start="75:5" pos:end="75:13"><name pos:start="75:5" pos:end="75:7">cin</name><operator pos:start="75:8" pos:end="75:9">&gt;&gt;</operator><name pos:start="75:10" pos:end="75:10">n</name><operator pos:start="75:11" pos:end="75:12">&gt;&gt;</operator><name pos:start="75:13" pos:end="75:13">m</name></expr>;</expr_stmt>
    <macro pos:start="76:5" pos:end="76:15"><name pos:start="76:5" pos:end="76:8">_for</name><argument_list pos:start="76:9" pos:end="76:15">(<argument pos:start="76:10" pos:end="76:10">i</argument>,<argument pos:start="76:12" pos:end="76:12"><literal type="number" pos:start="76:12" pos:end="76:12">0</literal></argument>,<argument pos:start="76:14" pos:end="76:14">m</argument>)</argument_list></macro><block pos:start="76:16" pos:end="81:5">{<block_content pos:start="77:9" pos:end="80:17">
        <decl_stmt pos:start="77:9" pos:end="77:16"><decl pos:start="77:9" pos:end="77:13"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">a</name></decl>,<decl pos:start="77:15" pos:end="77:15"><type ref="prev" pos:start="77:9" pos:end="77:11"/><name pos:start="77:15" pos:end="77:15">b</name></decl>;</decl_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:18"><expr pos:start="78:9" pos:end="78:17"><name pos:start="78:9" pos:end="78:11">cin</name><operator pos:start="78:12" pos:end="78:13">&gt;&gt;</operator><name pos:start="78:14" pos:end="78:14">a</name><operator pos:start="78:15" pos:end="78:16">&gt;&gt;</operator><name pos:start="78:17" pos:end="78:17">b</name></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:17"><expr pos:start="79:9" pos:end="79:16"><call pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:11">add</name><argument_list pos:start="79:12" pos:end="79:16">(<argument pos:start="79:13" pos:end="79:13"><expr pos:start="79:13" pos:end="79:13"><name pos:start="79:13" pos:end="79:13">a</name></expr></argument>,<argument pos:start="79:15" pos:end="79:15"><expr pos:start="79:15" pos:end="79:15"><name pos:start="79:15" pos:end="79:15">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="80:9" pos:end="80:17"><expr pos:start="80:9" pos:end="80:16"><call pos:start="80:9" pos:end="80:16"><name pos:start="80:9" pos:end="80:11">add</name><argument_list pos:start="80:12" pos:end="80:16">(<argument pos:start="80:13" pos:end="80:13"><expr pos:start="80:13" pos:end="80:13"><name pos:start="80:13" pos:end="80:13">b</name></expr></argument>,<argument pos:start="80:15" pos:end="80:15"><expr pos:start="80:15" pos:end="80:15"><name pos:start="80:15" pos:end="80:15">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro pos:start="82:5" pos:end="82:15"><name pos:start="82:5" pos:end="82:8">_for</name><argument_list pos:start="82:9" pos:end="82:15">(<argument pos:start="82:10" pos:end="82:10">i</argument>,<argument pos:start="82:12" pos:end="82:12"><literal type="number" pos:start="82:12" pos:end="82:12">0</literal></argument>,<argument pos:start="82:14" pos:end="82:14">n</argument>)</argument_list></macro><block pos:start="82:16" pos:end="86:5">{<block_content pos:start="83:9" pos:end="85:9">
        <if_stmt pos:start="83:9" pos:end="85:9"><if pos:start="83:9" pos:end="85:9">if <condition pos:start="83:12" pos:end="83:20">(<expr pos:start="83:13" pos:end="83:19"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:19"><name pos:start="83:14" pos:end="83:16">vis</name><index pos:start="83:17" pos:end="83:19">[<expr pos:start="83:18" pos:end="83:18"><name pos:start="83:18" pos:end="83:18">i</name></expr>]</index></name></expr>)</condition><block pos:start="83:21" pos:end="85:9">{<block_content pos:start="84:13" pos:end="84:25">
            <expr_stmt pos:start="84:13" pos:end="84:25"><expr pos:start="84:13" pos:end="84:24"><call pos:start="84:13" pos:end="84:24"><name pos:start="84:13" pos:end="84:18">tarjan</name><argument_list pos:start="84:19" pos:end="84:24">(<argument pos:start="84:20" pos:end="84:20"><expr pos:start="84:20" pos:end="84:20"><name pos:start="84:20" pos:end="84:20">i</name></expr></argument>,<argument pos:start="84:22" pos:end="84:23"><expr pos:start="84:22" pos:end="84:23"><operator pos:start="84:22" pos:end="84:22">-</operator><literal type="number" pos:start="84:23" pos:end="84:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt pos:start="87:5" pos:end="87:32"><expr pos:start="87:5" pos:end="87:31"><name pos:start="87:5" pos:end="87:8">cout</name><operator pos:start="87:9" pos:end="87:10">&lt;&lt;</operator><name pos:start="87:11" pos:end="87:14">ans1</name><operator pos:start="87:15" pos:end="87:16">&lt;&lt;</operator><literal type="char" pos:start="87:17" pos:end="87:19">' '</literal><operator pos:start="87:20" pos:end="87:21">&lt;&lt;</operator><name pos:start="87:22" pos:end="87:25">ans2</name><operator pos:start="87:26" pos:end="87:27">&lt;&lt;</operator><name pos:start="87:28" pos:end="87:31">endl</name></expr>;</expr_stmt>
    <return pos:start="88:5" pos:end="88:13">return <expr pos:start="88:12" pos:end="88:12"><literal type="number" pos:start="88:12" pos:end="88:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
