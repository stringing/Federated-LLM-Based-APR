<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/238/238.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:23"><decl pos:start="3:1" pos:end="3:22"><type pos:start="3:1" pos:end="3:9"><specifier pos:start="3:1" pos:end="3:5">const</specifier> <name pos:start="3:7" pos:end="3:9">int</name></type> <name pos:start="3:11" pos:end="3:14">maxn</name> <init pos:start="3:16" pos:end="3:22">= <expr pos:start="3:18" pos:end="3:22"><literal type="number" pos:start="3:18" pos:end="3:22">10010</literal></expr></init></decl>;</decl_stmt>    
<decl_stmt pos:start="4:1" pos:end="4:23"><decl pos:start="4:1" pos:end="4:22"><type pos:start="4:1" pos:end="4:9"><specifier pos:start="4:1" pos:end="4:5">const</specifier> <name pos:start="4:7" pos:end="4:9">int</name></type> <name pos:start="4:11" pos:end="4:14">maxm</name> <init pos:start="4:16" pos:end="4:22">= <expr pos:start="4:18" pos:end="4:22"><literal type="number" pos:start="4:18" pos:end="4:22">10010</literal></expr></init></decl>;</decl_stmt>  
<struct pos:start="5:1" pos:end="7:15">struct <name pos:start="5:8" pos:end="5:11">Edge</name> <block pos:start="5:13" pos:end="7:1">{<public type="default" pos:start="6:5" pos:end="6:17">            
    <decl_stmt pos:start="6:5" pos:end="6:17"><decl pos:start="6:5" pos:end="6:10"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:10">to</name></decl>, <decl pos:start="6:13" pos:end="6:16"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:13" pos:end="6:16">next</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="7:3" pos:end="7:14"><name pos:start="7:3" pos:end="7:14"><name pos:start="7:3" pos:end="7:3">e</name><index pos:start="7:4" pos:end="7:14">[<expr pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:8">maxm</name> <operator pos:start="7:10" pos:end="7:11">&lt;&lt;</operator> <literal type="number" pos:start="7:13" pos:end="7:13">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt pos:start="8:1" pos:end="8:9"><decl pos:start="8:1" pos:end="8:8"><type pos:start="8:1" pos:end="8:3"><name pos:start="8:1" pos:end="8:3">int</name></type> <name pos:start="8:5" pos:end="8:8">ecnt</name></decl>;</decl_stmt>  
<decl_stmt pos:start="9:1" pos:end="9:15"><decl pos:start="9:1" pos:end="9:14"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:8">head</name><index pos:start="9:9" pos:end="9:14">[<expr pos:start="9:10" pos:end="9:13"><name pos:start="9:10" pos:end="9:13">maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="10:1" pos:end="10:17"><decl pos:start="10:1" pos:end="10:16"><type pos:start="10:1" pos:end="10:3"><name pos:start="10:1" pos:end="10:3">int</name></type> <name pos:start="10:5" pos:end="10:16"><name pos:start="10:5" pos:end="10:10">belong</name><index pos:start="10:11" pos:end="10:16">[<expr pos:start="10:12" pos:end="10:15"><name pos:start="10:12" pos:end="10:15">maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="11:1" pos:end="16:1"><type pos:start="11:1" pos:end="11:4"><name pos:start="11:1" pos:end="11:4">void</name></type> <name pos:start="11:6" pos:end="11:12">addEdge</name><parameter_list pos:start="11:13" pos:end="11:26">(<parameter pos:start="11:14" pos:end="11:18"><decl pos:start="11:14" pos:end="11:18"><type pos:start="11:14" pos:end="11:18"><name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">u</name></decl></parameter>, <parameter pos:start="11:21" pos:end="11:25"><decl pos:start="11:21" pos:end="11:25"><type pos:start="11:21" pos:end="11:25"><name pos:start="11:21" pos:end="11:23">int</name></type> <name pos:start="11:25" pos:end="11:25">v</name></decl></parameter>)</parameter_list> <block pos:start="11:28" pos:end="16:1">{<block_content pos:start="12:5" pos:end="15:19">  
    <expr_stmt pos:start="12:5" pos:end="12:11"><expr pos:start="12:5" pos:end="12:10"><operator pos:start="12:5" pos:end="12:6">++</operator><name pos:start="12:7" pos:end="12:10">ecnt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:5">e</name><index pos:start="13:6" pos:end="13:11">[<expr pos:start="13:7" pos:end="13:10"><name pos:start="13:7" pos:end="13:10">ecnt</name></expr>]</index></name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:14">to</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:18">v</name></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:27"><expr pos:start="14:5" pos:end="14:26"><name pos:start="14:5" pos:end="14:11"><name pos:start="14:5" pos:end="14:5">e</name><index pos:start="14:6" pos:end="14:11">[<expr pos:start="14:7" pos:end="14:10"><name pos:start="14:7" pos:end="14:10">ecnt</name></expr>]</index></name><operator pos:start="14:12" pos:end="14:12">.</operator><name pos:start="14:13" pos:end="14:16">next</name> <operator pos:start="14:18" pos:end="14:18">=</operator> <name pos:start="14:20" pos:end="14:26"><name pos:start="14:20" pos:end="14:23">head</name><index pos:start="14:24" pos:end="14:26">[<expr pos:start="14:25" pos:end="14:25"><name pos:start="14:25" pos:end="14:25">u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:19"><expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:8">head</name><index pos:start="15:9" pos:end="15:11">[<expr pos:start="15:10" pos:end="15:10"><name pos:start="15:10" pos:end="15:10">u</name></expr>]</index></name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:18">ecnt</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt pos:start="17:1" pos:end="17:6"><decl pos:start="17:1" pos:end="17:5"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:5">n</name></decl>;</decl_stmt>          
<decl_stmt pos:start="18:1" pos:end="18:6"><decl pos:start="18:1" pos:end="18:5"><type pos:start="18:1" pos:end="18:3"><name pos:start="18:1" pos:end="18:3">int</name></type> <name pos:start="18:5" pos:end="18:5">m</name></decl>;</decl_stmt>          
<decl_stmt pos:start="19:1" pos:end="19:14"><decl pos:start="19:1" pos:end="19:13"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:7">dfn</name><index pos:start="19:8" pos:end="19:13">[<expr pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:12">maxn</name></expr>]</index></name></decl>;</decl_stmt>  
<decl_stmt pos:start="20:1" pos:end="20:14"><decl pos:start="20:1" pos:end="20:13"><type pos:start="20:1" pos:end="20:3"><name pos:start="20:1" pos:end="20:3">int</name></type> <name pos:start="20:5" pos:end="20:13"><name pos:start="20:5" pos:end="20:7">low</name><index pos:start="20:8" pos:end="20:13">[<expr pos:start="20:9" pos:end="20:12"><name pos:start="20:9" pos:end="20:12">maxn</name></expr>]</index></name></decl>;</decl_stmt>  
<decl_stmt pos:start="21:1" pos:end="21:10"><decl pos:start="21:1" pos:end="21:9"><type pos:start="21:1" pos:end="21:3"><name pos:start="21:1" pos:end="21:3">int</name></type> <name pos:start="21:5" pos:end="21:9">timer</name></decl>;</decl_stmt>      
<decl_stmt pos:start="22:1" pos:end="22:12"><decl pos:start="22:1" pos:end="22:11"><type pos:start="22:1" pos:end="22:3"><name pos:start="22:1" pos:end="22:3">int</name></type> <name pos:start="22:5" pos:end="22:11">bcc_cnt</name></decl>;</decl_stmt>    
<decl_stmt pos:start="23:1" pos:end="23:15"><decl pos:start="23:1" pos:end="23:14"><type pos:start="23:1" pos:end="23:3"><name pos:start="23:1" pos:end="23:3">int</name></type> <name pos:start="23:5" pos:end="23:14">bridge_cnt</name></decl>;</decl_stmt>
<decl_stmt pos:start="24:1" pos:end="24:22"><decl pos:start="24:1" pos:end="24:21"><type pos:start="24:1" pos:end="24:11"><name pos:start="24:1" pos:end="24:11"><name pos:start="24:1" pos:end="24:6">vector</name><argument_list type="generic" pos:start="24:7" pos:end="24:11">&lt;<argument pos:start="24:8" pos:end="24:10"><expr pos:start="24:8" pos:end="24:10"><name pos:start="24:8" pos:end="24:10">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="24:13" pos:end="24:21"><name pos:start="24:13" pos:end="24:15">bcc</name><index pos:start="24:16" pos:end="24:21">[<expr pos:start="24:17" pos:end="24:20"><name pos:start="24:17" pos:end="24:20">maxn</name></expr>]</index></name></decl>;</decl_stmt>  
<decl_stmt pos:start="25:1" pos:end="25:13"><decl pos:start="25:1" pos:end="25:12"><type pos:start="25:1" pos:end="25:10"><name pos:start="25:1" pos:end="25:10"><name pos:start="25:1" pos:end="25:5">stack</name><argument_list type="generic" pos:start="25:6" pos:end="25:10">&lt;<argument pos:start="25:7" pos:end="25:9"><expr pos:start="25:7" pos:end="25:9"><name pos:start="25:7" pos:end="25:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="25:12" pos:end="25:12">S</name></decl>;</decl_stmt>

<function pos:start="27:1" pos:end="53:1"><type pos:start="27:1" pos:end="27:4"><name pos:start="27:1" pos:end="27:4">void</name></type> <name pos:start="27:6" pos:end="27:11">tarjan</name><parameter_list pos:start="27:12" pos:end="27:30">(<parameter pos:start="27:13" pos:end="27:17"><decl pos:start="27:13" pos:end="27:17"><type pos:start="27:13" pos:end="27:17"><name pos:start="27:13" pos:end="27:15">int</name></type> <name pos:start="27:17" pos:end="27:17">u</name></decl></parameter>, <parameter pos:start="27:20" pos:end="27:29"><decl pos:start="27:20" pos:end="27:29"><type pos:start="27:20" pos:end="27:29"><name pos:start="27:20" pos:end="27:22">int</name></type> <name pos:start="27:24" pos:end="27:29">father</name></decl></parameter>)</parameter_list> <block pos:start="27:32" pos:end="53:1">{<block_content pos:start="28:5" pos:end="52:5">
    <expr_stmt pos:start="28:5" pos:end="28:30"><expr pos:start="28:5" pos:end="28:29"><name pos:start="28:5" pos:end="28:10"><name pos:start="28:5" pos:end="28:7">dfn</name><index pos:start="28:8" pos:end="28:10">[<expr pos:start="28:9" pos:end="28:9"><name pos:start="28:9" pos:end="28:9">u</name></expr>]</index></name> <operator pos:start="28:12" pos:end="28:12">=</operator> <name pos:start="28:14" pos:end="28:19"><name pos:start="28:14" pos:end="28:16">low</name><index pos:start="28:17" pos:end="28:19">[<expr pos:start="28:18" pos:end="28:18"><name pos:start="28:18" pos:end="28:18">u</name></expr>]</index></name> <operator pos:start="28:21" pos:end="28:21">=</operator> <operator pos:start="28:23" pos:end="28:24">++</operator><name pos:start="28:25" pos:end="28:29">timer</name></expr>;</expr_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:13">child</name> <init pos:start="29:15" pos:end="29:17">= <expr pos:start="29:17" pos:end="29:17"><literal type="number" pos:start="29:17" pos:end="29:17">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:14"><expr pos:start="30:5" pos:end="30:13"><call pos:start="30:5" pos:end="30:13"><name pos:start="30:5" pos:end="30:10"><name pos:start="30:5" pos:end="30:5">S</name><operator pos:start="30:6" pos:end="30:6">.</operator><name pos:start="30:7" pos:end="30:10">push</name></name><argument_list pos:start="30:11" pos:end="30:13">(<argument pos:start="30:12" pos:end="30:12"><expr pos:start="30:12" pos:end="30:12"><name pos:start="30:12" pos:end="30:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="31:5" pos:end="40:5">for <control pos:start="31:9" pos:end="31:43">(<init pos:start="31:10" pos:end="31:25"><decl pos:start="31:10" pos:end="31:24"><type pos:start="31:10" pos:end="31:12"><name pos:start="31:10" pos:end="31:12">int</name></type> <name pos:start="31:14" pos:end="31:14">i</name> <init pos:start="31:16" pos:end="31:24">= <expr pos:start="31:18" pos:end="31:24"><name pos:start="31:18" pos:end="31:24"><name pos:start="31:18" pos:end="31:21">head</name><index pos:start="31:22" pos:end="31:24">[<expr pos:start="31:23" pos:end="31:23"><name pos:start="31:23" pos:end="31:23">u</name></expr>]</index></name></expr></init></decl>;</init> <condition pos:start="31:27" pos:end="31:28"><expr pos:start="31:27" pos:end="31:27"><name pos:start="31:27" pos:end="31:27">i</name></expr>;</condition> <incr pos:start="31:30" pos:end="31:42"><expr pos:start="31:30" pos:end="31:42"><name pos:start="31:30" pos:end="31:30">i</name> <operator pos:start="31:32" pos:end="31:32">=</operator> <name pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:34">e</name><index pos:start="31:35" pos:end="31:37">[<expr pos:start="31:36" pos:end="31:36"><name pos:start="31:36" pos:end="31:36">i</name></expr>]</index></name><operator pos:start="31:38" pos:end="31:38">.</operator><name pos:start="31:39" pos:end="31:42">next</name></expr></incr>)</control> <block pos:start="31:45" pos:end="40:5">{<block_content pos:start="32:9" pos:end="39:9">
        <decl_stmt pos:start="32:9" pos:end="32:24"><decl pos:start="32:9" pos:end="32:23"><type pos:start="32:9" pos:end="32:11"><name pos:start="32:9" pos:end="32:11">int</name></type> <name pos:start="32:13" pos:end="32:13">v</name> <init pos:start="32:15" pos:end="32:23">= <expr pos:start="32:17" pos:end="32:23"><name pos:start="32:17" pos:end="32:20"><name pos:start="32:17" pos:end="32:17">e</name><index pos:start="32:18" pos:end="32:20">[<expr pos:start="32:19" pos:end="32:19"><name pos:start="32:19" pos:end="32:19">i</name></expr>]</index></name><operator pos:start="32:21" pos:end="32:21">.</operator><name pos:start="32:22" pos:end="32:23">to</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:24">(<expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:15">dfn</name><index pos:start="33:16" pos:end="33:18">[<expr pos:start="33:17" pos:end="33:17"><name pos:start="33:17" pos:end="33:17">v</name></expr>]</index></name> <operator pos:start="33:20" pos:end="33:21">==</operator> <literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr>)</condition> <block pos:start="33:26" pos:end="37:9">{<block_content pos:start="34:13" pos:end="36:41">
            <expr_stmt pos:start="34:13" pos:end="34:20"><expr pos:start="34:13" pos:end="34:19"><name pos:start="34:13" pos:end="34:17">child</name><operator pos:start="34:18" pos:end="34:19">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:24"><call pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:18">tarjan</name><argument_list pos:start="35:19" pos:end="35:24">(<argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">v</name></expr></argument>, <argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="36:13" pos:end="36:41"><expr pos:start="36:13" pos:end="36:40"><name pos:start="36:13" pos:end="36:18"><name pos:start="36:13" pos:end="36:15">low</name><index pos:start="36:16" pos:end="36:18">[<expr pos:start="36:17" pos:end="36:17"><name pos:start="36:17" pos:end="36:17">u</name></expr>]</index></name> <operator pos:start="36:20" pos:end="36:20">=</operator> <call pos:start="36:22" pos:end="36:40"><name pos:start="36:22" pos:end="36:24">min</name><argument_list pos:start="36:25" pos:end="36:40">(<argument pos:start="36:26" pos:end="36:31"><expr pos:start="36:26" pos:end="36:31"><name pos:start="36:26" pos:end="36:31"><name pos:start="36:26" pos:end="36:28">low</name><index pos:start="36:29" pos:end="36:31">[<expr pos:start="36:30" pos:end="36:30"><name pos:start="36:30" pos:end="36:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="36:34" pos:end="36:39"><expr pos:start="36:34" pos:end="36:39"><name pos:start="36:34" pos:end="36:39"><name pos:start="36:34" pos:end="36:36">low</name><index pos:start="36:37" pos:end="36:39">[<expr pos:start="36:38" pos:end="36:38"><name pos:start="36:38" pos:end="36:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="37:11" pos:end="39:9">else if <condition pos:start="37:19" pos:end="37:31">(<expr pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:20">v</name> <operator pos:start="37:22" pos:end="37:23">!=</operator> <name pos:start="37:25" pos:end="37:30">father</name></expr>)</condition> <block pos:start="37:33" pos:end="39:9">{<block_content pos:start="38:13" pos:end="38:41">
            <expr_stmt pos:start="38:13" pos:end="38:41"><expr pos:start="38:13" pos:end="38:40"><name pos:start="38:13" pos:end="38:18"><name pos:start="38:13" pos:end="38:15">low</name><index pos:start="38:16" pos:end="38:18">[<expr pos:start="38:17" pos:end="38:17"><name pos:start="38:17" pos:end="38:17">u</name></expr>]</index></name> <operator pos:start="38:20" pos:end="38:20">=</operator> <call pos:start="38:22" pos:end="38:40"><name pos:start="38:22" pos:end="38:24">min</name><argument_list pos:start="38:25" pos:end="38:40">(<argument pos:start="38:26" pos:end="38:31"><expr pos:start="38:26" pos:end="38:31"><name pos:start="38:26" pos:end="38:31"><name pos:start="38:26" pos:end="38:28">low</name><index pos:start="38:29" pos:end="38:31">[<expr pos:start="38:30" pos:end="38:30"><name pos:start="38:30" pos:end="38:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="38:34" pos:end="38:39"><expr pos:start="38:34" pos:end="38:39"><name pos:start="38:34" pos:end="38:39"><name pos:start="38:34" pos:end="38:36">dfn</name><index pos:start="38:37" pos:end="38:39">[<expr pos:start="38:38" pos:end="38:38"><name pos:start="38:38" pos:end="38:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="41:5" pos:end="52:5"><if pos:start="41:5" pos:end="52:5">if<condition pos:start="41:7" pos:end="41:22">(<expr pos:start="41:8" pos:end="41:21"><name pos:start="41:8" pos:end="41:13"><name pos:start="41:8" pos:end="41:10">dfn</name><index pos:start="41:11" pos:end="41:13">[<expr pos:start="41:12" pos:end="41:12"><name pos:start="41:12" pos:end="41:12">u</name></expr>]</index></name><operator pos:start="41:14" pos:end="41:15">==</operator><name pos:start="41:16" pos:end="41:21"><name pos:start="41:16" pos:end="41:18">low</name><index pos:start="41:19" pos:end="41:21">[<expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">u</name></expr>]</index></name></expr>)</condition><block pos:start="41:23" pos:end="52:5">{<block_content pos:start="42:9" pos:end="51:9">
        <if_stmt pos:start="42:9" pos:end="44:9"><if pos:start="42:9" pos:end="44:9">if<condition pos:start="42:11" pos:end="42:21">(<expr pos:start="42:12" pos:end="42:20"><name pos:start="42:12" pos:end="42:17">father</name><operator pos:start="42:18" pos:end="42:19">!=</operator><name pos:start="42:20" pos:end="42:20">u</name></expr>)</condition><block pos:start="42:22" pos:end="44:9">{<block_content pos:start="43:13" pos:end="43:25">
            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><operator pos:start="43:13" pos:end="43:14">++</operator><name pos:start="43:15" pos:end="43:24">bridge_cnt</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:18"><expr pos:start="45:9" pos:end="45:17"><operator pos:start="45:9" pos:end="45:10">++</operator><name pos:start="45:11" pos:end="45:17">bcc_cnt</name></expr>;</expr_stmt>
        <while pos:start="46:9" pos:end="51:9">while<condition pos:start="46:14" pos:end="46:16">(<expr pos:start="46:15" pos:end="46:15"><literal type="number" pos:start="46:15" pos:end="46:15">1</literal></expr>)</condition><block pos:start="46:17" pos:end="51:9">{<block_content pos:start="47:13" pos:end="50:27">
            <decl_stmt pos:start="47:13" pos:end="47:26"><decl pos:start="47:13" pos:end="47:25"><type pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">int</name></type> <name pos:start="47:17" pos:end="47:17">x</name><init pos:start="47:18" pos:end="47:25">=<expr pos:start="47:19" pos:end="47:25"><call pos:start="47:19" pos:end="47:25"><name pos:start="47:19" pos:end="47:23"><name pos:start="47:19" pos:end="47:19">S</name><operator pos:start="47:20" pos:end="47:20">.</operator><name pos:start="47:21" pos:end="47:23">top</name></name><argument_list pos:start="47:24" pos:end="47:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="48:13" pos:end="48:20"><expr pos:start="48:13" pos:end="48:19"><call pos:start="48:13" pos:end="48:19"><name pos:start="48:13" pos:end="48:17"><name pos:start="48:13" pos:end="48:13">S</name><operator pos:start="48:14" pos:end="48:14">.</operator><name pos:start="48:15" pos:end="48:17">pop</name></name><argument_list pos:start="48:18" pos:end="48:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="49:13" pos:end="49:38"><expr pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:15">bcc</name><index pos:start="49:16" pos:end="49:24">[<expr pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:23">bcc_cnt</name></expr>]</index></name><operator pos:start="49:25" pos:end="49:25">.</operator><call pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:34">push_back</name><argument_list pos:start="49:35" pos:end="49:37">(<argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><name pos:start="49:36" pos:end="49:36">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="50:13" pos:end="50:27"><if pos:start="50:13" pos:end="50:27">if<condition pos:start="50:15" pos:end="50:20">(<expr pos:start="50:16" pos:end="50:19"><name pos:start="50:16" pos:end="50:16">x</name><operator pos:start="50:17" pos:end="50:18">==</operator><name pos:start="50:19" pos:end="50:19">u</name></expr>)</condition><block type="pseudo" pos:start="50:22" pos:end="50:27"><block_content pos:start="50:22" pos:end="50:27"> <break pos:start="50:22" pos:end="50:27">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function pos:start="54:1" pos:end="87:1"><type pos:start="54:1" pos:end="54:3"><name pos:start="54:1" pos:end="54:3">int</name></type> <name pos:start="54:5" pos:end="54:8">main</name><parameter_list pos:start="54:9" pos:end="54:10">()</parameter_list> <block pos:start="54:12" pos:end="87:1">{<block_content pos:start="55:5" pos:end="86:13">
    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><call pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:11">freopen</name><argument_list pos:start="55:12" pos:end="55:32">(<argument pos:start="55:13" pos:end="55:21"><expr pos:start="55:13" pos:end="55:21"><literal type="string" pos:start="55:13" pos:end="55:21">"road.in"</literal></expr></argument>,<argument pos:start="55:23" pos:end="55:25"><expr pos:start="55:23" pos:end="55:25"><literal type="string" pos:start="55:23" pos:end="55:25">"r"</literal></expr></argument>,<argument pos:start="55:27" pos:end="55:31"><expr pos:start="55:27" pos:end="55:31"><name pos:start="55:27" pos:end="55:31">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:35"><expr pos:start="56:5" pos:end="56:34"><call pos:start="56:5" pos:end="56:34"><name pos:start="56:5" pos:end="56:11">freopen</name><argument_list pos:start="56:12" pos:end="56:34">(<argument pos:start="56:13" pos:end="56:22"><expr pos:start="56:13" pos:end="56:22"><literal type="string" pos:start="56:13" pos:end="56:22">"road.out"</literal></expr></argument>,<argument pos:start="56:24" pos:end="56:26"><expr pos:start="56:24" pos:end="56:26"><literal type="string" pos:start="56:24" pos:end="56:26">"w"</literal></expr></argument>,<argument pos:start="56:28" pos:end="56:33"><expr pos:start="56:28" pos:end="56:33"><name pos:start="56:28" pos:end="56:33">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><call pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:9">scanf</name><argument_list pos:start="57:10" pos:end="57:25">(<argument pos:start="57:11" pos:end="57:16"><expr pos:start="57:11" pos:end="57:16"><literal type="string" pos:start="57:11" pos:end="57:16">"%d%d"</literal></expr></argument>, <argument pos:start="57:19" pos:end="57:20"><expr pos:start="57:19" pos:end="57:20"><operator pos:start="57:19" pos:end="57:19">&amp;</operator><name pos:start="57:20" pos:end="57:20">n</name></expr></argument>, <argument pos:start="57:23" pos:end="57:24"><expr pos:start="57:23" pos:end="57:24"><operator pos:start="57:23" pos:end="57:23">&amp;</operator><name pos:start="57:24" pos:end="57:24">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="58:5" pos:end="64:5">for <control pos:start="58:9" pos:end="58:32">(<init pos:start="58:10" pos:end="58:19"><decl pos:start="58:10" pos:end="58:18"><type pos:start="58:10" pos:end="58:12"><name pos:start="58:10" pos:end="58:12">int</name></type> <name pos:start="58:14" pos:end="58:14">i</name> <init pos:start="58:16" pos:end="58:18">= <expr pos:start="58:18" pos:end="58:18"><literal type="number" pos:start="58:18" pos:end="58:18">1</literal></expr></init></decl>;</init> <condition pos:start="58:21" pos:end="58:27"><expr pos:start="58:21" pos:end="58:26"><name pos:start="58:21" pos:end="58:21">i</name> <operator pos:start="58:23" pos:end="58:24">&lt;=</operator> <name pos:start="58:26" pos:end="58:26">m</name></expr>;</condition> <incr pos:start="58:29" pos:end="58:31"><expr pos:start="58:29" pos:end="58:31"><name pos:start="58:29" pos:end="58:29">i</name><operator pos:start="58:30" pos:end="58:31">++</operator></expr></incr>)</control> <block pos:start="58:34" pos:end="64:5">{<block_content pos:start="59:9" pos:end="63:22">
        <decl_stmt pos:start="59:9" pos:end="59:17"><decl pos:start="59:9" pos:end="59:13"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">u</name></decl>, <decl pos:start="59:16" pos:end="59:16"><type ref="prev" pos:start="59:9" pos:end="59:11"/><name pos:start="59:16" pos:end="59:16">v</name></decl>;</decl_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:30"><expr pos:start="60:9" pos:end="60:29"><call pos:start="60:9" pos:end="60:29"><name pos:start="60:9" pos:end="60:13">scanf</name><argument_list pos:start="60:14" pos:end="60:29">(<argument pos:start="60:15" pos:end="60:20"><expr pos:start="60:15" pos:end="60:20"><literal type="string" pos:start="60:15" pos:end="60:20">"%d%d"</literal></expr></argument>, <argument pos:start="60:23" pos:end="60:24"><expr pos:start="60:23" pos:end="60:24"><operator pos:start="60:23" pos:end="60:23">&amp;</operator><name pos:start="60:24" pos:end="60:24">u</name></expr></argument>, <argument pos:start="60:27" pos:end="60:28"><expr pos:start="60:27" pos:end="60:28"><operator pos:start="60:27" pos:end="60:27">&amp;</operator><name pos:start="60:28" pos:end="60:28">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:9">u</name><operator pos:start="61:10" pos:end="61:11">++</operator></expr><operator pos:start="61:12" pos:end="61:12">,</operator><expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:13">v</name><operator pos:start="61:14" pos:end="61:15">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="62:22"><expr pos:start="62:9" pos:end="62:21"><call pos:start="62:9" pos:end="62:21"><name pos:start="62:9" pos:end="62:15">addEdge</name><argument_list pos:start="62:16" pos:end="62:21">(<argument pos:start="62:17" pos:end="62:17"><expr pos:start="62:17" pos:end="62:17"><name pos:start="62:17" pos:end="62:17">u</name></expr></argument>, <argument pos:start="62:20" pos:end="62:20"><expr pos:start="62:20" pos:end="62:20"><name pos:start="62:20" pos:end="62:20">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><call pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:15">addEdge</name><argument_list pos:start="63:16" pos:end="63:21">(<argument pos:start="63:17" pos:end="63:17"><expr pos:start="63:17" pos:end="63:17"><name pos:start="63:17" pos:end="63:17">v</name></expr></argument>, <argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="65:5" pos:end="69:5">for <control pos:start="65:9" pos:end="65:32">(<init pos:start="65:10" pos:end="65:19"><decl pos:start="65:10" pos:end="65:18"><type pos:start="65:10" pos:end="65:12"><name pos:start="65:10" pos:end="65:12">int</name></type> <name pos:start="65:14" pos:end="65:14">i</name> <init pos:start="65:16" pos:end="65:18">= <expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr></init></decl>;</init> <condition pos:start="65:21" pos:end="65:27"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:24">&lt;=</operator> <name pos:start="65:26" pos:end="65:26">n</name></expr>;</condition> <incr pos:start="65:29" pos:end="65:31"><expr pos:start="65:29" pos:end="65:31"><name pos:start="65:29" pos:end="65:29">i</name><operator pos:start="65:30" pos:end="65:31">++</operator></expr></incr>)</control> <block pos:start="65:34" pos:end="69:5">{<block_content pos:start="66:9" pos:end="68:9">
        <if_stmt pos:start="66:9" pos:end="68:9"><if pos:start="66:9" pos:end="68:9">if <condition pos:start="66:12" pos:end="66:24">(<expr pos:start="66:13" pos:end="66:23"><name pos:start="66:13" pos:end="66:18"><name pos:start="66:13" pos:end="66:15">dfn</name><index pos:start="66:16" pos:end="66:18">[<expr pos:start="66:17" pos:end="66:17"><name pos:start="66:17" pos:end="66:17">i</name></expr>]</index></name> <operator pos:start="66:20" pos:end="66:21">==</operator> <literal type="number" pos:start="66:23" pos:end="66:23">0</literal></expr>)</condition> <block pos:start="66:26" pos:end="68:9">{<block_content pos:start="67:13" pos:end="67:25">  
            <expr_stmt pos:start="67:13" pos:end="67:25"><expr pos:start="67:13" pos:end="67:24"><call pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:18">tarjan</name><argument_list pos:start="67:19" pos:end="67:24">(<argument pos:start="67:20" pos:end="67:20"><expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">i</name></expr></argument>, <argument pos:start="67:23" pos:end="67:23"><expr pos:start="67:23" pos:end="67:23"><name pos:start="67:23" pos:end="67:23">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt pos:start="70:5" pos:end="70:14"><decl pos:start="70:5" pos:end="70:13"><type pos:start="70:5" pos:end="70:7"><name pos:start="70:5" pos:end="70:7">int</name></type> <name pos:start="70:9" pos:end="70:11">ans</name><init pos:start="70:12" pos:end="70:13">=<expr pos:start="70:13" pos:end="70:13"><literal type="number" pos:start="70:13" pos:end="70:13">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="71:5" pos:end="84:5">for <control pos:start="71:9" pos:end="71:38">(<init pos:start="71:10" pos:end="71:19"><decl pos:start="71:10" pos:end="71:18"><type pos:start="71:10" pos:end="71:12"><name pos:start="71:10" pos:end="71:12">int</name></type> <name pos:start="71:14" pos:end="71:14">i</name> <init pos:start="71:16" pos:end="71:18">= <expr pos:start="71:18" pos:end="71:18"><literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr></init></decl>;</init> <condition pos:start="71:21" pos:end="71:33"><expr pos:start="71:21" pos:end="71:32"><name pos:start="71:21" pos:end="71:21">i</name> <operator pos:start="71:23" pos:end="71:24">&lt;=</operator> <name pos:start="71:26" pos:end="71:32">bcc_cnt</name></expr>;</condition> <incr pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:35">i</name><operator pos:start="71:36" pos:end="71:37">++</operator></expr></incr>)</control> <block pos:start="71:40" pos:end="84:5">{<block_content pos:start="72:9" pos:end="83:9">
        <decl_stmt pos:start="72:9" pos:end="72:18"><decl pos:start="72:9" pos:end="72:17"><type pos:start="72:9" pos:end="72:11"><name pos:start="72:9" pos:end="72:11">int</name></type> <name pos:start="72:13" pos:end="72:15">sum</name><init pos:start="72:16" pos:end="72:17">=<expr pos:start="72:17" pos:end="72:17"><literal type="number" pos:start="72:17" pos:end="72:17">0</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="73:9" pos:end="79:9">for <control pos:start="73:13" pos:end="73:29">(<init pos:start="73:14" pos:end="73:28"><decl pos:start="73:14" pos:end="73:28"><type pos:start="73:14" pos:end="73:17"><name pos:start="73:14" pos:end="73:17">auto</name></type> <name pos:start="73:19" pos:end="73:19">x</name> <range pos:start="73:21" pos:end="73:28">: <expr pos:start="73:23" pos:end="73:28"><name pos:start="73:23" pos:end="73:28"><name pos:start="73:23" pos:end="73:25">bcc</name><index pos:start="73:26" pos:end="73:28">[<expr pos:start="73:27" pos:end="73:27"><name pos:start="73:27" pos:end="73:27">i</name></expr>]</index></name></expr></range></decl></init>)</control> <block pos:start="73:31" pos:end="79:9">{<block_content pos:start="74:13" pos:end="78:13">
            <for pos:start="74:13" pos:end="78:13">for<control pos:start="74:16" pos:end="74:44">(<init pos:start="74:17" pos:end="74:30"><decl pos:start="74:17" pos:end="74:29"><type pos:start="74:17" pos:end="74:19"><name pos:start="74:17" pos:end="74:19">int</name></type> <name pos:start="74:21" pos:end="74:21">j</name><init pos:start="74:22" pos:end="74:29">=<expr pos:start="74:23" pos:end="74:29"><name pos:start="74:23" pos:end="74:29"><name pos:start="74:23" pos:end="74:26">head</name><index pos:start="74:27" pos:end="74:29">[<expr pos:start="74:28" pos:end="74:28"><name pos:start="74:28" pos:end="74:28">x</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="74:31" pos:end="74:32"><expr pos:start="74:31" pos:end="74:31"><name pos:start="74:31" pos:end="74:31">j</name></expr>;</condition><incr pos:start="74:33" pos:end="74:43"><expr pos:start="74:33" pos:end="74:43"><name pos:start="74:33" pos:end="74:33">j</name><operator pos:start="74:34" pos:end="74:34">=</operator><name pos:start="74:35" pos:end="74:38"><name pos:start="74:35" pos:end="74:35">e</name><index pos:start="74:36" pos:end="74:38">[<expr pos:start="74:37" pos:end="74:37"><name pos:start="74:37" pos:end="74:37">j</name></expr>]</index></name><operator pos:start="74:39" pos:end="74:39">.</operator><name pos:start="74:40" pos:end="74:43">next</name></expr></incr>)</control><block pos:start="74:45" pos:end="78:13">{<block_content pos:start="75:17" pos:end="77:17">
                <if_stmt pos:start="75:17" pos:end="77:17"><if pos:start="75:17" pos:end="77:17">if<condition pos:start="75:19" pos:end="75:30">(<expr pos:start="75:20" pos:end="75:29"><call pos:start="75:20" pos:end="75:29"><name pos:start="75:20" pos:end="75:24">count</name><argument_list pos:start="75:25" pos:end="75:29">(<argument pos:start="75:26" pos:end="75:26"><expr pos:start="75:26" pos:end="75:26"><name pos:start="75:26" pos:end="75:26">i</name></expr></argument>,<argument pos:start="75:28" pos:end="75:28"><expr pos:start="75:28" pos:end="75:28"><name pos:start="75:28" pos:end="75:28">j</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="75:31" pos:end="77:17">{<block_content pos:start="76:21" pos:end="76:27">
                    <expr_stmt pos:start="76:21" pos:end="76:27"><expr pos:start="76:21" pos:end="76:26"><name pos:start="76:21" pos:end="76:23">sum</name><operator pos:start="76:24" pos:end="76:25">+=</operator><literal type="number" pos:start="76:26" pos:end="76:26">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt pos:start="80:9" pos:end="80:15"><expr pos:start="80:9" pos:end="80:14"><name pos:start="80:9" pos:end="80:11">sum</name><operator pos:start="80:12" pos:end="80:13">/=</operator><literal type="number" pos:start="80:14" pos:end="80:14">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="81:9" pos:end="83:9"><if pos:start="81:9" pos:end="83:9">if<condition pos:start="81:11" pos:end="81:29">(<expr pos:start="81:12" pos:end="81:28"><name pos:start="81:12" pos:end="81:14">sum</name><operator pos:start="81:15" pos:end="81:15">&gt;</operator><name pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:18">bcc</name><index pos:start="81:19" pos:end="81:21">[<expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">i</name></expr>]</index></name><operator pos:start="81:22" pos:end="81:22">.</operator><call pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:26">size</name><argument_list pos:start="81:27" pos:end="81:28">()</argument_list></call></expr>)</condition><block pos:start="81:30" pos:end="83:9">{<block_content pos:start="82:13" pos:end="82:31">
            <expr_stmt pos:start="82:13" pos:end="82:31"><expr pos:start="82:13" pos:end="82:30"><name pos:start="82:13" pos:end="82:15">ans</name><operator pos:start="82:16" pos:end="82:17">+=</operator><name pos:start="82:18" pos:end="82:23"><name pos:start="82:18" pos:end="82:20">bcc</name><index pos:start="82:21" pos:end="82:23">[<expr pos:start="82:22" pos:end="82:22"><name pos:start="82:22" pos:end="82:22">i</name></expr>]</index></name><operator pos:start="82:24" pos:end="82:24">.</operator><call pos:start="82:25" pos:end="82:30"><name pos:start="82:25" pos:end="82:28">size</name><argument_list pos:start="82:29" pos:end="82:30">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="85:5" pos:end="85:37"><expr pos:start="85:5" pos:end="85:36"><call pos:start="85:5" pos:end="85:36"><name pos:start="85:5" pos:end="85:10">printf</name><argument_list pos:start="85:11" pos:end="85:36">(<argument pos:start="85:12" pos:end="85:20"><expr pos:start="85:12" pos:end="85:20"><literal type="string" pos:start="85:12" pos:end="85:20">"%d %d\n"</literal></expr></argument>,<argument pos:start="85:22" pos:end="85:31"><expr pos:start="85:22" pos:end="85:31"><name pos:start="85:22" pos:end="85:31">bridge_cnt</name></expr></argument>,<argument pos:start="85:33" pos:end="85:35"><expr pos:start="85:33" pos:end="85:35"><name pos:start="85:33" pos:end="85:35">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="86:5" pos:end="86:13">return <expr pos:start="86:12" pos:end="86:12"><literal type="number" pos:start="86:12" pos:end="86:12">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
