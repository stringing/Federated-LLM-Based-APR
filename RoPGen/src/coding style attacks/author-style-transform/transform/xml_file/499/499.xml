<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/499/499.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:15">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:15">&lt;stack&gt;</cpp:file></cpp:include>
<using pos:start="3:1" pos:end="3:20">using <namespace pos:start="3:7" pos:end="3:20">namespace <name pos:start="3:17" pos:end="3:19">std</name>;</namespace></using>
<function pos:start="4:1" pos:end="54:1"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:8">main</name><parameter_list pos:start="4:9" pos:end="4:10">()</parameter_list><block pos:start="4:11" pos:end="54:1">{<block_content pos:start="5:5" pos:end="53:13">
    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">n</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:11"><expr pos:start="6:5" pos:end="6:10"><name pos:start="6:5" pos:end="6:7">cin</name><operator pos:start="6:8" pos:end="6:9">&gt;&gt;</operator><name pos:start="6:10" pos:end="6:10">n</name></expr>;</expr_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:9">stack</name><argument_list type="generic" pos:start="7:10" pos:end="7:14">&lt;<argument pos:start="7:11" pos:end="7:13"><expr pos:start="7:11" pos:end="7:13"><name pos:start="7:11" pos:end="7:13">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="7:16" pos:end="7:16">a</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:17"><decl pos:start="8:5" pos:end="8:16"><type pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:9">stack</name><argument_list type="generic" pos:start="8:10" pos:end="8:14">&lt;<argument pos:start="8:11" pos:end="8:13"><expr pos:start="8:11" pos:end="8:13"><name pos:start="8:11" pos:end="8:13">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="8:16" pos:end="8:16">b</name></decl>;</decl_stmt>
    <for pos:start="9:5" pos:end="36:5">for<control pos:start="9:8" pos:end="9:24">(<init pos:start="9:9" pos:end="9:16"><decl pos:start="9:9" pos:end="9:15"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name><init pos:start="9:14" pos:end="9:15">=<expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</init><condition pos:start="9:17" pos:end="9:20"><expr pos:start="9:17" pos:end="9:19"><name pos:start="9:17" pos:end="9:17">i</name><operator pos:start="9:18" pos:end="9:18">&lt;</operator><name pos:start="9:19" pos:end="9:19">n</name></expr>;</condition><incr pos:start="9:21" pos:end="9:23"><expr pos:start="9:21" pos:end="9:23"><name pos:start="9:21" pos:end="9:21">i</name><operator pos:start="9:22" pos:end="9:23">++</operator></expr></incr>)</control><block pos:start="9:25" pos:end="36:5">{<block_content pos:start="10:9" pos:end="35:9">
        <decl_stmt pos:start="10:9" pos:end="10:17"><decl pos:start="10:9" pos:end="10:14"><type pos:start="10:9" pos:end="10:12"><name pos:start="10:9" pos:end="10:12">char</name></type> <name pos:start="10:14" pos:end="10:14">c</name></decl>,<decl pos:start="10:16" pos:end="10:16"><type ref="prev" pos:start="10:9" pos:end="10:12"/><name pos:start="10:16" pos:end="10:16">d</name></decl>;</decl_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:18"><expr pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:11">cin</name><operator pos:start="11:12" pos:end="11:13">&gt;&gt;</operator><name pos:start="11:14" pos:end="11:14">c</name><operator pos:start="11:15" pos:end="11:16">&gt;&gt;</operator><name pos:start="11:17" pos:end="11:17">d</name></expr>;</expr_stmt>
        <if_stmt pos:start="12:9" pos:end="35:9"><if pos:start="12:9" pos:end="20:9">if<condition pos:start="12:11" pos:end="12:18">(<expr pos:start="12:12" pos:end="12:17"><name pos:start="12:12" pos:end="12:12">d</name><operator pos:start="12:13" pos:end="12:14">==</operator><literal type="char" pos:start="12:15" pos:end="12:17">'I'</literal></expr>)</condition><block pos:start="12:19" pos:end="20:9">{<block_content pos:start="13:13" pos:end="19:13">
            <decl_stmt pos:start="13:13" pos:end="13:18"><decl pos:start="13:13" pos:end="13:17"><type pos:start="13:13" pos:end="13:15"><name pos:start="13:13" pos:end="13:15">int</name></type> <name pos:start="13:17" pos:end="13:17">k</name></decl>;</decl_stmt>
            <expr_stmt pos:start="14:13" pos:end="14:19"><expr pos:start="14:13" pos:end="14:18"><name pos:start="14:13" pos:end="14:15">cin</name><operator pos:start="14:16" pos:end="14:17">&gt;&gt;</operator><name pos:start="14:18" pos:end="14:18">k</name></expr>;</expr_stmt>
            <if_stmt pos:start="15:13" pos:end="19:13"><if pos:start="15:13" pos:end="17:13">if<condition pos:start="15:15" pos:end="15:22">(<expr pos:start="15:16" pos:end="15:21"><name pos:start="15:16" pos:end="15:16">c</name><operator pos:start="15:17" pos:end="15:18">==</operator><literal type="char" pos:start="15:19" pos:end="15:21">'A'</literal></expr>)</condition><block pos:start="15:23" pos:end="17:13">{<block_content pos:start="16:17" pos:end="16:26">
                <expr_stmt pos:start="16:17" pos:end="16:26"><expr pos:start="16:17" pos:end="16:25"><call pos:start="16:17" pos:end="16:25"><name pos:start="16:17" pos:end="16:22"><name pos:start="16:17" pos:end="16:17">a</name><operator pos:start="16:18" pos:end="16:18">.</operator><name pos:start="16:19" pos:end="16:22">push</name></name><argument_list pos:start="16:23" pos:end="16:25">(<argument pos:start="16:24" pos:end="16:24"><expr pos:start="16:24" pos:end="16:24"><name pos:start="16:24" pos:end="16:24">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else pos:start="17:14" pos:end="19:13">else<block pos:start="17:18" pos:end="19:13">{<block_content pos:start="18:17" pos:end="18:26">
                <expr_stmt pos:start="18:17" pos:end="18:26"><expr pos:start="18:17" pos:end="18:25"><call pos:start="18:17" pos:end="18:25"><name pos:start="18:17" pos:end="18:22"><name pos:start="18:17" pos:end="18:17">b</name><operator pos:start="18:18" pos:end="18:18">.</operator><name pos:start="18:19" pos:end="18:22">push</name></name><argument_list pos:start="18:23" pos:end="18:25">(<argument pos:start="18:24" pos:end="18:24"><expr pos:start="18:24" pos:end="18:24"><name pos:start="18:24" pos:end="18:24">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="20:10" pos:end="26:9">else if<condition pos:start="20:17" pos:end="20:24">(<expr pos:start="20:18" pos:end="20:23"><name pos:start="20:18" pos:end="20:18">d</name><operator pos:start="20:19" pos:end="20:20">==</operator><literal type="char" pos:start="20:21" pos:end="20:23">'D'</literal></expr>)</condition><block pos:start="20:25" pos:end="26:9">{<block_content pos:start="21:13" pos:end="25:13">
            <if_stmt pos:start="21:13" pos:end="25:13"><if pos:start="21:13" pos:end="23:13">if<condition pos:start="21:15" pos:end="21:22">(<expr pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:16">c</name><operator pos:start="21:17" pos:end="21:18">==</operator><literal type="char" pos:start="21:19" pos:end="21:21">'A'</literal></expr>)</condition><block pos:start="21:23" pos:end="23:13">{<block_content pos:start="22:17" pos:end="22:24">
                <expr_stmt pos:start="22:17" pos:end="22:24"><expr pos:start="22:17" pos:end="22:23"><call pos:start="22:17" pos:end="22:23"><name pos:start="22:17" pos:end="22:21"><name pos:start="22:17" pos:end="22:17">a</name><operator pos:start="22:18" pos:end="22:18">.</operator><name pos:start="22:19" pos:end="22:21">pop</name></name><argument_list pos:start="22:22" pos:end="22:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else pos:start="23:14" pos:end="25:13">else<block pos:start="23:18" pos:end="25:13">{<block_content pos:start="24:17" pos:end="24:24">
                <expr_stmt pos:start="24:17" pos:end="24:24"><expr pos:start="24:17" pos:end="24:23"><call pos:start="24:17" pos:end="24:23"><name pos:start="24:17" pos:end="24:21"><name pos:start="24:17" pos:end="24:17">b</name><operator pos:start="24:18" pos:end="24:18">.</operator><name pos:start="24:19" pos:end="24:21">pop</name></name><argument_list pos:start="24:22" pos:end="24:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if><else pos:start="26:10" pos:end="35:9">else <block pos:start="26:15" pos:end="35:9">{<block_content pos:start="27:13" pos:end="34:13">
            <decl_stmt pos:start="27:13" pos:end="27:25"><decl pos:start="27:13" pos:end="27:24"><type pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:17">stack</name><argument_list type="generic" pos:start="27:18" pos:end="27:22">&lt;<argument pos:start="27:19" pos:end="27:21"><expr pos:start="27:19" pos:end="27:21"><name pos:start="27:19" pos:end="27:21">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="27:24" pos:end="27:24">e</name></decl>;</decl_stmt>
            <while pos:start="28:13" pos:end="31:13">while<condition pos:start="28:18" pos:end="28:29">(<expr pos:start="28:19" pos:end="28:28"><operator pos:start="28:19" pos:end="28:19">!</operator><call pos:start="28:20" pos:end="28:28"><name pos:start="28:20" pos:end="28:26"><name pos:start="28:20" pos:end="28:20">b</name><operator pos:start="28:21" pos:end="28:21">.</operator><name pos:start="28:22" pos:end="28:26">empty</name></name><argument_list pos:start="28:27" pos:end="28:28">()</argument_list></call></expr>)</condition><block pos:start="28:30" pos:end="31:13">{<block_content pos:start="29:17" pos:end="30:24">
                <expr_stmt pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:31"><call pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:17">e</name><operator pos:start="29:18" pos:end="29:18">.</operator><name pos:start="29:19" pos:end="29:22">push</name></name><argument_list pos:start="29:23" pos:end="29:31">(<argument pos:start="29:24" pos:end="29:30"><expr pos:start="29:24" pos:end="29:30"><call pos:start="29:24" pos:end="29:30"><name pos:start="29:24" pos:end="29:28"><name pos:start="29:24" pos:end="29:24">b</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:28">top</name></name><argument_list pos:start="29:29" pos:end="29:30">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="30:17" pos:end="30:24"><expr pos:start="30:17" pos:end="30:23"><call pos:start="30:17" pos:end="30:23"><name pos:start="30:17" pos:end="30:21"><name pos:start="30:17" pos:end="30:17">b</name><operator pos:start="30:18" pos:end="30:18">.</operator><name pos:start="30:19" pos:end="30:21">pop</name></name><argument_list pos:start="30:22" pos:end="30:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while><while pos:start="31:14" pos:end="34:13">while<condition pos:start="31:19" pos:end="31:30">(<expr pos:start="31:20" pos:end="31:29"><operator pos:start="31:20" pos:end="31:20">!</operator><call pos:start="31:21" pos:end="31:29"><name pos:start="31:21" pos:end="31:27"><name pos:start="31:21" pos:end="31:21">e</name><operator pos:start="31:22" pos:end="31:22">.</operator><name pos:start="31:23" pos:end="31:27">empty</name></name><argument_list pos:start="31:28" pos:end="31:29">()</argument_list></call></expr>)</condition><block pos:start="31:31" pos:end="34:13">{<block_content pos:start="32:17" pos:end="33:24">
                <expr_stmt pos:start="32:17" pos:end="32:32"><expr pos:start="32:17" pos:end="32:31"><call pos:start="32:17" pos:end="32:31"><name pos:start="32:17" pos:end="32:22"><name pos:start="32:17" pos:end="32:17">a</name><operator pos:start="32:18" pos:end="32:18">.</operator><name pos:start="32:19" pos:end="32:22">push</name></name><argument_list pos:start="32:23" pos:end="32:31">(<argument pos:start="32:24" pos:end="32:30"><expr pos:start="32:24" pos:end="32:30"><call pos:start="32:24" pos:end="32:30"><name pos:start="32:24" pos:end="32:28"><name pos:start="32:24" pos:end="32:24">e</name><operator pos:start="32:25" pos:end="32:25">.</operator><name pos:start="32:26" pos:end="32:28">top</name></name><argument_list pos:start="32:29" pos:end="32:30">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="33:17" pos:end="33:24"><expr pos:start="33:17" pos:end="33:23"><call pos:start="33:17" pos:end="33:23"><name pos:start="33:17" pos:end="33:21"><name pos:start="33:17" pos:end="33:17">e</name><operator pos:start="33:18" pos:end="33:18">.</operator><name pos:start="33:19" pos:end="33:21">pop</name></name><argument_list pos:start="33:22" pos:end="33:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for><decl_stmt pos:start="36:6" pos:end="36:18"><decl pos:start="36:6" pos:end="36:17"><type pos:start="36:6" pos:end="36:15"><name pos:start="36:6" pos:end="36:15"><name pos:start="36:6" pos:end="36:10">stack</name><argument_list type="generic" pos:start="36:11" pos:end="36:15">&lt;<argument pos:start="36:12" pos:end="36:14"><expr pos:start="36:12" pos:end="36:14"><name pos:start="36:12" pos:end="36:14">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="36:17" pos:end="36:17">g</name></decl>;</decl_stmt>
    <while pos:start="37:5" pos:end="40:5">while<condition pos:start="37:10" pos:end="37:21">(<expr pos:start="37:11" pos:end="37:20"><operator pos:start="37:11" pos:end="37:11">!</operator><call pos:start="37:12" pos:end="37:20"><name pos:start="37:12" pos:end="37:18"><name pos:start="37:12" pos:end="37:12">a</name><operator pos:start="37:13" pos:end="37:13">.</operator><name pos:start="37:14" pos:end="37:18">empty</name></name><argument_list pos:start="37:19" pos:end="37:20">()</argument_list></call></expr>)</condition><block pos:start="37:22" pos:end="40:5">{<block_content pos:start="38:9" pos:end="39:16">
        <expr_stmt pos:start="38:9" pos:end="38:24"><expr pos:start="38:9" pos:end="38:23"><call pos:start="38:9" pos:end="38:23"><name pos:start="38:9" pos:end="38:14"><name pos:start="38:9" pos:end="38:9">g</name><operator pos:start="38:10" pos:end="38:10">.</operator><name pos:start="38:11" pos:end="38:14">push</name></name><argument_list pos:start="38:15" pos:end="38:23">(<argument pos:start="38:16" pos:end="38:22"><expr pos:start="38:16" pos:end="38:22"><call pos:start="38:16" pos:end="38:22"><name pos:start="38:16" pos:end="38:20"><name pos:start="38:16" pos:end="38:16">a</name><operator pos:start="38:17" pos:end="38:17">.</operator><name pos:start="38:18" pos:end="38:20">top</name></name><argument_list pos:start="38:21" pos:end="38:22">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><call pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:9">a</name><operator pos:start="39:10" pos:end="39:10">.</operator><name pos:start="39:11" pos:end="39:13">pop</name></name><argument_list pos:start="39:14" pos:end="39:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while pos:start="41:5" pos:end="44:5">while<condition pos:start="41:10" pos:end="41:21">(<expr pos:start="41:11" pos:end="41:20"><operator pos:start="41:11" pos:end="41:11">!</operator><call pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:18"><name pos:start="41:12" pos:end="41:12">g</name><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:18">empty</name></name><argument_list pos:start="41:19" pos:end="41:20">()</argument_list></call></expr>)</condition><block pos:start="41:22" pos:end="44:5">{<block_content pos:start="42:9" pos:end="43:16">
        <expr_stmt pos:start="42:9" pos:end="42:27"><expr pos:start="42:9" pos:end="42:26"><name pos:start="42:9" pos:end="42:12">cout</name><operator pos:start="42:13" pos:end="42:14">&lt;&lt;</operator><call pos:start="42:15" pos:end="42:21"><name pos:start="42:15" pos:end="42:19"><name pos:start="42:15" pos:end="42:15">g</name><operator pos:start="42:16" pos:end="42:16">.</operator><name pos:start="42:17" pos:end="42:19">top</name></name><argument_list pos:start="42:20" pos:end="42:21">()</argument_list></call><operator pos:start="42:22" pos:end="42:23">&lt;&lt;</operator><literal type="string" pos:start="42:24" pos:end="42:26">" "</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><call pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">g</name><operator pos:start="43:10" pos:end="43:10">.</operator><name pos:start="43:11" pos:end="43:13">pop</name></name><argument_list pos:start="43:14" pos:end="43:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="45:5" pos:end="45:15"><expr pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:8">cout</name><operator pos:start="45:9" pos:end="45:10">&lt;&lt;</operator><name pos:start="45:11" pos:end="45:14">endl</name></expr>;</expr_stmt>
    <while pos:start="46:5" pos:end="49:5">while<condition pos:start="46:10" pos:end="46:21">(<expr pos:start="46:11" pos:end="46:20"><operator pos:start="46:11" pos:end="46:11">!</operator><call pos:start="46:12" pos:end="46:20"><name pos:start="46:12" pos:end="46:18"><name pos:start="46:12" pos:end="46:12">b</name><operator pos:start="46:13" pos:end="46:13">.</operator><name pos:start="46:14" pos:end="46:18">empty</name></name><argument_list pos:start="46:19" pos:end="46:20">()</argument_list></call></expr>)</condition><block pos:start="46:22" pos:end="49:5">{<block_content pos:start="47:9" pos:end="48:16">
        <expr_stmt pos:start="47:9" pos:end="47:24"><expr pos:start="47:9" pos:end="47:23"><call pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:9">g</name><operator pos:start="47:10" pos:end="47:10">.</operator><name pos:start="47:11" pos:end="47:14">push</name></name><argument_list pos:start="47:15" pos:end="47:23">(<argument pos:start="47:16" pos:end="47:22"><expr pos:start="47:16" pos:end="47:22"><call pos:start="47:16" pos:end="47:22"><name pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:16">b</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:20">top</name></name><argument_list pos:start="47:21" pos:end="47:22">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:16"><expr pos:start="48:9" pos:end="48:15"><call pos:start="48:9" pos:end="48:15"><name pos:start="48:9" pos:end="48:13"><name pos:start="48:9" pos:end="48:9">b</name><operator pos:start="48:10" pos:end="48:10">.</operator><name pos:start="48:11" pos:end="48:13">pop</name></name><argument_list pos:start="48:14" pos:end="48:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while><while pos:start="49:6" pos:end="52:5">while<condition pos:start="49:11" pos:end="49:22">(<expr pos:start="49:12" pos:end="49:21"><operator pos:start="49:12" pos:end="49:12">!</operator><call pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:13">g</name><operator pos:start="49:14" pos:end="49:14">.</operator><name pos:start="49:15" pos:end="49:19">empty</name></name><argument_list pos:start="49:20" pos:end="49:21">()</argument_list></call></expr>)</condition><block pos:start="49:23" pos:end="52:5">{<block_content pos:start="50:9" pos:end="51:16">
        <expr_stmt pos:start="50:9" pos:end="50:27"><expr pos:start="50:9" pos:end="50:26"><name pos:start="50:9" pos:end="50:12">cout</name><operator pos:start="50:13" pos:end="50:14">&lt;&lt;</operator><call pos:start="50:15" pos:end="50:21"><name pos:start="50:15" pos:end="50:19"><name pos:start="50:15" pos:end="50:15">g</name><operator pos:start="50:16" pos:end="50:16">.</operator><name pos:start="50:17" pos:end="50:19">top</name></name><argument_list pos:start="50:20" pos:end="50:21">()</argument_list></call><operator pos:start="50:22" pos:end="50:23">&lt;&lt;</operator><literal type="string" pos:start="50:24" pos:end="50:26">" "</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:16"><expr pos:start="51:9" pos:end="51:15"><call pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:9">g</name><operator pos:start="51:10" pos:end="51:10">.</operator><name pos:start="51:11" pos:end="51:13">pop</name></name><argument_list pos:start="51:14" pos:end="51:15">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
