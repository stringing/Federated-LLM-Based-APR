<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/882/882.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:18"><decl pos:start="3:1" pos:end="3:17"><type pos:start="3:1" pos:end="3:4"><name pos:start="3:1" pos:end="3:4">bool</name></type> <name pos:start="3:6" pos:end="3:17"><name pos:start="3:6" pos:end="3:6">a</name><index pos:start="3:7" pos:end="3:17">[<expr pos:start="3:8" pos:end="3:16"><literal type="number" pos:start="3:8" pos:end="3:16">100000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="4:1" pos:end="16:1"><type pos:start="4:1" pos:end="4:4"><name pos:start="4:1" pos:end="4:4">void</name></type> <name pos:start="4:6" pos:end="4:9">find</name><parameter_list pos:start="4:10" pos:end="4:16">(<parameter pos:start="4:11" pos:end="4:15"><decl pos:start="4:11" pos:end="4:15"><type pos:start="4:11" pos:end="4:13"><name pos:start="4:11" pos:end="4:13">int</name></type> <name pos:start="4:15" pos:end="4:15">x</name></decl></parameter>)</parameter_list><block pos:start="4:17" pos:end="16:1">{<block_content pos:start="5:5" pos:end="15:5">
    <if_stmt pos:start="5:5" pos:end="8:5"><if pos:start="5:5" pos:end="8:5">if<condition pos:start="5:7" pos:end="5:17">(<expr pos:start="5:8" pos:end="5:16"><name pos:start="5:8" pos:end="5:11"><name pos:start="5:8" pos:end="5:8">a</name><index pos:start="5:9" pos:end="5:11">[<expr pos:start="5:10" pos:end="5:10"><name pos:start="5:10" pos:end="5:10">x</name></expr>]</index></name> <operator pos:start="5:13" pos:end="5:14">==</operator> <literal type="number" pos:start="5:16" pos:end="5:16">1</literal></expr>)</condition><block pos:start="5:18" pos:end="8:5">{<block_content pos:start="6:9" pos:end="7:15">
        <expr_stmt pos:start="6:9" pos:end="6:18"><expr pos:start="6:9" pos:end="6:17"><name pos:start="6:9" pos:end="6:12">cout</name> <operator pos:start="6:14" pos:end="6:15">&lt;&lt;</operator> <name pos:start="6:17" pos:end="6:17">x</name></expr>;</expr_stmt>
        <return pos:start="7:9" pos:end="7:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:13"><expr pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:5">a</name><index pos:start="9:6" pos:end="9:8">[<expr pos:start="9:7" pos:end="9:7"><name pos:start="9:7" pos:end="9:7">x</name></expr>]</index></name> <operator pos:start="9:10" pos:end="9:10">=</operator> <literal type="number" pos:start="9:12" pos:end="9:12">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:20"><expr pos:start="10:5" pos:end="10:19"><name pos:start="10:5" pos:end="10:8">cout</name> <operator pos:start="10:10" pos:end="10:11">&lt;&lt;</operator> <name pos:start="10:13" pos:end="10:13">x</name> <operator pos:start="10:15" pos:end="10:16">&lt;&lt;</operator><literal type="string" pos:start="10:17" pos:end="10:19">","</literal></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="13:5">if<condition pos:start="11:7" pos:end="11:18">(<expr pos:start="11:8" pos:end="11:17"><name pos:start="11:8" pos:end="11:8">x</name> <operator pos:start="11:10" pos:end="11:10">%</operator> <literal type="number" pos:start="11:12" pos:end="11:12">2</literal> <operator pos:start="11:14" pos:end="11:15">==</operator> <literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr>)</condition><block pos:start="11:19" pos:end="13:5">{<block_content pos:start="12:9" pos:end="12:20">
        <expr_stmt pos:start="12:9" pos:end="12:20"><expr pos:start="12:9" pos:end="12:19"><call pos:start="12:9" pos:end="12:19"><name pos:start="12:9" pos:end="12:12">find</name><argument_list pos:start="12:13" pos:end="12:19">(<argument pos:start="12:14" pos:end="12:18"><expr pos:start="12:14" pos:end="12:18"><name pos:start="12:14" pos:end="12:14">x</name> <operator pos:start="12:16" pos:end="12:16">/</operator> <literal type="number" pos:start="12:18" pos:end="12:18">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else pos:start="13:6" pos:end="15:5">else<block pos:start="13:10" pos:end="15:5">{<block_content pos:start="14:9" pos:end="14:30">
        <expr_stmt pos:start="14:9" pos:end="14:30"><expr pos:start="14:9" pos:end="14:29"><call pos:start="14:9" pos:end="14:29"><name pos:start="14:9" pos:end="14:12">find</name><argument_list pos:start="14:13" pos:end="14:29">(<argument pos:start="14:14" pos:end="14:28"><expr pos:start="14:14" pos:end="14:28"><operator pos:start="14:14" pos:end="14:14">(</operator><name pos:start="14:15" pos:end="14:15">x</name> <operator pos:start="14:17" pos:end="14:17">-</operator> <literal type="number" pos:start="14:19" pos:end="14:19">1</literal><operator pos:start="14:20" pos:end="14:20">)</operator> <operator pos:start="14:22" pos:end="14:22">*</operator> <literal type="number" pos:start="14:24" pos:end="14:26">3</literal> <operator pos:start="14:26" pos:end="14:26">+</operator> <literal type="number" pos:start="14:28" pos:end="14:28">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function pos:start="17:1" pos:end="21:1"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:8">main</name><parameter_list pos:start="17:9" pos:end="17:10">()</parameter_list><block pos:start="17:11" pos:end="21:1">{<block_content pos:start="18:5" pos:end="20:12">
    <decl_stmt pos:start="18:5" pos:end="18:10"><decl pos:start="18:5" pos:end="18:9"><type pos:start="18:5" pos:end="18:7"><name pos:start="18:5" pos:end="18:7">int</name></type> <name pos:start="18:9" pos:end="18:9">n</name></decl>;</decl_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:13"><expr pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:7">cin</name> <operator pos:start="19:9" pos:end="19:10">&gt;&gt;</operator> <name pos:start="19:12" pos:end="19:12">n</name></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:12"><expr pos:start="20:5" pos:end="20:11"><call pos:start="20:5" pos:end="20:11"><name pos:start="20:5" pos:end="20:8">find</name><argument_list pos:start="20:9" pos:end="20:11">(<argument pos:start="20:10" pos:end="20:10"><expr pos:start="20:10" pos:end="20:10"><name pos:start="20:10" pos:end="20:10">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
