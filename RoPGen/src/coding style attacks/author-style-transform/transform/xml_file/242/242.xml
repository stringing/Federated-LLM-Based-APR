<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/242/242.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:16">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:16">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:18">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:18">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:19">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive><cpp:file pos:start="3:9" pos:end="3:19">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:15">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive><cpp:file pos:start="4:9" pos:end="4:15">&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive><cpp:file pos:start="5:9" pos:end="5:13">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:start="6:1" pos:end="6:16">#<cpp:directive pos:start="6:2" pos:end="6:8">include</cpp:directive><cpp:file pos:start="6:9" pos:end="6:16">&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include pos:start="7:1" pos:end="7:13">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive><cpp:file pos:start="7:9" pos:end="7:13">&lt;set&gt;</cpp:file></cpp:include>
<cpp:include pos:start="8:1" pos:end="8:16">#<cpp:directive pos:start="8:2" pos:end="8:8">include</cpp:directive><cpp:file pos:start="8:9" pos:end="8:16">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:start="9:1" pos:end="9:15">#<cpp:directive pos:start="9:2" pos:end="9:8">include</cpp:directive><cpp:file pos:start="9:9" pos:end="9:15">&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include pos:start="10:1" pos:end="10:17">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive><cpp:file pos:start="10:9" pos:end="10:17">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:define pos:start="11:1" pos:end="11:20">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:10"><name pos:start="11:9" pos:end="11:10">ll</name></cpp:macro> <cpp:value pos:start="11:12" pos:end="11:20">long long</cpp:value></cpp:define>
<cpp:define pos:start="12:1" pos:end="12:20">#<cpp:directive pos:start="12:2" pos:end="12:7">define</cpp:directive> <cpp:macro pos:start="12:9" pos:end="12:10"><name pos:start="12:9" pos:end="12:10">pb</name></cpp:macro> <cpp:value pos:start="12:12" pos:end="12:20">push_back</cpp:value></cpp:define>
<cpp:define pos:start="13:1" pos:end="13:20">#<cpp:directive pos:start="13:2" pos:end="13:7">define</cpp:directive> <cpp:macro pos:start="13:9" pos:end="13:10"><name pos:start="13:9" pos:end="13:10">pm</name></cpp:macro> <cpp:value pos:start="13:12" pos:end="13:20">make_pair</cpp:value></cpp:define>
<using pos:start="14:1" pos:end="14:20">using <namespace pos:start="14:7" pos:end="14:20">namespace <name pos:start="14:17" pos:end="14:19">std</name>;</namespace></using>
<decl_stmt pos:start="15:1" pos:end="15:20"><decl pos:start="15:1" pos:end="15:19"><type pos:start="15:1" pos:end="15:9"><specifier pos:start="15:1" pos:end="15:5">const</specifier> <name pos:start="15:7" pos:end="15:9">int</name></type> <name pos:start="15:11" pos:end="15:13">MAX</name> <init pos:start="15:15" pos:end="15:19">= <expr pos:start="15:17" pos:end="15:19"><literal type="number" pos:start="15:17" pos:end="15:19">105</literal></expr></init></decl>;</decl_stmt>
<struct pos:start="16:1" pos:end="18:12">struct <name pos:start="16:8" pos:end="16:11">Node</name> <block pos:start="16:13" pos:end="18:1">{<public type="default" pos:start="17:5" pos:end="17:16">
    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">val</name></decl>,<decl pos:start="17:13" pos:end="17:13"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:13" pos:end="17:13">l</name></decl>,<decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">r</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="18:3" pos:end="18:11"><name pos:start="18:3" pos:end="18:11"><name pos:start="18:3" pos:end="18:6">node</name><index pos:start="18:7" pos:end="18:11">[<expr pos:start="18:8" pos:end="18:10"><name pos:start="18:8" pos:end="18:10">MAX</name></expr>]</index></name></decl>;</struct>
<decl_stmt pos:start="19:1" pos:end="19:8"><decl pos:start="19:1" pos:end="19:7"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:7">tot</name></decl>;</decl_stmt>
<decl_stmt pos:start="20:1" pos:end="20:18"><decl pos:start="20:1" pos:end="20:10"><type pos:start="20:1" pos:end="20:3"><name pos:start="20:1" pos:end="20:3">int</name></type> <name pos:start="20:5" pos:end="20:10"><name pos:start="20:5" pos:end="20:5">c</name><index pos:start="20:6" pos:end="20:10">[<expr pos:start="20:7" pos:end="20:9"><name pos:start="20:7" pos:end="20:9">MAX</name></expr>]</index></name></decl>,<decl pos:start="20:12" pos:end="20:17"><type ref="prev" pos:start="20:1" pos:end="20:3"/><name pos:start="20:12" pos:end="20:17"><name pos:start="20:12" pos:end="20:12">b</name><index pos:start="20:13" pos:end="20:17">[<expr pos:start="20:14" pos:end="20:16"><name pos:start="20:14" pos:end="20:16">MAX</name></expr>]</index></name></decl>;</decl_stmt> 
<function pos:start="21:1" pos:end="38:1"><type pos:start="21:1" pos:end="21:3"><name pos:start="21:1" pos:end="21:3">int</name></type> <name pos:start="21:5" pos:end="21:7">dfs</name><parameter_list pos:start="21:8" pos:end="21:32">(<parameter pos:start="21:9" pos:end="21:15"><decl pos:start="21:9" pos:end="21:15"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">len</name></decl></parameter>,<parameter pos:start="21:17" pos:end="21:23"><decl pos:start="21:17" pos:end="21:23"><type pos:start="21:17" pos:end="21:21"><name pos:start="21:17" pos:end="21:19">int</name></type> <name pos:start="21:21" pos:end="21:23"><name pos:start="21:21" pos:end="21:21">b</name><index pos:start="21:22" pos:end="21:23">[]</index></name></decl></parameter>,<parameter pos:start="21:25" pos:end="21:31"><decl pos:start="21:25" pos:end="21:31"><type pos:start="21:25" pos:end="21:29"><name pos:start="21:25" pos:end="21:27">int</name></type> <name pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:29">c</name><index pos:start="21:30" pos:end="21:31">[]</index></name></decl></parameter>)</parameter_list> <block pos:start="21:34" pos:end="38:1">{<block_content pos:start="22:5" pos:end="37:15">
    <if_stmt pos:start="22:5" pos:end="22:27"><if pos:start="22:5" pos:end="22:27">if<condition pos:start="22:7" pos:end="22:16">(<expr pos:start="22:8" pos:end="22:15"><name pos:start="22:8" pos:end="22:10">len</name> <operator pos:start="22:12" pos:end="22:13">&lt;=</operator> <literal type="number" pos:start="22:15" pos:end="22:15">0</literal></expr>)</condition><block type="pseudo" pos:start="22:18" pos:end="22:27"><block_content pos:start="22:18" pos:end="22:27"> <return pos:start="22:18" pos:end="22:27">return <expr pos:start="22:25" pos:end="22:26"><operator pos:start="22:25" pos:end="22:25">-</operator><literal type="number" pos:start="22:26" pos:end="22:26">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if<condition pos:start="23:7" pos:end="23:16">(<expr pos:start="23:8" pos:end="23:15"><name pos:start="23:8" pos:end="23:10">len</name> <operator pos:start="23:12" pos:end="23:13">==</operator> <literal type="number" pos:start="23:15" pos:end="23:15">1</literal></expr>)</condition> <block pos:start="23:18" pos:end="27:5">{<block_content pos:start="24:9" pos:end="26:19">
        <expr_stmt pos:start="24:9" pos:end="24:31"><expr pos:start="24:9" pos:end="24:30"><name pos:start="24:9" pos:end="24:19"><name pos:start="24:9" pos:end="24:12">node</name><index pos:start="24:13" pos:end="24:19">[<expr pos:start="24:14" pos:end="24:18"><operator pos:start="24:14" pos:end="24:15">++</operator><name pos:start="24:16" pos:end="24:18">tot</name></expr>]</index></name><operator pos:start="24:20" pos:end="24:20">.</operator><name pos:start="24:21" pos:end="24:23">val</name> <operator pos:start="24:25" pos:end="24:25">=</operator> <name pos:start="24:27" pos:end="24:30"><name pos:start="24:27" pos:end="24:27">b</name><index pos:start="24:28" pos:end="24:30">[<expr pos:start="24:29" pos:end="24:29"><literal type="number" pos:start="24:29" pos:end="24:29">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:37"><expr pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:12">node</name><index pos:start="25:13" pos:end="25:17">[<expr pos:start="25:14" pos:end="25:16"><name pos:start="25:14" pos:end="25:16">tot</name></expr>]</index></name><operator pos:start="25:18" pos:end="25:18">.</operator><name pos:start="25:19" pos:end="25:19">l</name><operator pos:start="25:20" pos:end="25:20">=</operator><name pos:start="25:21" pos:end="25:29"><name pos:start="25:21" pos:end="25:24">node</name><index pos:start="25:25" pos:end="25:29">[<expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">tot</name></expr>]</index></name><operator pos:start="25:30" pos:end="25:30">.</operator><name pos:start="25:31" pos:end="25:31">r</name> <operator pos:start="25:33" pos:end="25:33">=</operator> <operator pos:start="25:35" pos:end="25:35">-</operator><literal type="number" pos:start="25:36" pos:end="25:36">1</literal></expr>;</expr_stmt>
        <return pos:start="26:9" pos:end="26:19">return <expr pos:start="26:16" pos:end="26:18"><name pos:start="26:16" pos:end="26:18">tot</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:29"><expr pos:start="28:5" pos:end="28:28"><name pos:start="28:5" pos:end="28:15"><name pos:start="28:5" pos:end="28:8">node</name><index pos:start="28:9" pos:end="28:15">[<expr pos:start="28:10" pos:end="28:14"><operator pos:start="28:10" pos:end="28:11">++</operator><name pos:start="28:12" pos:end="28:14">tot</name></expr>]</index></name><operator pos:start="28:16" pos:end="28:16">.</operator><name pos:start="28:17" pos:end="28:19">val</name> <operator pos:start="28:21" pos:end="28:21">=</operator> <name pos:start="28:23" pos:end="28:28"><name pos:start="28:23" pos:end="28:23">c</name><index pos:start="28:24" pos:end="28:28">[<expr pos:start="28:25" pos:end="28:27"><name pos:start="28:25" pos:end="28:27">len</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">res</name> <init pos:start="29:13" pos:end="29:17">= <expr pos:start="29:15" pos:end="29:17"><name pos:start="29:15" pos:end="29:17">tot</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="30:5" pos:end="30:10"><decl pos:start="30:5" pos:end="30:9"><type pos:start="30:5" pos:end="30:7"><name pos:start="30:5" pos:end="30:7">int</name></type> <name pos:start="30:9" pos:end="30:9">l</name></decl>;</decl_stmt>
    <for pos:start="31:5" pos:end="33:5">for<control pos:start="31:8" pos:end="31:27">(<init pos:start="31:9" pos:end="31:14"><expr pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:9">l</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">1</literal></expr>;</init> <condition pos:start="31:16" pos:end="31:22"><expr pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:16">l</name><operator pos:start="31:17" pos:end="31:18">&lt;=</operator><name pos:start="31:19" pos:end="31:21">len</name></expr>;</condition> <incr pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:24">l</name><operator pos:start="31:25" pos:end="31:26">++</operator></expr></incr>)</control> <block pos:start="31:29" pos:end="33:5">{<block_content pos:start="32:9" pos:end="32:33">
        <if_stmt pos:start="32:9" pos:end="32:33"><if pos:start="32:9" pos:end="32:33">if<condition pos:start="32:11" pos:end="32:26">(<expr pos:start="32:12" pos:end="32:25"><name pos:start="32:12" pos:end="32:15"><name pos:start="32:12" pos:end="32:12">b</name><index pos:start="32:13" pos:end="32:15">[<expr pos:start="32:14" pos:end="32:14"><name pos:start="32:14" pos:end="32:14">l</name></expr>]</index></name> <operator pos:start="32:17" pos:end="32:18">==</operator> <name pos:start="32:20" pos:end="32:25"><name pos:start="32:20" pos:end="32:20">c</name><index pos:start="32:21" pos:end="32:25">[<expr pos:start="32:22" pos:end="32:24"><name pos:start="32:22" pos:end="32:24">len</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="32:28" pos:end="32:33"><block_content pos:start="32:28" pos:end="32:33"> <break pos:start="32:28" pos:end="32:33">break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="34:5" pos:end="34:31"><expr pos:start="34:5" pos:end="34:30"><name pos:start="34:5" pos:end="34:13"><name pos:start="34:5" pos:end="34:8">node</name><index pos:start="34:9" pos:end="34:13">[<expr pos:start="34:10" pos:end="34:12"><name pos:start="34:10" pos:end="34:12">res</name></expr>]</index></name><operator pos:start="34:14" pos:end="34:14">.</operator><name pos:start="34:15" pos:end="34:15">l</name> <operator pos:start="34:17" pos:end="34:17">=</operator> <call pos:start="34:19" pos:end="34:30"><name pos:start="34:19" pos:end="34:21">dfs</name><argument_list pos:start="34:22" pos:end="34:30">(<argument pos:start="34:23" pos:end="34:25"><expr pos:start="34:23" pos:end="34:25"><name pos:start="34:23" pos:end="34:23">l</name><operator pos:start="34:24" pos:end="34:24">-</operator><literal type="number" pos:start="34:25" pos:end="34:25">1</literal></expr></argument>,<argument pos:start="34:27" pos:end="34:27"><expr pos:start="34:27" pos:end="34:27"><name pos:start="34:27" pos:end="34:27">b</name></expr></argument>,<argument pos:start="34:29" pos:end="34:29"><expr pos:start="34:29" pos:end="34:29"><name pos:start="34:29" pos:end="34:29">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="36:5" pos:end="36:39"><expr pos:start="36:5" pos:end="36:38"><name pos:start="36:5" pos:end="36:13"><name pos:start="36:5" pos:end="36:8">node</name><index pos:start="36:9" pos:end="36:13">[<expr pos:start="36:10" pos:end="36:12"><name pos:start="36:10" pos:end="36:12">res</name></expr>]</index></name><operator pos:start="36:14" pos:end="36:14">.</operator><name pos:start="36:15" pos:end="36:15">r</name> <operator pos:start="36:17" pos:end="36:17">=</operator> <call pos:start="36:19" pos:end="36:38"><name pos:start="36:19" pos:end="36:21">dfs</name><argument_list pos:start="36:22" pos:end="36:38">(<argument pos:start="36:23" pos:end="36:27"><expr pos:start="36:23" pos:end="36:27"><name pos:start="36:23" pos:end="36:25">len</name><operator pos:start="36:26" pos:end="36:26">-</operator><name pos:start="36:27" pos:end="36:27">l</name></expr></argument>,<argument pos:start="36:29" pos:end="36:31"><expr pos:start="36:29" pos:end="36:31"><name pos:start="36:29" pos:end="36:29">b</name><operator pos:start="36:30" pos:end="36:30">+</operator><name pos:start="36:31" pos:end="36:31">l</name></expr></argument>,<argument pos:start="36:33" pos:end="36:37"><expr pos:start="36:33" pos:end="36:37"><name pos:start="36:33" pos:end="36:33">c</name><operator pos:start="36:34" pos:end="36:34">+</operator><name pos:start="36:35" pos:end="36:35">l</name><operator pos:start="36:36" pos:end="36:36">-</operator><literal type="number" pos:start="36:37" pos:end="36:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="37:5" pos:end="37:15">return <expr pos:start="37:12" pos:end="37:14"><name pos:start="37:12" pos:end="37:14">res</name></expr>;</return>
</block_content>}</block></function> 
<function pos:start="39:1" pos:end="50:1"><type pos:start="39:1" pos:end="39:4"><name pos:start="39:1" pos:end="39:4">void</name></type> <name pos:start="39:6" pos:end="39:8">bfs</name><parameter_list pos:start="39:9" pos:end="39:10">()</parameter_list> <block pos:start="39:12" pos:end="50:1">{<block_content pos:start="40:5" pos:end="49:17">
    <decl_stmt pos:start="40:5" pos:end="40:17"><decl pos:start="40:5" pos:end="40:16"><type pos:start="40:5" pos:end="40:14"><name pos:start="40:5" pos:end="40:14"><name pos:start="40:5" pos:end="40:9">queue</name><argument_list type="generic" pos:start="40:10" pos:end="40:14">&lt;<argument pos:start="40:11" pos:end="40:13"><expr pos:start="40:11" pos:end="40:13"><name pos:start="40:11" pos:end="40:13">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="40:16" pos:end="40:16">q</name></decl>;</decl_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:14"><expr pos:start="41:5" pos:end="41:13"><call pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:5">q</name><operator pos:start="41:6" pos:end="41:6">.</operator><name pos:start="41:7" pos:end="41:10">push</name></name><argument_list pos:start="41:11" pos:end="41:13">(<argument pos:start="41:12" pos:end="41:12"><expr pos:start="41:12" pos:end="41:12"><literal type="number" pos:start="41:12" pos:end="41:12">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="42:5" pos:end="48:5">while<condition pos:start="42:10" pos:end="42:19">(<expr pos:start="42:11" pos:end="42:18"><call pos:start="42:11" pos:end="42:18"><name pos:start="42:11" pos:end="42:16"><name pos:start="42:11" pos:end="42:11">q</name><operator pos:start="42:12" pos:end="42:12">.</operator><name pos:start="42:13" pos:end="42:16">size</name></name><argument_list pos:start="42:17" pos:end="42:18">()</argument_list></call></expr>)</condition> <block pos:start="42:21" pos:end="48:5">{<block_content pos:start="43:9" pos:end="47:50">
        <decl_stmt pos:start="43:9" pos:end="43:28"><decl pos:start="43:9" pos:end="43:27"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:15">cur</name> <init pos:start="43:17" pos:end="43:27">= <expr pos:start="43:19" pos:end="43:27"><call pos:start="43:19" pos:end="43:27"><name pos:start="43:19" pos:end="43:25"><name pos:start="43:19" pos:end="43:19">q</name><operator pos:start="43:20" pos:end="43:20">.</operator><name pos:start="43:21" pos:end="43:25">front</name></name><argument_list pos:start="43:26" pos:end="43:27">()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt pos:start="43:29" pos:end="43:36"><expr pos:start="43:29" pos:end="43:35"><call pos:start="43:29" pos:end="43:35"><name pos:start="43:29" pos:end="43:33"><name pos:start="43:29" pos:end="43:29">q</name><operator pos:start="43:30" pos:end="43:30">.</operator><name pos:start="43:31" pos:end="43:33">pop</name></name><argument_list pos:start="43:34" pos:end="43:35">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="44:9" pos:end="44:33"><if pos:start="44:9" pos:end="44:33">if<condition pos:start="44:11" pos:end="44:20">(<expr pos:start="44:12" pos:end="44:19"><name pos:start="44:12" pos:end="44:14">cur</name> <operator pos:start="44:16" pos:end="44:17">!=</operator> <literal type="number" pos:start="44:19" pos:end="44:19">1</literal></expr>)</condition><block type="pseudo" pos:start="44:22" pos:end="44:33"><block_content pos:start="44:22" pos:end="44:33"> <expr_stmt pos:start="44:22" pos:end="44:33"><expr pos:start="44:22" pos:end="44:32"><call pos:start="44:22" pos:end="44:32"><name pos:start="44:22" pos:end="44:27">printf</name><argument_list pos:start="44:28" pos:end="44:32">(<argument pos:start="44:29" pos:end="44:31"><expr pos:start="44:29" pos:end="44:31"><literal type="string" pos:start="44:29" pos:end="44:31">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><call pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:14">printf</name><argument_list pos:start="45:15" pos:end="45:34">(<argument pos:start="45:16" pos:end="45:19"><expr pos:start="45:16" pos:end="45:19"><literal type="string" pos:start="45:16" pos:end="45:19">"%d"</literal></expr></argument>,<argument pos:start="45:21" pos:end="45:33"><expr pos:start="45:21" pos:end="45:33"><name pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:24">node</name><index pos:start="45:25" pos:end="45:29">[<expr pos:start="45:26" pos:end="45:28"><name pos:start="45:26" pos:end="45:28">cur</name></expr>]</index></name><operator pos:start="45:30" pos:end="45:30">.</operator><name pos:start="45:31" pos:end="45:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="46:9" pos:end="46:50"><if pos:start="46:9" pos:end="46:50">if<condition pos:start="46:11" pos:end="46:29">(<expr pos:start="46:12" pos:end="46:28"><name pos:start="46:12" pos:end="46:20"><name pos:start="46:12" pos:end="46:15">node</name><index pos:start="46:16" pos:end="46:20">[<expr pos:start="46:17" pos:end="46:19"><name pos:start="46:17" pos:end="46:19">cur</name></expr>]</index></name><operator pos:start="46:21" pos:end="46:21">.</operator><name pos:start="46:22" pos:end="46:22">l</name> <operator pos:start="46:24" pos:end="46:25">!=</operator> <operator pos:start="46:27" pos:end="46:27">-</operator><literal type="number" pos:start="46:28" pos:end="46:28">1</literal></expr>)</condition><block type="pseudo" pos:start="46:31" pos:end="46:50"><block_content pos:start="46:31" pos:end="46:50"> <expr_stmt pos:start="46:31" pos:end="46:50"><expr pos:start="46:31" pos:end="46:49"><call pos:start="46:31" pos:end="46:49"><name pos:start="46:31" pos:end="46:36"><name pos:start="46:31" pos:end="46:31">q</name><operator pos:start="46:32" pos:end="46:32">.</operator><name pos:start="46:33" pos:end="46:36">push</name></name><argument_list pos:start="46:37" pos:end="46:49">(<argument pos:start="46:38" pos:end="46:48"><expr pos:start="46:38" pos:end="46:48"><name pos:start="46:38" pos:end="46:46"><name pos:start="46:38" pos:end="46:41">node</name><index pos:start="46:42" pos:end="46:46">[<expr pos:start="46:43" pos:end="46:45"><name pos:start="46:43" pos:end="46:45">cur</name></expr>]</index></name><operator pos:start="46:47" pos:end="46:47">.</operator><name pos:start="46:48" pos:end="46:48">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="47:9" pos:end="47:50"><if pos:start="47:9" pos:end="47:50">if<condition pos:start="47:11" pos:end="47:29">(<expr pos:start="47:12" pos:end="47:28"><name pos:start="47:12" pos:end="47:20"><name pos:start="47:12" pos:end="47:15">node</name><index pos:start="47:16" pos:end="47:20">[<expr pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">cur</name></expr>]</index></name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:22">r</name> <operator pos:start="47:24" pos:end="47:25">!=</operator> <operator pos:start="47:27" pos:end="47:27">-</operator><literal type="number" pos:start="47:28" pos:end="47:28">1</literal></expr>)</condition><block type="pseudo" pos:start="47:31" pos:end="47:50"><block_content pos:start="47:31" pos:end="47:50"> <expr_stmt pos:start="47:31" pos:end="47:50"><expr pos:start="47:31" pos:end="47:49"><call pos:start="47:31" pos:end="47:49"><name pos:start="47:31" pos:end="47:36"><name pos:start="47:31" pos:end="47:31">q</name><operator pos:start="47:32" pos:end="47:32">.</operator><name pos:start="47:33" pos:end="47:36">push</name></name><argument_list pos:start="47:37" pos:end="47:49">(<argument pos:start="47:38" pos:end="47:48"><expr pos:start="47:38" pos:end="47:48"><name pos:start="47:38" pos:end="47:46"><name pos:start="47:38" pos:end="47:41">node</name><index pos:start="47:42" pos:end="47:46">[<expr pos:start="47:43" pos:end="47:45"><name pos:start="47:43" pos:end="47:45">cur</name></expr>]</index></name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:48">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="49:5" pos:end="49:17"><expr pos:start="49:5" pos:end="49:16"><call pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:10">printf</name><argument_list pos:start="49:11" pos:end="49:16">(<argument pos:start="49:12" pos:end="49:15"><expr pos:start="49:12" pos:end="49:15"><literal type="string" pos:start="49:12" pos:end="49:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="51:1" pos:end="64:1"><type pos:start="51:1" pos:end="51:3"><name pos:start="51:1" pos:end="51:3">int</name></type> <name pos:start="51:5" pos:end="51:8">main</name><parameter_list pos:start="51:9" pos:end="51:10">()</parameter_list>
<block pos:start="52:1" pos:end="64:1">{<block_content pos:start="53:5" pos:end="63:14">
    <expr_stmt pos:start="53:5" pos:end="53:33"><expr pos:start="53:5" pos:end="53:32"><call pos:start="53:5" pos:end="53:32"><name pos:start="53:5" pos:end="53:11">freopen</name><argument_list pos:start="53:12" pos:end="53:32">(<argument pos:start="53:13" pos:end="53:21"><expr pos:start="53:13" pos:end="53:21"><literal type="string" pos:start="53:13" pos:end="53:21">"sort.in"</literal></expr></argument>,<argument pos:start="53:23" pos:end="53:25"><expr pos:start="53:23" pos:end="53:25"><literal type="string" pos:start="53:23" pos:end="53:25">"r"</literal></expr></argument>,<argument pos:start="53:27" pos:end="53:31"><expr pos:start="53:27" pos:end="53:31"><name pos:start="53:27" pos:end="53:31">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:35"><expr pos:start="54:5" pos:end="54:34"><call pos:start="54:5" pos:end="54:34"><name pos:start="54:5" pos:end="54:11">freopen</name><argument_list pos:start="54:12" pos:end="54:34">(<argument pos:start="54:13" pos:end="54:22"><expr pos:start="54:13" pos:end="54:22"><literal type="string" pos:start="54:13" pos:end="54:22">"sort.out"</literal></expr></argument>,<argument pos:start="54:24" pos:end="54:26"><expr pos:start="54:24" pos:end="54:26"><literal type="string" pos:start="54:24" pos:end="54:26">"w"</literal></expr></argument>,<argument pos:start="54:28" pos:end="54:33"><expr pos:start="54:28" pos:end="54:33"><name pos:start="54:28" pos:end="54:33">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="55:5" pos:end="55:10"><decl pos:start="55:5" pos:end="55:9"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:9">n</name></decl>;</decl_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:11"><expr pos:start="56:5" pos:end="56:10"><name pos:start="56:5" pos:end="56:7">cin</name><operator pos:start="56:8" pos:end="56:9">&gt;&gt;</operator><name pos:start="56:10" pos:end="56:10">n</name></expr>;</expr_stmt>
    <for pos:start="57:5" pos:end="57:46">for<control pos:start="57:8" pos:end="57:29">(<init pos:start="57:9" pos:end="57:18"><decl pos:start="57:9" pos:end="57:17"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:13">i</name> <init pos:start="57:15" pos:end="57:17">= <expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr></init></decl>;</init> <condition pos:start="57:20" pos:end="57:24"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:20">i</name><operator pos:start="57:21" pos:end="57:22">&lt;=</operator><name pos:start="57:23" pos:end="57:23">n</name></expr>;</condition> <incr pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:26">i</name><operator pos:start="57:27" pos:end="57:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="57:31" pos:end="57:46"><block_content pos:start="57:31" pos:end="57:46"> <expr_stmt pos:start="57:31" pos:end="57:46"><expr pos:start="57:31" pos:end="57:45"><call pos:start="57:31" pos:end="57:45"><name pos:start="57:31" pos:end="57:35">scanf</name><argument_list pos:start="57:36" pos:end="57:45">(<argument pos:start="57:37" pos:end="57:40"><expr pos:start="57:37" pos:end="57:40"><literal type="string" pos:start="57:37" pos:end="57:40">"%d"</literal></expr></argument>,<argument pos:start="57:42" pos:end="57:44"><expr pos:start="57:42" pos:end="57:44"><name pos:start="57:42" pos:end="57:42">c</name><operator pos:start="57:43" pos:end="57:43">+</operator><name pos:start="57:44" pos:end="57:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <for pos:start="58:5" pos:end="58:46">for<control pos:start="58:8" pos:end="58:29">(<init pos:start="58:9" pos:end="58:18"><decl pos:start="58:9" pos:end="58:17"><type pos:start="58:9" pos:end="58:11"><name pos:start="58:9" pos:end="58:11">int</name></type> <name pos:start="58:13" pos:end="58:13">i</name> <init pos:start="58:15" pos:end="58:17">= <expr pos:start="58:17" pos:end="58:17"><literal type="number" pos:start="58:17" pos:end="58:17">1</literal></expr></init></decl>;</init> <condition pos:start="58:20" pos:end="58:24"><expr pos:start="58:20" pos:end="58:23"><name pos:start="58:20" pos:end="58:20">i</name><operator pos:start="58:21" pos:end="58:22">&lt;=</operator><name pos:start="58:23" pos:end="58:23">n</name></expr>;</condition> <incr pos:start="58:26" pos:end="58:28"><expr pos:start="58:26" pos:end="58:28"><name pos:start="58:26" pos:end="58:26">i</name><operator pos:start="58:27" pos:end="58:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="58:31" pos:end="58:46"><block_content pos:start="58:31" pos:end="58:46"> <expr_stmt pos:start="58:31" pos:end="58:46"><expr pos:start="58:31" pos:end="58:45"><call pos:start="58:31" pos:end="58:45"><name pos:start="58:31" pos:end="58:35">scanf</name><argument_list pos:start="58:36" pos:end="58:45">(<argument pos:start="58:37" pos:end="58:40"><expr pos:start="58:37" pos:end="58:40"><literal type="string" pos:start="58:37" pos:end="58:40">"%d"</literal></expr></argument>,<argument pos:start="58:42" pos:end="58:44"><expr pos:start="58:42" pos:end="58:44"><name pos:start="58:42" pos:end="58:42">b</name><operator pos:start="58:43" pos:end="58:43">+</operator><name pos:start="58:44" pos:end="58:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt pos:start="59:5" pos:end="59:15"><expr pos:start="59:5" pos:end="59:14"><call pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:7">dfs</name><argument_list pos:start="59:8" pos:end="59:14">(<argument pos:start="59:9" pos:end="59:9"><expr pos:start="59:9" pos:end="59:9"><name pos:start="59:9" pos:end="59:9">n</name></expr></argument>,<argument pos:start="59:11" pos:end="59:11"><expr pos:start="59:11" pos:end="59:11"><name pos:start="59:11" pos:end="59:11">b</name></expr></argument>,<argument pos:start="59:13" pos:end="59:13"><expr pos:start="59:13" pos:end="59:13"><name pos:start="59:13" pos:end="59:13">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:10"><expr pos:start="60:5" pos:end="60:9"><call pos:start="60:5" pos:end="60:9"><name pos:start="60:5" pos:end="60:7">bfs</name><argument_list pos:start="60:8" pos:end="60:9">()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="62:5" pos:end="62:10"><expr pos:start="62:5" pos:end="62:9"><call pos:start="62:5" pos:end="62:9"><name pos:start="62:5" pos:end="62:7">bfs</name><argument_list pos:start="62:8" pos:end="62:9">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="63:5" pos:end="63:14">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr> ;</return>
</block_content>}</block></function>
</unit>
