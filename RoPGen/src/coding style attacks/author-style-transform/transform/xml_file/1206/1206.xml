<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1206/1206.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:14"><decl pos:start="3:1" pos:end="3:11"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:7">ans</name> <init pos:start="3:9" pos:end="3:11">= <expr pos:start="3:11" pos:end="3:11"><literal type="number" pos:start="3:11" pos:end="3:11">0</literal></expr></init></decl>,<decl pos:start="3:13" pos:end="3:13"><type ref="prev" pos:start="3:1" pos:end="3:3"/><name pos:start="3:13" pos:end="3:13">n</name></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:14"><decl pos:start="4:1" pos:end="4:13"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:13"><name pos:start="4:5" pos:end="4:5">a</name><index pos:start="4:6" pos:end="4:9">[<expr pos:start="4:7" pos:end="4:8"><literal type="number" pos:start="4:7" pos:end="4:8">11</literal></expr>]</index><index pos:start="4:10" pos:end="4:13">[<expr pos:start="4:11" pos:end="4:12"><literal type="number" pos:start="4:11" pos:end="4:12">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:27"><decl pos:start="5:1" pos:end="5:12"><type pos:start="5:1" pos:end="5:4"><name pos:start="5:1" pos:end="5:4">bool</name></type> <name pos:start="5:6" pos:end="5:12"><name pos:start="5:6" pos:end="5:8">row</name><index pos:start="5:9" pos:end="5:12">[<expr pos:start="5:10" pos:end="5:11"><literal type="number" pos:start="5:10" pos:end="5:11">10</literal></expr>]</index></name></decl>,<decl pos:start="5:14" pos:end="5:19"><type ref="prev" pos:start="5:1" pos:end="5:4"/><name pos:start="5:14" pos:end="5:19"><name pos:start="5:14" pos:end="5:15">x1</name><index pos:start="5:16" pos:end="5:19">[<expr pos:start="5:17" pos:end="5:18"><literal type="number" pos:start="5:17" pos:end="5:18">20</literal></expr>]</index></name></decl>,<decl pos:start="5:21" pos:end="5:26"><type ref="prev" pos:start="5:1" pos:end="5:4"/><name pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:22">x2</name><index pos:start="5:23" pos:end="5:26">[<expr pos:start="5:24" pos:end="5:25"><literal type="number" pos:start="5:24" pos:end="5:25">20</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="6:1" pos:end="9:1"><type pos:start="6:1" pos:end="6:4"><name pos:start="6:1" pos:end="6:4">bool</name></type> <name pos:start="6:6" pos:end="6:10">check</name><parameter_list pos:start="6:11" pos:end="6:23">(<parameter pos:start="6:12" pos:end="6:16"><decl pos:start="6:12" pos:end="6:16"><type pos:start="6:12" pos:end="6:16"><name pos:start="6:12" pos:end="6:14">int</name></type> <name pos:start="6:16" pos:end="6:16">i</name></decl></parameter>,<parameter pos:start="6:18" pos:end="6:22"><decl pos:start="6:18" pos:end="6:22"><type pos:start="6:18" pos:end="6:22"><name pos:start="6:18" pos:end="6:20">int</name></type> <name pos:start="6:22" pos:end="6:22">c</name></decl></parameter>)</parameter_list>
<block pos:start="7:1" pos:end="9:1">{<block_content pos:start="8:5" pos:end="8:50">
    <return pos:start="8:5" pos:end="8:50">return <expr pos:start="8:12" pos:end="8:49"><name pos:start="8:12" pos:end="8:18"><name pos:start="8:12" pos:end="8:12">a</name><index pos:start="8:13" pos:end="8:15">[<expr pos:start="8:14" pos:end="8:14"><name pos:start="8:14" pos:end="8:14">i</name></expr>]</index><index pos:start="8:16" pos:end="8:18">[<expr pos:start="8:17" pos:end="8:17"><name pos:start="8:17" pos:end="8:17">c</name></expr>]</index></name><operator pos:start="8:19" pos:end="8:20">&amp;&amp;</operator><operator pos:start="8:21" pos:end="8:21">!</operator><name pos:start="8:22" pos:end="8:27"><name pos:start="8:22" pos:end="8:24">row</name><index pos:start="8:25" pos:end="8:27">[<expr pos:start="8:26" pos:end="8:26"><name pos:start="8:26" pos:end="8:26">i</name></expr>]</index></name><operator pos:start="8:28" pos:end="8:29">&amp;&amp;</operator><operator pos:start="8:30" pos:end="8:30">!</operator><name pos:start="8:31" pos:end="8:37"><name pos:start="8:31" pos:end="8:32">x1</name><index pos:start="8:33" pos:end="8:37">[<expr pos:start="8:34" pos:end="8:36"><name pos:start="8:34" pos:end="8:34">i</name><operator pos:start="8:35" pos:end="8:35">+</operator><name pos:start="8:36" pos:end="8:36">c</name></expr>]</index></name><operator pos:start="8:38" pos:end="8:39">&amp;&amp;</operator><operator pos:start="8:40" pos:end="8:40">!</operator><name pos:start="8:41" pos:end="8:49"><name pos:start="8:41" pos:end="8:42">x2</name><index pos:start="8:43" pos:end="8:49">[<expr pos:start="8:44" pos:end="8:48"><name pos:start="8:44" pos:end="8:44">i</name><operator pos:start="8:45" pos:end="8:45">-</operator><name pos:start="8:46" pos:end="8:46">c</name><operator pos:start="8:47" pos:end="8:47">+</operator><literal type="number" pos:start="8:48" pos:end="8:48">8</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function pos:start="10:1" pos:end="40:1"><type pos:start="10:1" pos:end="10:4"><name pos:start="10:1" pos:end="10:4">void</name></type> <name pos:start="10:6" pos:end="10:8">dfs</name><parameter_list pos:start="10:9" pos:end="10:21">(<parameter pos:start="10:10" pos:end="10:14"><decl pos:start="10:10" pos:end="10:14"><type pos:start="10:10" pos:end="10:14"><name pos:start="10:10" pos:end="10:12">int</name></type> <name pos:start="10:14" pos:end="10:14">c</name></decl></parameter>,<parameter pos:start="10:16" pos:end="10:20"><decl pos:start="10:16" pos:end="10:20"><type pos:start="10:16" pos:end="10:20"><name pos:start="10:16" pos:end="10:18">int</name></type> <name pos:start="10:20" pos:end="10:20">p</name></decl></parameter>)</parameter_list><block pos:start="10:22" pos:end="40:1">{<block_content pos:start="11:5" pos:end="38:5">
    <if_stmt pos:start="11:5" pos:end="38:5"><if pos:start="11:5" pos:end="23:5">if<condition pos:start="11:7" pos:end="11:12">(<expr pos:start="11:8" pos:end="11:11"><name pos:start="11:8" pos:end="11:8">p</name><operator pos:start="11:9" pos:end="11:10">==</operator><literal type="number" pos:start="11:11" pos:end="11:11">0</literal></expr>)</condition><block pos:start="11:13" pos:end="23:5">{<block_content pos:start="12:9" pos:end="22:9">
        <if_stmt pos:start="12:9" pos:end="15:9"><if pos:start="12:9" pos:end="15:9">if<condition pos:start="12:11" pos:end="12:16">(<expr pos:start="12:12" pos:end="12:15"><name pos:start="12:12" pos:end="12:12">c</name><operator pos:start="12:13" pos:end="12:14">==</operator><literal type="number" pos:start="12:15" pos:end="12:15">7</literal></expr>)</condition><block pos:start="12:17" pos:end="15:9">{<block_content pos:start="13:13" pos:end="14:20">
            <expr_stmt pos:start="13:13" pos:end="13:23"><expr pos:start="13:13" pos:end="13:22"><call pos:start="13:13" pos:end="13:22"><name pos:start="13:13" pos:end="13:15">dfs</name><argument_list pos:start="13:16" pos:end="13:22">(<argument pos:start="13:17" pos:end="13:17"><expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></argument>,<argument pos:start="13:19" pos:end="13:21"><expr pos:start="13:19" pos:end="13:21"><name pos:start="13:19" pos:end="13:19">p</name><operator pos:start="13:20" pos:end="13:20">+</operator><literal type="number" pos:start="13:21" pos:end="13:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="14:13" pos:end="14:20">return ;</return>
        </block_content>}</block></if></if_stmt>
        <for pos:start="16:9" pos:end="22:9">for<control pos:start="16:12" pos:end="16:28">(<init pos:start="16:13" pos:end="16:20"><decl pos:start="16:13" pos:end="16:19"><type pos:start="16:13" pos:end="16:15"><name pos:start="16:13" pos:end="16:15">int</name></type> <name pos:start="16:17" pos:end="16:17">i</name><init pos:start="16:18" pos:end="16:19">=<expr pos:start="16:19" pos:end="16:19"><literal type="number" pos:start="16:19" pos:end="16:19">0</literal></expr></init></decl>;</init><condition pos:start="16:21" pos:end="16:24"><expr pos:start="16:21" pos:end="16:23"><name pos:start="16:21" pos:end="16:21">i</name><operator pos:start="16:22" pos:end="16:22">&lt;</operator><literal type="number" pos:start="16:23" pos:end="16:23">8</literal></expr>;</condition><incr pos:start="16:25" pos:end="16:27"><expr pos:start="16:25" pos:end="16:27"><name pos:start="16:25" pos:end="16:25">i</name><operator pos:start="16:26" pos:end="16:27">++</operator></expr></incr>)</control><block pos:start="16:29" pos:end="22:9">{<block_content pos:start="17:13" pos:end="21:13">
            <if_stmt pos:start="17:13" pos:end="21:13"><if pos:start="17:13" pos:end="21:13">if<condition pos:start="17:15" pos:end="17:26">(<expr pos:start="17:16" pos:end="17:25"><call pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:20">check</name><argument_list pos:start="17:21" pos:end="17:25">(<argument pos:start="17:22" pos:end="17:22"><expr pos:start="17:22" pos:end="17:22"><name pos:start="17:22" pos:end="17:22">i</name></expr></argument>,<argument pos:start="17:24" pos:end="17:24"><expr pos:start="17:24" pos:end="17:24"><name pos:start="17:24" pos:end="17:24">c</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="17:27" pos:end="21:13">{<block_content pos:start="18:17" pos:end="20:47">
                <expr_stmt pos:start="18:17" pos:end="18:46"><expr pos:start="18:17" pos:end="18:45"><name pos:start="18:17" pos:end="18:22"><name pos:start="18:17" pos:end="18:19">row</name><index pos:start="18:20" pos:end="18:22">[<expr pos:start="18:21" pos:end="18:21"><name pos:start="18:21" pos:end="18:21">i</name></expr>]</index></name><operator pos:start="18:23" pos:end="18:23">=</operator><name pos:start="18:24" pos:end="18:30"><name pos:start="18:24" pos:end="18:25">x1</name><index pos:start="18:26" pos:end="18:30">[<expr pos:start="18:27" pos:end="18:29"><name pos:start="18:27" pos:end="18:27">i</name><operator pos:start="18:28" pos:end="18:28">+</operator><name pos:start="18:29" pos:end="18:29">c</name></expr>]</index></name><operator pos:start="18:31" pos:end="18:31">=</operator><name pos:start="18:32" pos:end="18:40"><name pos:start="18:32" pos:end="18:33">x2</name><index pos:start="18:34" pos:end="18:40">[<expr pos:start="18:35" pos:end="18:39"><name pos:start="18:35" pos:end="18:35">i</name><operator pos:start="18:36" pos:end="18:36">-</operator><name pos:start="18:37" pos:end="18:37">c</name><operator pos:start="18:38" pos:end="18:38">+</operator><literal type="number" pos:start="18:39" pos:end="18:39">8</literal></expr>]</index></name><operator pos:start="18:41" pos:end="18:41">=</operator><literal type="boolean" pos:start="18:42" pos:end="18:45">true</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="19:17" pos:end="19:27"><expr pos:start="19:17" pos:end="19:26"><call pos:start="19:17" pos:end="19:26"><name pos:start="19:17" pos:end="19:19">dfs</name><argument_list pos:start="19:20" pos:end="19:26">(<argument pos:start="19:21" pos:end="19:23"><expr pos:start="19:21" pos:end="19:23"><name pos:start="19:21" pos:end="19:21">c</name><operator pos:start="19:22" pos:end="19:22">+</operator><literal type="number" pos:start="19:23" pos:end="19:23">1</literal></expr></argument>,<argument pos:start="19:25" pos:end="19:25"><expr pos:start="19:25" pos:end="19:25"><name pos:start="19:25" pos:end="19:25">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="20:17" pos:end="20:47"><expr pos:start="20:17" pos:end="20:46"><name pos:start="20:17" pos:end="20:22"><name pos:start="20:17" pos:end="20:19">row</name><index pos:start="20:20" pos:end="20:22">[<expr pos:start="20:21" pos:end="20:21"><name pos:start="20:21" pos:end="20:21">i</name></expr>]</index></name><operator pos:start="20:23" pos:end="20:23">=</operator><name pos:start="20:24" pos:end="20:30"><name pos:start="20:24" pos:end="20:25">x1</name><index pos:start="20:26" pos:end="20:30">[<expr pos:start="20:27" pos:end="20:29"><name pos:start="20:27" pos:end="20:27">i</name><operator pos:start="20:28" pos:end="20:28">+</operator><name pos:start="20:29" pos:end="20:29">c</name></expr>]</index></name><operator pos:start="20:31" pos:end="20:31">=</operator><name pos:start="20:32" pos:end="20:40"><name pos:start="20:32" pos:end="20:33">x2</name><index pos:start="20:34" pos:end="20:40">[<expr pos:start="20:35" pos:end="20:39"><name pos:start="20:35" pos:end="20:35">i</name><operator pos:start="20:36" pos:end="20:36">-</operator><name pos:start="20:37" pos:end="20:37">c</name><operator pos:start="20:38" pos:end="20:38">+</operator><literal type="number" pos:start="20:39" pos:end="20:39">8</literal></expr>]</index></name><operator pos:start="20:41" pos:end="20:41">=</operator><literal type="boolean" pos:start="20:42" pos:end="20:46">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if><else pos:start="23:6" pos:end="38:5">else<block pos:start="23:10" pos:end="38:5">{<block_content pos:start="24:9" pos:end="37:9">
        <expr_stmt pos:start="24:9" pos:end="24:33"><expr pos:start="24:9" pos:end="24:32"><call pos:start="24:9" pos:end="24:32"><name pos:start="24:9" pos:end="24:14">memset</name><argument_list pos:start="24:15" pos:end="24:32">(<argument pos:start="24:16" pos:end="24:18"><expr pos:start="24:16" pos:end="24:18"><name pos:start="24:16" pos:end="24:18">row</name></expr></argument>,<argument pos:start="24:20" pos:end="24:20"><expr pos:start="24:20" pos:end="24:20"><literal type="number" pos:start="24:20" pos:end="24:20">0</literal></expr></argument>,<argument pos:start="24:22" pos:end="24:31"><expr pos:start="24:22" pos:end="24:31"><sizeof pos:start="24:22" pos:end="24:31">sizeof <name pos:start="24:29" pos:end="24:31">row</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><call pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:14">memset</name><argument_list pos:start="25:15" pos:end="25:30">(<argument pos:start="25:16" pos:end="25:17"><expr pos:start="25:16" pos:end="25:17"><name pos:start="25:16" pos:end="25:17">x1</name></expr></argument>,<argument pos:start="25:19" pos:end="25:19"><expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr></argument>,<argument pos:start="25:21" pos:end="25:29"><expr pos:start="25:21" pos:end="25:29"><sizeof pos:start="25:21" pos:end="25:29">sizeof <name pos:start="25:28" pos:end="25:29">x1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:31"><expr pos:start="26:9" pos:end="26:30"><call pos:start="26:9" pos:end="26:30"><name pos:start="26:9" pos:end="26:14">memset</name><argument_list pos:start="26:15" pos:end="26:30">(<argument pos:start="26:16" pos:end="26:17"><expr pos:start="26:16" pos:end="26:17"><name pos:start="26:16" pos:end="26:17">x2</name></expr></argument>,<argument pos:start="26:19" pos:end="26:19"><expr pos:start="26:19" pos:end="26:19"><literal type="number" pos:start="26:19" pos:end="26:19">0</literal></expr></argument>,<argument pos:start="26:21" pos:end="26:29"><expr pos:start="26:21" pos:end="26:29"><sizeof pos:start="26:21" pos:end="26:29">sizeof <name pos:start="26:28" pos:end="26:29">x2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="27:9" pos:end="30:9"><if pos:start="27:9" pos:end="30:9">if<condition pos:start="27:11" pos:end="27:16">(<expr pos:start="27:12" pos:end="27:15"><name pos:start="27:12" pos:end="27:12">c</name><operator pos:start="27:13" pos:end="27:14">==</operator><literal type="number" pos:start="27:15" pos:end="27:15">7</literal></expr>)</condition><block pos:start="27:17" pos:end="30:9">{<block_content pos:start="28:13" pos:end="29:20">
            <expr_stmt pos:start="28:13" pos:end="28:18"><expr pos:start="28:13" pos:end="28:17"><name pos:start="28:13" pos:end="28:15">ans</name><operator pos:start="28:16" pos:end="28:17">++</operator></expr>;</expr_stmt>
            <return pos:start="29:13" pos:end="29:20">return ;</return>
        </block_content>}</block></if></if_stmt>
        <for pos:start="31:9" pos:end="37:9">for<control pos:start="31:12" pos:end="31:28">(<init pos:start="31:13" pos:end="31:20"><decl pos:start="31:13" pos:end="31:19"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:17">i</name><init pos:start="31:18" pos:end="31:19">=<expr pos:start="31:19" pos:end="31:19"><literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr></init></decl>;</init><condition pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:21">i</name><operator pos:start="31:22" pos:end="31:22">&lt;</operator><literal type="number" pos:start="31:23" pos:end="31:23">8</literal></expr>;</condition><incr pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:25">i</name><operator pos:start="31:26" pos:end="31:27">++</operator></expr></incr>)</control><block pos:start="31:29" pos:end="37:9">{<block_content pos:start="32:13" pos:end="36:13">
            <if_stmt pos:start="32:13" pos:end="36:13"><if pos:start="32:13" pos:end="36:13">if<condition pos:start="32:15" pos:end="32:26">(<expr pos:start="32:16" pos:end="32:25"><call pos:start="32:16" pos:end="32:25"><name pos:start="32:16" pos:end="32:20">check</name><argument_list pos:start="32:21" pos:end="32:25">(<argument pos:start="32:22" pos:end="32:22"><expr pos:start="32:22" pos:end="32:22"><name pos:start="32:22" pos:end="32:22">i</name></expr></argument>,<argument pos:start="32:24" pos:end="32:24"><expr pos:start="32:24" pos:end="32:24"><name pos:start="32:24" pos:end="32:24">c</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="32:27" pos:end="36:13">{<block_content pos:start="33:17" pos:end="35:47">
                <expr_stmt pos:start="33:17" pos:end="33:46"><expr pos:start="33:17" pos:end="33:45"><name pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:19">row</name><index pos:start="33:20" pos:end="33:22">[<expr pos:start="33:21" pos:end="33:21"><name pos:start="33:21" pos:end="33:21">i</name></expr>]</index></name><operator pos:start="33:23" pos:end="33:23">=</operator><name pos:start="33:24" pos:end="33:30"><name pos:start="33:24" pos:end="33:25">x1</name><index pos:start="33:26" pos:end="33:30">[<expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:27">i</name><operator pos:start="33:28" pos:end="33:28">+</operator><name pos:start="33:29" pos:end="33:29">c</name></expr>]</index></name><operator pos:start="33:31" pos:end="33:31">=</operator><name pos:start="33:32" pos:end="33:40"><name pos:start="33:32" pos:end="33:33">x2</name><index pos:start="33:34" pos:end="33:40">[<expr pos:start="33:35" pos:end="33:39"><name pos:start="33:35" pos:end="33:35">i</name><operator pos:start="33:36" pos:end="33:36">-</operator><name pos:start="33:37" pos:end="33:37">c</name><operator pos:start="33:38" pos:end="33:38">+</operator><literal type="number" pos:start="33:39" pos:end="33:39">8</literal></expr>]</index></name><operator pos:start="33:41" pos:end="33:41">=</operator><literal type="boolean" pos:start="33:42" pos:end="33:45">true</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="34:17" pos:end="34:27"><expr pos:start="34:17" pos:end="34:26"><call pos:start="34:17" pos:end="34:26"><name pos:start="34:17" pos:end="34:19">dfs</name><argument_list pos:start="34:20" pos:end="34:26">(<argument pos:start="34:21" pos:end="34:23"><expr pos:start="34:21" pos:end="34:23"><name pos:start="34:21" pos:end="34:21">c</name><operator pos:start="34:22" pos:end="34:22">+</operator><literal type="number" pos:start="34:23" pos:end="34:23">1</literal></expr></argument>,<argument pos:start="34:25" pos:end="34:25"><expr pos:start="34:25" pos:end="34:25"><name pos:start="34:25" pos:end="34:25">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="35:17" pos:end="35:47"><expr pos:start="35:17" pos:end="35:46"><name pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:19">row</name><index pos:start="35:20" pos:end="35:22">[<expr pos:start="35:21" pos:end="35:21"><name pos:start="35:21" pos:end="35:21">i</name></expr>]</index></name><operator pos:start="35:23" pos:end="35:23">=</operator><name pos:start="35:24" pos:end="35:30"><name pos:start="35:24" pos:end="35:25">x1</name><index pos:start="35:26" pos:end="35:30">[<expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:27">i</name><operator pos:start="35:28" pos:end="35:28">+</operator><name pos:start="35:29" pos:end="35:29">c</name></expr>]</index></name><operator pos:start="35:31" pos:end="35:31">=</operator><name pos:start="35:32" pos:end="35:40"><name pos:start="35:32" pos:end="35:33">x2</name><index pos:start="35:34" pos:end="35:40">[<expr pos:start="35:35" pos:end="35:39"><name pos:start="35:35" pos:end="35:35">i</name><operator pos:start="35:36" pos:end="35:36">-</operator><name pos:start="35:37" pos:end="35:37">c</name><operator pos:start="35:38" pos:end="35:38">+</operator><literal type="number" pos:start="35:39" pos:end="35:39">8</literal></expr>]</index></name><operator pos:start="35:41" pos:end="35:41">=</operator><literal type="boolean" pos:start="35:42" pos:end="35:46">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    
</block_content>}</block></function>
<function pos:start="41:1" pos:end="53:1"><type pos:start="41:1" pos:end="41:3"><name pos:start="41:1" pos:end="41:3">int</name></type> <name pos:start="41:5" pos:end="41:8">main</name><parameter_list pos:start="41:9" pos:end="41:10">()</parameter_list> <block pos:start="41:12" pos:end="53:1">{<block_content pos:start="42:5" pos:end="52:13">
    <expr_stmt pos:start="42:5" pos:end="42:34"><expr pos:start="42:5" pos:end="42:33"><call pos:start="42:5" pos:end="42:33"><name pos:start="42:5" pos:end="42:11">freopen</name><argument_list pos:start="42:12" pos:end="42:33">(<argument pos:start="42:13" pos:end="42:22"><expr pos:start="42:13" pos:end="42:22"><literal type="string" pos:start="42:13" pos:end="42:22">"queen.in"</literal></expr></argument>,<argument pos:start="42:24" pos:end="42:26"><expr pos:start="42:24" pos:end="42:26"><literal type="string" pos:start="42:24" pos:end="42:26">"r"</literal></expr></argument>,<argument pos:start="42:28" pos:end="42:32"><expr pos:start="42:28" pos:end="42:32"><name pos:start="42:28" pos:end="42:32">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:36"><expr pos:start="43:5" pos:end="43:35"><call pos:start="43:5" pos:end="43:35"><name pos:start="43:5" pos:end="43:11">freopen</name><argument_list pos:start="43:12" pos:end="43:35">(<argument pos:start="43:13" pos:end="43:23"><expr pos:start="43:13" pos:end="43:23"><literal type="string" pos:start="43:13" pos:end="43:23">"queen.out"</literal></expr></argument>,<argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><literal type="string" pos:start="43:25" pos:end="43:27">"w"</literal></expr></argument>,<argument pos:start="43:29" pos:end="43:34"><expr pos:start="43:29" pos:end="43:34"><name pos:start="43:29" pos:end="43:34">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:11"><expr pos:start="44:5" pos:end="44:10"><name pos:start="44:5" pos:end="44:7">cin</name><operator pos:start="44:8" pos:end="44:9">&gt;&gt;</operator><name pos:start="44:10" pos:end="44:10">n</name></expr>;</expr_stmt>
    <for pos:start="45:5" pos:end="49:5">for<control pos:start="45:8" pos:end="45:24">(<init pos:start="45:9" pos:end="45:16"><decl pos:start="45:9" pos:end="45:15"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:13">i</name><init pos:start="45:14" pos:end="45:15">=<expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr></init></decl>;</init><condition pos:start="45:17" pos:end="45:20"><expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:17">i</name><operator pos:start="45:18" pos:end="45:18">&lt;</operator><name pos:start="45:19" pos:end="45:19">n</name></expr>;</condition><incr pos:start="45:21" pos:end="45:23"><expr pos:start="45:21" pos:end="45:23"><name pos:start="45:21" pos:end="45:21">i</name><operator pos:start="45:22" pos:end="45:23">++</operator></expr></incr>)</control><block pos:start="45:25" pos:end="49:5">{<block_content pos:start="46:9" pos:end="48:9">
        <for pos:start="46:9" pos:end="48:9">for<control pos:start="46:12" pos:end="46:28">(<init pos:start="46:13" pos:end="46:20"><decl pos:start="46:13" pos:end="46:19"><type pos:start="46:13" pos:end="46:15"><name pos:start="46:13" pos:end="46:15">int</name></type> <name pos:start="46:17" pos:end="46:17">j</name><init pos:start="46:18" pos:end="46:19">=<expr pos:start="46:19" pos:end="46:19"><literal type="number" pos:start="46:19" pos:end="46:19">0</literal></expr></init></decl>;</init><condition pos:start="46:21" pos:end="46:24"><expr pos:start="46:21" pos:end="46:23"><name pos:start="46:21" pos:end="46:21">j</name><operator pos:start="46:22" pos:end="46:22">&lt;</operator><name pos:start="46:23" pos:end="46:23">n</name></expr>;</condition><incr pos:start="46:25" pos:end="46:27"><expr pos:start="46:25" pos:end="46:27"><name pos:start="46:25" pos:end="46:25">j</name><operator pos:start="46:26" pos:end="46:27">++</operator></expr></incr>)</control><block pos:start="46:29" pos:end="48:9">{<block_content pos:start="47:13" pos:end="47:25">
            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:15">cin</name><operator pos:start="47:16" pos:end="47:17">&gt;&gt;</operator><name pos:start="47:18" pos:end="47:24"><name pos:start="47:18" pos:end="47:18">a</name><index pos:start="47:19" pos:end="47:21">[<expr pos:start="47:20" pos:end="47:20"><name pos:start="47:20" pos:end="47:20">i</name></expr>]</index><index pos:start="47:22" pos:end="47:24">[<expr pos:start="47:23" pos:end="47:23"><name pos:start="47:23" pos:end="47:23">j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt pos:start="50:5" pos:end="50:13"><expr pos:start="50:5" pos:end="50:12"><call pos:start="50:5" pos:end="50:12"><name pos:start="50:5" pos:end="50:7">dfs</name><argument_list pos:start="50:8" pos:end="50:12">(<argument pos:start="50:9" pos:end="50:9"><expr pos:start="50:9" pos:end="50:9"><literal type="number" pos:start="50:9" pos:end="50:9">0</literal></expr></argument>,<argument pos:start="50:11" pos:end="50:11"><expr pos:start="50:11" pos:end="50:11"><literal type="number" pos:start="50:11" pos:end="50:11">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:20"><expr pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:8">cout</name><operator pos:start="51:9" pos:end="51:10">&lt;&lt;</operator><name pos:start="51:11" pos:end="51:13">ans</name><operator pos:start="51:14" pos:end="51:15">&lt;&lt;</operator><name pos:start="51:16" pos:end="51:19">endl</name></expr>;</expr_stmt>
    <return pos:start="52:5" pos:end="52:13">return <expr pos:start="52:12" pos:end="52:12"><literal type="number" pos:start="52:12" pos:end="52:12">0</literal></expr>;</return>    
</block_content>}</block></function>
</unit>
