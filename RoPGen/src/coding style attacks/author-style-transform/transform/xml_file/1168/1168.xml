<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1168/1168.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<function pos:start="3:1" pos:end="18:1"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:8">main</name><parameter_list pos:start="3:9" pos:end="3:10">()</parameter_list><block pos:start="3:11" pos:end="18:1">{<block_content pos:start="4:5" pos:end="17:13">
    <decl_stmt pos:start="4:5" pos:end="4:16"><decl pos:start="4:5" pos:end="4:9"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:9">a</name></decl>,<decl pos:start="4:11" pos:end="4:11"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:11" pos:end="4:11">b</name></decl>,<decl pos:start="4:13" pos:end="4:13"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:13" pos:end="4:13">n</name></decl>,<decl pos:start="4:15" pos:end="4:15"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:15" pos:end="4:15">k</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">double</name></type> <name pos:start="5:12" pos:end="5:12">c</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:17"><expr pos:start="6:5" pos:end="6:16"><name pos:start="6:5" pos:end="6:7">cin</name><operator pos:start="6:8" pos:end="6:9">&gt;&gt;</operator><name pos:start="6:10" pos:end="6:10">n</name><operator pos:start="6:11" pos:end="6:12">&gt;&gt;</operator><name pos:start="6:13" pos:end="6:13">a</name><operator pos:start="6:14" pos:end="6:15">&gt;&gt;</operator><name pos:start="6:16" pos:end="6:16">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:10"><expr pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:5">k</name><operator pos:start="7:6" pos:end="7:6">=</operator><name pos:start="7:7" pos:end="7:7">a</name><operator pos:start="7:8" pos:end="7:8">*</operator><name pos:start="7:9" pos:end="7:9">n</name></expr>;</expr_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:30"><decl pos:start="8:5" pos:end="8:29"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:10">double</name></type> <name pos:start="8:12" pos:end="8:19">k_double</name><init pos:start="8:20" pos:end="8:29">=<expr pos:start="8:21" pos:end="8:29"><call pos:start="8:21" pos:end="8:29"><name pos:start="8:21" pos:end="8:26">double</name><argument_list pos:start="8:27" pos:end="8:29">(<argument pos:start="8:28" pos:end="8:28"><expr pos:start="8:28" pos:end="8:28"><name pos:start="8:28" pos:end="8:28">k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:19">a_double</name><init pos:start="9:20" pos:end="9:29">=<expr pos:start="9:21" pos:end="9:29"><call pos:start="9:21" pos:end="9:29"><name pos:start="9:21" pos:end="9:26">double</name><argument_list pos:start="9:27" pos:end="9:29">(<argument pos:start="9:28" pos:end="9:28"><expr pos:start="9:28" pos:end="9:28"><name pos:start="9:28" pos:end="9:28">a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:30"><decl pos:start="10:5" pos:end="10:29"><type pos:start="10:5" pos:end="10:10"><name pos:start="10:5" pos:end="10:10">double</name></type> <name pos:start="10:12" pos:end="10:19">b_double</name><init pos:start="10:20" pos:end="10:29">=<expr pos:start="10:21" pos:end="10:29"><call pos:start="10:21" pos:end="10:29"><name pos:start="10:21" pos:end="10:26">double</name><argument_list pos:start="10:27" pos:end="10:29">(<argument pos:start="10:28" pos:end="10:28"><expr pos:start="10:28" pos:end="10:28"><name pos:start="10:28" pos:end="10:28">b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:20"><expr pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:5">c</name><operator pos:start="11:6" pos:end="11:6">=</operator><operator pos:start="11:7" pos:end="11:7">(</operator><name pos:start="11:8" pos:end="11:8">k</name><operator pos:start="11:9" pos:end="11:9">-</operator><literal type="number" pos:start="11:10" pos:end="11:12">600</literal><operator pos:start="11:13" pos:end="11:13">)</operator><operator pos:start="11:14" pos:end="11:14">/</operator><operator pos:start="11:15" pos:end="11:15">(</operator><name pos:start="11:16" pos:end="11:16">b</name><operator pos:start="11:17" pos:end="11:17">-</operator><name pos:start="11:18" pos:end="11:18">a</name><operator pos:start="11:19" pos:end="11:19">)</operator></expr>;</expr_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:21"><decl pos:start="12:5" pos:end="12:20"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:13">c_int</name><init pos:start="12:14" pos:end="12:20">=<expr pos:start="12:15" pos:end="12:20"><call pos:start="12:15" pos:end="12:20"><name pos:start="12:15" pos:end="12:17">int</name><argument_list pos:start="12:18" pos:end="12:20">(<argument pos:start="12:19" pos:end="12:19"><expr pos:start="12:19" pos:end="12:19"><name pos:start="12:19" pos:end="12:19">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="13:5" pos:end="15:5"><if pos:start="13:5" pos:end="15:5">if<condition pos:start="13:7" pos:end="13:16">(<expr pos:start="13:8" pos:end="13:15"><name pos:start="13:8" pos:end="13:12">c_int</name><operator pos:start="13:13" pos:end="13:14">!=</operator><name pos:start="13:15" pos:end="13:15">c</name></expr>)</condition><block pos:start="13:17" pos:end="15:5">{<block_content pos:start="14:9" pos:end="14:12">
        <expr_stmt pos:start="14:9" pos:end="14:12"><expr pos:start="14:9" pos:end="14:11"><name pos:start="14:9" pos:end="14:9">c</name><operator pos:start="14:10" pos:end="14:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:18"><expr pos:start="16:5" pos:end="16:17"><name pos:start="16:5" pos:end="16:8">cout</name><operator pos:start="16:9" pos:end="16:10">&lt;&lt;</operator><name pos:start="16:11" pos:end="16:11">c</name><operator pos:start="16:12" pos:end="16:13">&lt;&lt;</operator><name pos:start="16:14" pos:end="16:17">endl</name></expr>;</expr_stmt>
    <return pos:start="17:5" pos:end="17:13">return <expr pos:start="17:12" pos:end="17:12"><literal type="number" pos:start="17:12" pos:end="17:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
