<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1045/1045.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:17">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:17">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:19">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:20">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:18">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:18">&lt;stdio.h&gt;</cpp:file></cpp:include>  
<using pos:start="5:1" pos:end="5:20">using <namespace pos:start="5:7" pos:end="5:20">namespace <name pos:start="5:17" pos:end="5:19">std</name>;</namespace></using>
<decl_stmt pos:start="6:1" pos:end="6:24"><decl pos:start="6:1" pos:end="6:5"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:5">n</name></decl>, <decl pos:start="6:8" pos:end="6:8"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:8" pos:end="6:8">m</name></decl>, <decl pos:start="6:11" pos:end="6:20"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:11" pos:end="6:20"><name pos:start="6:11" pos:end="6:11">a</name><index pos:start="6:12" pos:end="6:20">[<expr pos:start="6:13" pos:end="6:19"><literal type="number" pos:start="6:13" pos:end="6:19">1000001</literal></expr>]</index></name></decl>, <decl pos:start="6:23" pos:end="6:23"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:23" pos:end="6:23">b</name></decl>;</decl_stmt>
<function pos:start="7:1" pos:end="27:1"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:7">fin</name><parameter_list pos:start="7:8" pos:end="7:14">(<parameter pos:start="7:9" pos:end="7:13"><decl pos:start="7:9" pos:end="7:13"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:13">b</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="27:1">{<block_content pos:start="9:5" pos:end="26:13">
    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">l</name> <init pos:start="9:11" pos:end="9:13">= <expr pos:start="9:13" pos:end="9:13"><literal type="number" pos:start="9:13" pos:end="9:13">0</literal></expr></init></decl>, <decl pos:start="9:16" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">r</name> <init pos:start="9:18" pos:end="9:24">= <expr pos:start="9:20" pos:end="9:24"><name pos:start="9:20" pos:end="9:20">m</name> <operator pos:start="9:22" pos:end="9:22">-</operator> <literal type="number" pos:start="9:24" pos:end="9:24">1</literal></expr></init></decl>, <decl pos:start="9:27" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:28">mi</name></decl>;</decl_stmt>
    <while pos:start="10:5" pos:end="25:5">while <condition pos:start="10:11" pos:end="10:18">(<expr pos:start="10:12" pos:end="10:17"><name pos:start="10:12" pos:end="10:12">l</name> <operator pos:start="10:14" pos:end="10:15">&lt;=</operator> <name pos:start="10:17" pos:end="10:17">r</name></expr>)</condition>
    <block pos:start="11:5" pos:end="25:5">{<block_content pos:start="12:9" pos:end="24:9">
        <expr_stmt pos:start="12:9" pos:end="12:23"><expr pos:start="12:9" pos:end="12:22"><name pos:start="12:9" pos:end="12:10">mi</name> <operator pos:start="12:12" pos:end="12:12">=</operator> <operator pos:start="12:14" pos:end="12:14">(</operator><name pos:start="12:15" pos:end="12:15">r</name> <operator pos:start="12:17" pos:end="12:17">+</operator> <name pos:start="12:19" pos:end="12:19">l</name><operator pos:start="12:20" pos:end="12:20">)</operator><operator pos:start="12:21" pos:end="12:21">/</operator><literal type="number" pos:start="12:22" pos:end="12:22">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="13:9" pos:end="24:9"><if pos:start="13:9" pos:end="16:9">if<condition pos:start="13:11" pos:end="13:22">(<expr pos:start="13:12" pos:end="13:21"><name pos:start="13:12" pos:end="13:16"><name pos:start="13:12" pos:end="13:12">a</name><index pos:start="13:13" pos:end="13:16">[<expr pos:start="13:14" pos:end="13:15"><name pos:start="13:14" pos:end="13:15">mi</name></expr>]</index></name> <operator pos:start="13:18" pos:end="13:19">==</operator> <name pos:start="13:21" pos:end="13:21">b</name></expr>)</condition>
        <block pos:start="14:9" pos:end="16:9">{<block_content pos:start="15:13" pos:end="15:21">
            <return pos:start="15:13" pos:end="15:21">return <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">1</literal></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif" pos:start="17:9" pos:end="20:9">else if<condition pos:start="17:16" pos:end="17:26">(<expr pos:start="17:17" pos:end="17:25"><name pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:17">a</name><index pos:start="17:18" pos:end="17:21">[<expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">mi</name></expr>]</index></name> <operator pos:start="17:23" pos:end="17:23">&lt;</operator> <name pos:start="17:25" pos:end="17:25">b</name></expr>)</condition>
         <block pos:start="18:10" pos:end="20:9">{<block_content pos:start="19:13" pos:end="19:21">
            <expr_stmt pos:start="19:13" pos:end="19:21"><expr pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:13">l</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:18">mi</name><operator pos:start="19:19" pos:end="19:19">+</operator><literal type="number" pos:start="19:20" pos:end="19:20">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="21:9" pos:end="24:9">else
        <block pos:start="22:9" pos:end="24:9">{<block_content pos:start="23:13" pos:end="23:23">
            <expr_stmt pos:start="23:13" pos:end="23:23"><expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:13">r</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:18">mi</name> <operator pos:start="23:20" pos:end="23:20">-</operator> <literal type="number" pos:start="23:22" pos:end="23:22">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return pos:start="26:5" pos:end="26:13">return <expr pos:start="26:12" pos:end="26:12"><literal type="number" pos:start="26:12" pos:end="26:12">0</literal></expr>;</return>
</block_content>}</block></function>
<function pos:start="28:1" pos:end="50:1"><type pos:start="28:1" pos:end="28:3"><name pos:start="28:1" pos:end="28:3">int</name></type> <name pos:start="28:5" pos:end="28:8">main</name><parameter_list pos:start="28:9" pos:end="28:10">()</parameter_list> <block pos:start="28:12" pos:end="50:1">{<block_content pos:start="29:5" pos:end="49:13">
    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><call pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:11">freopen</name><argument_list pos:start="29:12" pos:end="29:34">(<argument pos:start="29:13" pos:end="29:21"><expr pos:start="29:13" pos:end="29:21"><literal type="string" pos:start="29:13" pos:end="29:21">"ball.in"</literal></expr></argument>, <argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><literal type="string" pos:start="29:24" pos:end="29:26">"r"</literal></expr></argument>, <argument pos:start="29:29" pos:end="29:33"><expr pos:start="29:29" pos:end="29:33"><name pos:start="29:29" pos:end="29:33">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:37"><expr pos:start="30:5" pos:end="30:36"><call pos:start="30:5" pos:end="30:36"><name pos:start="30:5" pos:end="30:11">freopen</name><argument_list pos:start="30:12" pos:end="30:36">(<argument pos:start="30:13" pos:end="30:22"><expr pos:start="30:13" pos:end="30:22"><literal type="string" pos:start="30:13" pos:end="30:22">"ball.out"</literal></expr></argument>, <argument pos:start="30:25" pos:end="30:27"><expr pos:start="30:25" pos:end="30:27"><literal type="string" pos:start="30:25" pos:end="30:27">"w"</literal></expr></argument>, <argument pos:start="30:30" pos:end="30:35"><expr pos:start="30:30" pos:end="30:35"><name pos:start="30:30" pos:end="30:35">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:24"><expr pos:start="31:5" pos:end="31:23"><call pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:9">scanf</name><argument_list pos:start="31:10" pos:end="31:23">(<argument pos:start="31:11" pos:end="31:16"><expr pos:start="31:11" pos:end="31:16"><literal type="string" pos:start="31:11" pos:end="31:16">"%d%d"</literal></expr></argument>,<argument pos:start="31:18" pos:end="31:19"><expr pos:start="31:18" pos:end="31:19"><operator pos:start="31:18" pos:end="31:18">&amp;</operator><name pos:start="31:19" pos:end="31:19">m</name></expr></argument>,<argument pos:start="31:21" pos:end="31:22"><expr pos:start="31:21" pos:end="31:22"><operator pos:start="31:21" pos:end="31:21">&amp;</operator><name pos:start="31:22" pos:end="31:22">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="32:5" pos:end="35:5">for <control pos:start="32:9" pos:end="32:33">(<init pos:start="32:10" pos:end="32:20"><decl pos:start="32:10" pos:end="32:18"><type pos:start="32:10" pos:end="32:12"><name pos:start="32:10" pos:end="32:12">int</name></type> <name pos:start="32:14" pos:end="32:14">i</name> <init pos:start="32:16" pos:end="32:18">= <expr pos:start="32:18" pos:end="32:18"><literal type="number" pos:start="32:18" pos:end="32:18">0</literal></expr></init></decl> ;</init> <condition pos:start="32:22" pos:end="32:28"><expr pos:start="32:22" pos:end="32:26"><name pos:start="32:22" pos:end="32:22">i</name> <operator pos:start="32:24" pos:end="32:24">&lt;</operator> <name pos:start="32:26" pos:end="32:26">m</name></expr> ;</condition> <incr pos:start="32:30" pos:end="32:32"><expr pos:start="32:30" pos:end="32:32"><name pos:start="32:30" pos:end="32:30">i</name><operator pos:start="32:31" pos:end="32:32">++</operator></expr></incr>)</control>
    <block pos:start="33:5" pos:end="35:5">{<block_content pos:start="34:9" pos:end="34:27">
        <expr_stmt pos:start="34:9" pos:end="34:27"><expr pos:start="34:9" pos:end="34:26"><call pos:start="34:9" pos:end="34:26"><name pos:start="34:9" pos:end="34:13">scanf</name><argument_list pos:start="34:14" pos:end="34:26">(<argument pos:start="34:15" pos:end="34:18"><expr pos:start="34:15" pos:end="34:18"><literal type="string" pos:start="34:15" pos:end="34:18">"%d"</literal></expr></argument>, <argument pos:start="34:21" pos:end="34:25"><expr pos:start="34:21" pos:end="34:25"><operator pos:start="34:21" pos:end="34:21">&amp;</operator><name pos:start="34:22" pos:end="34:25"><name pos:start="34:22" pos:end="34:22">a</name><index pos:start="34:23" pos:end="34:25">[<expr pos:start="34:24" pos:end="34:24"><name pos:start="34:24" pos:end="34:24">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="36:5" pos:end="36:17"><expr pos:start="36:5" pos:end="36:16"><call pos:start="36:5" pos:end="36:16"><name pos:start="36:5" pos:end="36:8">sort</name><argument_list pos:start="36:9" pos:end="36:16">(<argument pos:start="36:10" pos:end="36:10"><expr pos:start="36:10" pos:end="36:10"><name pos:start="36:10" pos:end="36:10">a</name></expr></argument>, <argument pos:start="36:13" pos:end="36:15"><expr pos:start="36:13" pos:end="36:15"><name pos:start="36:13" pos:end="36:13">a</name><operator pos:start="36:14" pos:end="36:14">+</operator><name pos:start="36:15" pos:end="36:15">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="37:5" pos:end="48:5">for <control pos:start="37:9" pos:end="37:33">(<init pos:start="37:10" pos:end="37:20"><decl pos:start="37:10" pos:end="37:18"><type pos:start="37:10" pos:end="37:12"><name pos:start="37:10" pos:end="37:12">int</name></type> <name pos:start="37:14" pos:end="37:14">j</name> <init pos:start="37:16" pos:end="37:18">= <expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr></init></decl> ;</init> <condition pos:start="37:22" pos:end="37:28"><expr pos:start="37:22" pos:end="37:26"><name pos:start="37:22" pos:end="37:22">j</name> <operator pos:start="37:24" pos:end="37:24">&lt;</operator> <name pos:start="37:26" pos:end="37:26">n</name></expr> ;</condition> <incr pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:30">j</name><operator pos:start="37:31" pos:end="37:32">++</operator></expr></incr>)</control>
    <block pos:start="38:5" pos:end="48:5">{<block_content pos:start="39:9" pos:end="47:9">
        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><call pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:13">scanf</name><argument_list pos:start="39:14" pos:end="39:23">(<argument pos:start="39:15" pos:end="39:18"><expr pos:start="39:15" pos:end="39:18"><literal type="string" pos:start="39:15" pos:end="39:18">"%d"</literal></expr></argument>, <argument pos:start="39:21" pos:end="39:22"><expr pos:start="39:21" pos:end="39:22"><operator pos:start="39:21" pos:end="39:21">&amp;</operator><name pos:start="39:22" pos:end="39:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="40:9" pos:end="47:9"><if pos:start="40:9" pos:end="43:9">if<condition pos:start="40:11" pos:end="40:23">(<expr pos:start="40:12" pos:end="40:22"><call pos:start="40:12" pos:end="40:17"><name pos:start="40:12" pos:end="40:14">fin</name><argument_list pos:start="40:15" pos:end="40:17">(<argument pos:start="40:16" pos:end="40:16"><expr pos:start="40:16" pos:end="40:16"><name pos:start="40:16" pos:end="40:16">b</name></expr></argument>)</argument_list></call> <operator pos:start="40:19" pos:end="40:20">==</operator> <literal type="number" pos:start="40:22" pos:end="40:22">1</literal></expr>)</condition>
        <block pos:start="41:9" pos:end="43:9">{<block_content pos:start="42:13" pos:end="42:28">
            <expr_stmt pos:start="42:13" pos:end="42:28"><expr pos:start="42:13" pos:end="42:27"><call pos:start="42:13" pos:end="42:27"><name pos:start="42:13" pos:end="42:18">printf</name><argument_list pos:start="42:19" pos:end="42:27">(<argument pos:start="42:20" pos:end="42:26"><expr pos:start="42:20" pos:end="42:26"><literal type="string" pos:start="42:20" pos:end="42:26">"YES/n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="44:9" pos:end="47:9">else
        <block pos:start="45:9" pos:end="47:9">{<block_content pos:start="46:13" pos:end="46:27">
            <expr_stmt pos:start="46:13" pos:end="46:27"><expr pos:start="46:13" pos:end="46:26"><call pos:start="46:13" pos:end="46:26"><name pos:start="46:13" pos:end="46:18">printf</name><argument_list pos:start="46:19" pos:end="46:26">(<argument pos:start="46:20" pos:end="46:25"><expr pos:start="46:20" pos:end="46:25"><literal type="string" pos:start="46:20" pos:end="46:25">"NO/n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
