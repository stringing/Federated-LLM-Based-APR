<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/180/180.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<struct pos:start="3:1" pos:end="5:11">struct <name pos:start="3:8" pos:end="3:11">Edge</name> <block pos:start="3:13" pos:end="5:1">{<public type="default" pos:start="4:5" pos:end="4:17">
    <decl_stmt pos:start="4:5" pos:end="4:17"><decl pos:start="4:5" pos:end="4:10"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:10">to</name></decl>, <decl pos:start="4:13" pos:end="4:16"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:13" pos:end="4:16">next</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="5:3" pos:end="5:10"><name pos:start="5:3" pos:end="5:10"><name pos:start="5:3" pos:end="5:3">e</name><index pos:start="5:4" pos:end="5:10">[<expr pos:start="5:5" pos:end="5:9"><literal type="number" pos:start="5:5" pos:end="5:9">20010</literal></expr>]</index></name></decl>;</struct>
<decl_stmt pos:start="6:1" pos:end="6:9"><decl pos:start="6:1" pos:end="6:8"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:8">ecnt</name></decl>;</decl_stmt> 
<decl_stmt pos:start="7:1" pos:end="7:16"><decl pos:start="7:1" pos:end="7:15"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:8">head</name><index pos:start="7:9" pos:end="7:15">[<expr pos:start="7:10" pos:end="7:14"><literal type="number" pos:start="7:10" pos:end="7:14">10010</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="8:1" pos:end="13:1"><type pos:start="8:1" pos:end="8:4"><name pos:start="8:1" pos:end="8:4">void</name></type> <name pos:start="8:6" pos:end="8:12">addEdge</name><parameter_list pos:start="8:13" pos:end="8:26">(<parameter pos:start="8:14" pos:end="8:18"><decl pos:start="8:14" pos:end="8:18"><type pos:start="8:14" pos:end="8:18"><name pos:start="8:14" pos:end="8:16">int</name></type> <name pos:start="8:18" pos:end="8:18">u</name></decl></parameter>, <parameter pos:start="8:21" pos:end="8:25"><decl pos:start="8:21" pos:end="8:25"><type pos:start="8:21" pos:end="8:25"><name pos:start="8:21" pos:end="8:23">int</name></type> <name pos:start="8:25" pos:end="8:25">v</name></decl></parameter>)</parameter_list> <block pos:start="8:28" pos:end="13:1">{<block_content pos:start="9:5" pos:end="12:19"> 
    <expr_stmt pos:start="9:5" pos:end="9:11"><expr pos:start="9:5" pos:end="9:10"><operator pos:start="9:5" pos:end="9:6">++</operator><name pos:start="9:7" pos:end="9:10">ecnt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:19"><expr pos:start="10:5" pos:end="10:18"><name pos:start="10:5" pos:end="10:11"><name pos:start="10:5" pos:end="10:5">e</name><index pos:start="10:6" pos:end="10:11">[<expr pos:start="10:7" pos:end="10:10"><name pos:start="10:7" pos:end="10:10">ecnt</name></expr>]</index></name><operator pos:start="10:12" pos:end="10:12">.</operator><name pos:start="10:13" pos:end="10:14">to</name> <operator pos:start="10:16" pos:end="10:16">=</operator> <name pos:start="10:18" pos:end="10:18">v</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:27"><expr pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:5">e</name><index pos:start="11:6" pos:end="11:11">[<expr pos:start="11:7" pos:end="11:10"><name pos:start="11:7" pos:end="11:10">ecnt</name></expr>]</index></name><operator pos:start="11:12" pos:end="11:12">.</operator><name pos:start="11:13" pos:end="11:16">next</name> <operator pos:start="11:18" pos:end="11:18">=</operator> <name pos:start="11:20" pos:end="11:26"><name pos:start="11:20" pos:end="11:23">head</name><index pos:start="11:24" pos:end="11:26">[<expr pos:start="11:25" pos:end="11:25"><name pos:start="11:25" pos:end="11:25">u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:19"><expr pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:8">head</name><index pos:start="12:9" pos:end="12:11">[<expr pos:start="12:10" pos:end="12:10"><name pos:start="12:10" pos:end="12:10">u</name></expr>]</index></name> <operator pos:start="12:13" pos:end="12:13">=</operator> <name pos:start="12:15" pos:end="12:18">ecnt</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt pos:start="14:1" pos:end="14:6"><decl pos:start="14:1" pos:end="14:5"><type pos:start="14:1" pos:end="14:3"><name pos:start="14:1" pos:end="14:3">int</name></type> <name pos:start="14:5" pos:end="14:5">n</name></decl>;</decl_stmt>            
<decl_stmt pos:start="15:1" pos:end="15:6"><decl pos:start="15:1" pos:end="15:5"><type pos:start="15:1" pos:end="15:3"><name pos:start="15:1" pos:end="15:3">int</name></type> <name pos:start="15:5" pos:end="15:5">m</name></decl>;</decl_stmt>               
<decl_stmt pos:start="16:1" pos:end="16:15"><decl pos:start="16:1" pos:end="16:14"><type pos:start="16:1" pos:end="16:3"><name pos:start="16:1" pos:end="16:3">int</name></type> <name pos:start="16:5" pos:end="16:14"><name pos:start="16:5" pos:end="16:7">dfn</name><index pos:start="16:8" pos:end="16:14">[<expr pos:start="16:9" pos:end="16:13"><literal type="number" pos:start="16:9" pos:end="16:13">10010</literal></expr>]</index></name></decl>;</decl_stmt>   
<decl_stmt pos:start="17:1" pos:end="17:15"><decl pos:start="17:1" pos:end="17:14"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:7">low</name><index pos:start="17:8" pos:end="17:14">[<expr pos:start="17:9" pos:end="17:13"><literal type="number" pos:start="17:9" pos:end="17:13">10010</literal></expr>]</index></name></decl>;</decl_stmt>   
<decl_stmt pos:start="18:1" pos:end="18:10"><decl pos:start="18:1" pos:end="18:9"><type pos:start="18:1" pos:end="18:3"><name pos:start="18:1" pos:end="18:3">int</name></type> <name pos:start="18:5" pos:end="18:9">timer</name></decl>;</decl_stmt>       
<decl_stmt pos:start="19:1" pos:end="19:12"><decl pos:start="19:1" pos:end="19:11"><type pos:start="19:1" pos:end="19:3"><name pos:start="19:1" pos:end="19:3">int</name></type> <name pos:start="19:5" pos:end="19:11">scc_cnt</name></decl>;</decl_stmt>     
<decl_stmt pos:start="20:1" pos:end="20:23"><decl pos:start="20:1" pos:end="20:22"><type pos:start="20:1" pos:end="20:11"><name pos:start="20:1" pos:end="20:11"><name pos:start="20:1" pos:end="20:6">vector</name><argument_list type="generic" pos:start="20:7" pos:end="20:11">&lt;<argument pos:start="20:8" pos:end="20:10"><expr pos:start="20:8" pos:end="20:10"><name pos:start="20:8" pos:end="20:10">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="20:13" pos:end="20:22"><name pos:start="20:13" pos:end="20:15">scc</name><index pos:start="20:16" pos:end="20:22">[<expr pos:start="20:17" pos:end="20:21"><literal type="number" pos:start="20:17" pos:end="20:21">10010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="21:1" pos:end="21:13"><decl pos:start="21:1" pos:end="21:12"><type pos:start="21:1" pos:end="21:10"><name pos:start="21:1" pos:end="21:10"><name pos:start="21:1" pos:end="21:5">stack</name><argument_list type="generic" pos:start="21:6" pos:end="21:10">&lt;<argument pos:start="21:7" pos:end="21:9"><expr pos:start="21:7" pos:end="21:9"><name pos:start="21:7" pos:end="21:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="21:12" pos:end="21:12">S</name></decl>;</decl_stmt>
<decl_stmt pos:start="22:1" pos:end="22:15"><decl pos:start="22:1" pos:end="22:14"><type pos:start="22:1" pos:end="22:5"><name pos:start="22:1" pos:end="22:5">short</name></type> <name pos:start="22:7" pos:end="22:14"><name pos:start="22:7" pos:end="22:7">a</name><index pos:start="22:8" pos:end="22:14">[<expr pos:start="22:9" pos:end="22:13"><literal type="number" pos:start="22:9" pos:end="22:13">10010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="23:1" pos:end="23:21"><decl pos:start="23:1" pos:end="23:20"><type pos:start="23:1" pos:end="23:4"><name pos:start="23:1" pos:end="23:4">bool</name></type> <name pos:start="23:6" pos:end="23:20"><name pos:start="23:6" pos:end="23:13">in_stack</name><index pos:start="23:14" pos:end="23:20">[<expr pos:start="23:15" pos:end="23:19"><literal type="number" pos:start="23:15" pos:end="23:19">10010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="24:1" pos:end="24:17"><decl pos:start="24:1" pos:end="24:16"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:16"><name pos:start="24:5" pos:end="24:9">sccno</name><index pos:start="24:10" pos:end="24:16">[<expr pos:start="24:11" pos:end="24:15"><literal type="number" pos:start="24:11" pos:end="24:15">10010</literal></expr>]</index></name></decl>;</decl_stmt>

<function pos:start="26:1" pos:end="50:1"><type pos:start="26:1" pos:end="26:4"><name pos:start="26:1" pos:end="26:4">void</name></type> <name pos:start="26:6" pos:end="26:11">tarjan</name><parameter_list pos:start="26:12" pos:end="26:18">(<parameter pos:start="26:13" pos:end="26:17"><decl pos:start="26:13" pos:end="26:17"><type pos:start="26:13" pos:end="26:15"><name pos:start="26:13" pos:end="26:15">int</name></type> <name pos:start="26:17" pos:end="26:17">u</name></decl></parameter>)</parameter_list> <block pos:start="26:20" pos:end="50:1">{<block_content pos:start="27:5" pos:end="49:5">
    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:7">dfn</name><index pos:start="27:8" pos:end="27:10">[<expr pos:start="27:9" pos:end="27:9"><name pos:start="27:9" pos:end="27:9">u</name></expr>]</index></name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:19"><name pos:start="27:14" pos:end="27:16">low</name><index pos:start="27:17" pos:end="27:19">[<expr pos:start="27:18" pos:end="27:18"><name pos:start="27:18" pos:end="27:18">u</name></expr>]</index></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <operator pos:start="27:23" pos:end="27:24">++</operator><name pos:start="27:25" pos:end="27:29">timer</name></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:14"><expr pos:start="28:5" pos:end="28:13"><call pos:start="28:5" pos:end="28:13"><name pos:start="28:5" pos:end="28:10"><name pos:start="28:5" pos:end="28:5">S</name><operator pos:start="28:6" pos:end="28:6">.</operator><name pos:start="28:7" pos:end="28:10">push</name></name><argument_list pos:start="28:11" pos:end="28:13">(<argument pos:start="28:12" pos:end="28:12"><expr pos:start="28:12" pos:end="28:12"><name pos:start="28:12" pos:end="28:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:12">in_stack</name><index pos:start="29:13" pos:end="29:15">[<expr pos:start="29:14" pos:end="29:14"><name pos:start="29:14" pos:end="29:14">u</name></expr>]</index></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="boolean" pos:start="29:19" pos:end="29:22">true</literal></expr>;</expr_stmt>
    <for pos:start="30:5" pos:end="38:5">for <control pos:start="30:9" pos:end="30:43">(<init pos:start="30:10" pos:end="30:25"><decl pos:start="30:10" pos:end="30:24"><type pos:start="30:10" pos:end="30:12"><name pos:start="30:10" pos:end="30:12">int</name></type> <name pos:start="30:14" pos:end="30:14">i</name> <init pos:start="30:16" pos:end="30:24">= <expr pos:start="30:18" pos:end="30:24"><name pos:start="30:18" pos:end="30:24"><name pos:start="30:18" pos:end="30:21">head</name><index pos:start="30:22" pos:end="30:24">[<expr pos:start="30:23" pos:end="30:23"><name pos:start="30:23" pos:end="30:23">u</name></expr>]</index></name></expr></init></decl>;</init> <condition pos:start="30:27" pos:end="30:28"><expr pos:start="30:27" pos:end="30:27"><name pos:start="30:27" pos:end="30:27">i</name></expr>;</condition> <incr pos:start="30:30" pos:end="30:42"><expr pos:start="30:30" pos:end="30:42"><name pos:start="30:30" pos:end="30:30">i</name> <operator pos:start="30:32" pos:end="30:32">=</operator> <name pos:start="30:34" pos:end="30:37"><name pos:start="30:34" pos:end="30:34">e</name><index pos:start="30:35" pos:end="30:37">[<expr pos:start="30:36" pos:end="30:36"><name pos:start="30:36" pos:end="30:36">i</name></expr>]</index></name><operator pos:start="30:38" pos:end="30:38">.</operator><name pos:start="30:39" pos:end="30:42">next</name></expr></incr>)</control> <block pos:start="30:45" pos:end="38:5">{<block_content pos:start="31:9" pos:end="37:9">
        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:13">v</name> <init pos:start="31:15" pos:end="31:23">= <expr pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:20"><name pos:start="31:17" pos:end="31:17">e</name><index pos:start="31:18" pos:end="31:20">[<expr pos:start="31:19" pos:end="31:19"><name pos:start="31:19" pos:end="31:19">i</name></expr>]</index></name><operator pos:start="31:21" pos:end="31:21">.</operator><name pos:start="31:22" pos:end="31:23">to</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="32:9" pos:end="37:9"><if pos:start="32:9" pos:end="35:9">if <condition pos:start="32:12" pos:end="32:24">(<expr pos:start="32:13" pos:end="32:23"><name pos:start="32:13" pos:end="32:18"><name pos:start="32:13" pos:end="32:15">dfn</name><index pos:start="32:16" pos:end="32:18">[<expr pos:start="32:17" pos:end="32:17"><name pos:start="32:17" pos:end="32:17">v</name></expr>]</index></name> <operator pos:start="32:20" pos:end="32:21">==</operator> <literal type="number" pos:start="32:23" pos:end="32:23">0</literal></expr>)</condition> <block pos:start="32:26" pos:end="35:9">{<block_content pos:start="33:13" pos:end="34:41">
            <expr_stmt pos:start="33:13" pos:end="33:22"><expr pos:start="33:13" pos:end="33:21"><call pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:18">tarjan</name><argument_list pos:start="33:19" pos:end="33:21">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="34:13" pos:end="34:41"><expr pos:start="34:13" pos:end="34:40"><name pos:start="34:13" pos:end="34:18"><name pos:start="34:13" pos:end="34:15">low</name><index pos:start="34:16" pos:end="34:18">[<expr pos:start="34:17" pos:end="34:17"><name pos:start="34:17" pos:end="34:17">u</name></expr>]</index></name> <operator pos:start="34:20" pos:end="34:20">=</operator> <call pos:start="34:22" pos:end="34:40"><name pos:start="34:22" pos:end="34:24">min</name><argument_list pos:start="34:25" pos:end="34:40">(<argument pos:start="34:26" pos:end="34:31"><expr pos:start="34:26" pos:end="34:31"><name pos:start="34:26" pos:end="34:31"><name pos:start="34:26" pos:end="34:28">low</name><index pos:start="34:29" pos:end="34:31">[<expr pos:start="34:30" pos:end="34:30"><name pos:start="34:30" pos:end="34:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="34:34" pos:end="34:39"><expr pos:start="34:34" pos:end="34:39"><name pos:start="34:34" pos:end="34:39"><name pos:start="34:34" pos:end="34:36">low</name><index pos:start="34:37" pos:end="34:39">[<expr pos:start="34:38" pos:end="34:38"><name pos:start="34:38" pos:end="34:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="37:9">else if <condition pos:start="35:19" pos:end="35:31">(<expr pos:start="35:20" pos:end="35:30"><name pos:start="35:20" pos:end="35:30"><name pos:start="35:20" pos:end="35:27">in_stack</name><index pos:start="35:28" pos:end="35:30">[<expr pos:start="35:29" pos:end="35:29"><name pos:start="35:29" pos:end="35:29">v</name></expr>]</index></name></expr>)</condition> <block pos:start="35:33" pos:end="37:9">{<block_content pos:start="36:13" pos:end="36:41">
            <expr_stmt pos:start="36:13" pos:end="36:41"><expr pos:start="36:13" pos:end="36:40"><name pos:start="36:13" pos:end="36:18"><name pos:start="36:13" pos:end="36:15">low</name><index pos:start="36:16" pos:end="36:18">[<expr pos:start="36:17" pos:end="36:17"><name pos:start="36:17" pos:end="36:17">u</name></expr>]</index></name> <operator pos:start="36:20" pos:end="36:20">=</operator> <call pos:start="36:22" pos:end="36:40"><name pos:start="36:22" pos:end="36:24">min</name><argument_list pos:start="36:25" pos:end="36:40">(<argument pos:start="36:26" pos:end="36:31"><expr pos:start="36:26" pos:end="36:31"><name pos:start="36:26" pos:end="36:31"><name pos:start="36:26" pos:end="36:28">low</name><index pos:start="36:29" pos:end="36:31">[<expr pos:start="36:30" pos:end="36:30"><name pos:start="36:30" pos:end="36:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="36:34" pos:end="36:39"><expr pos:start="36:34" pos:end="36:39"><name pos:start="36:34" pos:end="36:39"><name pos:start="36:34" pos:end="36:36">dfn</name><index pos:start="36:37" pos:end="36:39">[<expr pos:start="36:38" pos:end="36:38"><name pos:start="36:38" pos:end="36:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:25">(<expr pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:11">low</name><index pos:start="39:12" pos:end="39:14">[<expr pos:start="39:13" pos:end="39:13"><name pos:start="39:13" pos:end="39:13">u</name></expr>]</index></name> <operator pos:start="39:16" pos:end="39:17">==</operator> <name pos:start="39:19" pos:end="39:24"><name pos:start="39:19" pos:end="39:21">dfn</name><index pos:start="39:22" pos:end="39:24">[<expr pos:start="39:23" pos:end="39:23"><name pos:start="39:23" pos:end="39:23">u</name></expr>]</index></name></expr>)</condition> <block pos:start="39:27" pos:end="49:5">{<block_content pos:start="40:9" pos:end="48:9">
        <expr_stmt pos:start="40:9" pos:end="40:18"><expr pos:start="40:9" pos:end="40:17"><name pos:start="40:9" pos:end="40:15">scc_cnt</name><operator pos:start="40:16" pos:end="40:17">++</operator></expr>;</expr_stmt>
        <while pos:start="41:9" pos:end="48:9">while <condition pos:start="41:15" pos:end="41:26">(<expr pos:start="41:16" pos:end="41:25"><operator pos:start="41:16" pos:end="41:16">!</operator><call pos:start="41:17" pos:end="41:25"><name pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:17">S</name><operator pos:start="41:18" pos:end="41:18">.</operator><name pos:start="41:19" pos:end="41:23">empty</name></name><argument_list pos:start="41:24" pos:end="41:25">()</argument_list></call></expr>)</condition> <block pos:start="41:28" pos:end="48:9">{<block_content pos:start="42:13" pos:end="47:32">
            <decl_stmt pos:start="42:13" pos:end="42:30"><decl pos:start="42:13" pos:end="42:29"><type pos:start="42:13" pos:end="42:15"><name pos:start="42:13" pos:end="42:15">int</name></type> <name pos:start="42:17" pos:end="42:19">now</name> <init pos:start="42:21" pos:end="42:29">= <expr pos:start="42:23" pos:end="42:29"><call pos:start="42:23" pos:end="42:29"><name pos:start="42:23" pos:end="42:27"><name pos:start="42:23" pos:end="42:23">S</name><operator pos:start="42:24" pos:end="42:24">.</operator><name pos:start="42:25" pos:end="42:27">top</name></name><argument_list pos:start="42:28" pos:end="42:29">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><call pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:17"><name pos:start="43:13" pos:end="43:13">S</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:17">pop</name></name><argument_list pos:start="43:18" pos:end="43:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="44:13" pos:end="44:40"><expr pos:start="44:13" pos:end="44:39"><name pos:start="44:13" pos:end="44:24"><name pos:start="44:13" pos:end="44:15">scc</name><index pos:start="44:16" pos:end="44:24">[<expr pos:start="44:17" pos:end="44:23"><name pos:start="44:17" pos:end="44:23">scc_cnt</name></expr>]</index></name><operator pos:start="44:25" pos:end="44:25">.</operator><call pos:start="44:26" pos:end="44:39"><name pos:start="44:26" pos:end="44:34">push_back</name><argument_list pos:start="44:35" pos:end="44:39">(<argument pos:start="44:36" pos:end="44:38"><expr pos:start="44:36" pos:end="44:38"><name pos:start="44:36" pos:end="44:38">now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:17">sccno</name><index pos:start="45:18" pos:end="45:22">[<expr pos:start="45:19" pos:end="45:21"><name pos:start="45:19" pos:end="45:21">now</name></expr>]</index></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:32">scc_cnt</name></expr>;</expr_stmt>
            <expr_stmt pos:start="46:13" pos:end="46:34"><expr pos:start="46:13" pos:end="46:33"><name pos:start="46:13" pos:end="46:25"><name pos:start="46:13" pos:end="46:20">in_stack</name><index pos:start="46:21" pos:end="46:25">[<expr pos:start="46:22" pos:end="46:24"><name pos:start="46:22" pos:end="46:24">now</name></expr>]</index></name> <operator pos:start="46:27" pos:end="46:27">=</operator> <literal type="boolean" pos:start="46:29" pos:end="46:33">false</literal></expr>;</expr_stmt>
            <if_stmt pos:start="47:13" pos:end="47:32"><if pos:start="47:13" pos:end="47:32">if <condition pos:start="47:16" pos:end="47:25">(<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:19">now</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <name pos:start="47:24" pos:end="47:24">u</name></expr>)</condition><block type="pseudo" pos:start="47:27" pos:end="47:32"><block_content pos:start="47:27" pos:end="47:32"> <break pos:start="47:27" pos:end="47:32">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<decl_stmt pos:start="51:1" pos:end="51:21"><decl pos:start="51:1" pos:end="51:20"><type pos:start="51:1" pos:end="51:4"><name pos:start="51:1" pos:end="51:4">Edge</name></type> <name pos:start="51:6" pos:end="51:20"><name pos:start="51:6" pos:end="51:13">new_edge</name><index pos:start="51:14" pos:end="51:20">[<expr pos:start="51:15" pos:end="51:19"><literal type="number" pos:start="51:15" pos:end="51:19">20010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="52:1" pos:end="52:13"><decl pos:start="52:1" pos:end="52:12"><type pos:start="52:1" pos:end="52:3"><name pos:start="52:1" pos:end="52:3">int</name></type> <name pos:start="52:5" pos:end="52:12">new_ecnt</name></decl>;</decl_stmt>

<decl_stmt pos:start="54:1" pos:end="54:20"><decl pos:start="54:1" pos:end="54:19"><type pos:start="54:1" pos:end="54:3"><name pos:start="54:1" pos:end="54:3">int</name></type> <name pos:start="54:5" pos:end="54:19"><name pos:start="54:5" pos:end="54:12">new_head</name><index pos:start="54:13" pos:end="54:19">[<expr pos:start="54:14" pos:end="54:18"><literal type="number" pos:start="54:14" pos:end="54:18">10010</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="55:1" pos:end="60:1"><type pos:start="55:1" pos:end="55:4"><name pos:start="55:1" pos:end="55:4">void</name></type> <name pos:start="55:6" pos:end="55:15">addNewEdge</name><parameter_list pos:start="55:16" pos:end="55:28">(<parameter pos:start="55:17" pos:end="55:21"><decl pos:start="55:17" pos:end="55:21"><type pos:start="55:17" pos:end="55:21"><name pos:start="55:17" pos:end="55:19">int</name></type> <name pos:start="55:21" pos:end="55:21">u</name></decl></parameter>,<parameter pos:start="55:23" pos:end="55:27"><decl pos:start="55:23" pos:end="55:27"><type pos:start="55:23" pos:end="55:27"><name pos:start="55:23" pos:end="55:25">int</name></type> <name pos:start="55:27" pos:end="55:27">v</name></decl></parameter>)</parameter_list><block pos:start="55:29" pos:end="60:1">{<block_content pos:start="56:5" pos:end="59:25">
    <expr_stmt pos:start="56:5" pos:end="56:15"><expr pos:start="56:5" pos:end="56:14"><operator pos:start="56:5" pos:end="56:6">++</operator><name pos:start="56:7" pos:end="56:14">new_ecnt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:12">new_edge</name><index pos:start="57:13" pos:end="57:22">[<expr pos:start="57:14" pos:end="57:21"><name pos:start="57:14" pos:end="57:21">new_ecnt</name></expr>]</index></name><operator pos:start="57:23" pos:end="57:23">.</operator><name pos:start="57:24" pos:end="57:25">to</name><operator pos:start="57:26" pos:end="57:26">=</operator><name pos:start="57:27" pos:end="57:27">v</name></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:40"><expr pos:start="58:5" pos:end="58:39"><name pos:start="58:5" pos:end="58:22"><name pos:start="58:5" pos:end="58:12">new_edge</name><index pos:start="58:13" pos:end="58:22">[<expr pos:start="58:14" pos:end="58:21"><name pos:start="58:14" pos:end="58:21">new_ecnt</name></expr>]</index></name><operator pos:start="58:23" pos:end="58:23">.</operator><name pos:start="58:24" pos:end="58:27">next</name><operator pos:start="58:28" pos:end="58:28">=</operator><name pos:start="58:29" pos:end="58:39"><name pos:start="58:29" pos:end="58:36">new_head</name><index pos:start="58:37" pos:end="58:39">[<expr pos:start="58:38" pos:end="58:38"><name pos:start="58:38" pos:end="58:38">u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:12">new_head</name><index pos:start="59:13" pos:end="59:15">[<expr pos:start="59:14" pos:end="59:14"><name pos:start="59:14" pos:end="59:14">u</name></expr>]</index></name><operator pos:start="59:16" pos:end="59:16">=</operator><name pos:start="59:17" pos:end="59:24">new_ecnt</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt pos:start="61:1" pos:end="61:21"><decl pos:start="61:1" pos:end="61:20"><type pos:start="61:1" pos:end="61:3"><name pos:start="61:1" pos:end="61:3">int</name></type> <name pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:13">chuansong</name><index pos:start="61:14" pos:end="61:20">[<expr pos:start="61:15" pos:end="61:19"><literal type="number" pos:start="61:15" pos:end="61:19">10010</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt pos:start="62:1" pos:end="62:10"><decl pos:start="62:1" pos:end="62:9"><type pos:start="62:1" pos:end="62:3"><name pos:start="62:1" pos:end="62:3">int</name></type> <name pos:start="62:5" pos:end="62:7">pos</name><init pos:start="62:8" pos:end="62:9">=<expr pos:start="62:9" pos:end="62:9"><literal type="number" pos:start="62:9" pos:end="62:9">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="63:1" pos:end="63:15"><decl pos:start="63:1" pos:end="63:14"><type pos:start="63:1" pos:end="63:3"><name pos:start="63:1" pos:end="63:3">int</name></type> <name pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:7">vis</name><index pos:start="63:8" pos:end="63:14">[<expr pos:start="63:9" pos:end="63:13"><literal type="number" pos:start="63:9" pos:end="63:13">10100</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="64:1" pos:end="75:1"><type pos:start="64:1" pos:end="64:3"><name pos:start="64:1" pos:end="64:3">int</name></type> <name pos:start="64:5" pos:end="64:7">dfs</name><parameter_list pos:start="64:8" pos:end="64:14">(<parameter pos:start="64:9" pos:end="64:13"><decl pos:start="64:9" pos:end="64:13"><type pos:start="64:9" pos:end="64:11"><name pos:start="64:9" pos:end="64:11">int</name></type> <name pos:start="64:13" pos:end="64:13">x</name></decl></parameter>)</parameter_list><block pos:start="64:15" pos:end="75:1">{<block_content pos:start="65:5" pos:end="74:18">
    <if_stmt pos:start="65:5" pos:end="65:28"><if pos:start="65:5" pos:end="65:28">if<condition pos:start="65:7" pos:end="65:14">(<expr pos:start="65:8" pos:end="65:13"><name pos:start="65:8" pos:end="65:13"><name pos:start="65:8" pos:end="65:10">vis</name><index pos:start="65:11" pos:end="65:13">[<expr pos:start="65:12" pos:end="65:12"><name pos:start="65:12" pos:end="65:12">x</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="65:15" pos:end="65:28"><block_content pos:start="65:15" pos:end="65:28"><return pos:start="65:15" pos:end="65:28">return <expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:24">vis</name><index pos:start="65:25" pos:end="65:27">[<expr pos:start="65:26" pos:end="65:26"><name pos:start="65:26" pos:end="65:26">x</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt pos:start="66:5" pos:end="66:21"><decl pos:start="66:5" pos:end="66:13"><type pos:start="66:5" pos:end="66:7"><name pos:start="66:5" pos:end="66:7">int</name></type> <name pos:start="66:9" pos:end="66:11">sum</name><init pos:start="66:12" pos:end="66:13">=<expr pos:start="66:13" pos:end="66:13"><literal type="number" pos:start="66:13" pos:end="66:13">0</literal></expr></init></decl>,<decl pos:start="66:15" pos:end="66:20"><type ref="prev" pos:start="66:5" pos:end="66:7"/><name pos:start="66:15" pos:end="66:18">temp</name><init pos:start="66:19" pos:end="66:20">=<expr pos:start="66:20" pos:end="66:20"><literal type="number" pos:start="66:20" pos:end="66:20">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="67:5" pos:end="69:5">for<control pos:start="67:8" pos:end="67:36">(<init pos:start="67:9" pos:end="67:16"><decl pos:start="67:9" pos:end="67:15"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:13">i</name><init pos:start="67:14" pos:end="67:15">=<expr pos:start="67:15" pos:end="67:15"><literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr></init></decl>;</init><condition pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:17">i</name><operator pos:start="67:18" pos:end="67:18">&lt;</operator><name pos:start="67:19" pos:end="67:24"><name pos:start="67:19" pos:end="67:21">scc</name><index pos:start="67:22" pos:end="67:24">[<expr pos:start="67:23" pos:end="67:23"><name pos:start="67:23" pos:end="67:23">x</name></expr>]</index></name><operator pos:start="67:25" pos:end="67:25">.</operator><call pos:start="67:26" pos:end="67:31"><name pos:start="67:26" pos:end="67:29">size</name><argument_list pos:start="67:30" pos:end="67:31">()</argument_list></call></expr>;</condition><incr pos:start="67:33" pos:end="67:35"><expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:33">i</name><operator pos:start="67:34" pos:end="67:35">++</operator></expr></incr>)</control><block pos:start="67:37" pos:end="69:5">{<block_content pos:start="68:9" pos:end="68:26">
        <expr_stmt pos:start="68:9" pos:end="68:26"><expr pos:start="68:9" pos:end="68:25"><name pos:start="68:9" pos:end="68:11">sum</name><operator pos:start="68:12" pos:end="68:13">+=</operator><name pos:start="68:14" pos:end="68:25"><name pos:start="68:14" pos:end="68:14">a</name><index pos:start="68:15" pos:end="68:25">[<expr pos:start="68:16" pos:end="68:24"><name pos:start="68:16" pos:end="68:24"><name pos:start="68:16" pos:end="68:18">scc</name><index pos:start="68:19" pos:end="68:21">[<expr pos:start="68:20" pos:end="68:20"><name pos:start="68:20" pos:end="68:20">x</name></expr>]</index><index pos:start="68:22" pos:end="68:24">[<expr pos:start="68:23" pos:end="68:23"><name pos:start="68:23" pos:end="68:23">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="70:5" pos:end="72:5">for<control pos:start="70:8" pos:end="70:47">(<init pos:start="70:9" pos:end="70:26"><decl pos:start="70:9" pos:end="70:25"><type pos:start="70:9" pos:end="70:11"><name pos:start="70:9" pos:end="70:11">int</name></type> <name pos:start="70:13" pos:end="70:13">i</name><init pos:start="70:14" pos:end="70:25">=<expr pos:start="70:15" pos:end="70:25"><name pos:start="70:15" pos:end="70:25"><name pos:start="70:15" pos:end="70:22">new_head</name><index pos:start="70:23" pos:end="70:25">[<expr pos:start="70:24" pos:end="70:24"><name pos:start="70:24" pos:end="70:24">x</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="70:27" pos:end="70:28"><expr pos:start="70:27" pos:end="70:27"><name pos:start="70:27" pos:end="70:27">i</name></expr>;</condition><incr pos:start="70:29" pos:end="70:46"><expr pos:start="70:29" pos:end="70:46"><name pos:start="70:29" pos:end="70:29">i</name><operator pos:start="70:30" pos:end="70:30">=</operator><name pos:start="70:31" pos:end="70:41"><name pos:start="70:31" pos:end="70:38">new_edge</name><index pos:start="70:39" pos:end="70:41">[<expr pos:start="70:40" pos:end="70:40"><name pos:start="70:40" pos:end="70:40">i</name></expr>]</index></name><operator pos:start="70:42" pos:end="70:42">.</operator><name pos:start="70:43" pos:end="70:46">next</name></expr></incr>)</control><block pos:start="70:48" pos:end="72:5">{<block_content pos:start="71:9" pos:end="71:43">
        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:12">temp</name><operator pos:start="71:13" pos:end="71:13">=</operator><call pos:start="71:14" pos:end="71:42"><name pos:start="71:14" pos:end="71:16">max</name><argument_list pos:start="71:17" pos:end="71:42">(<argument pos:start="71:18" pos:end="71:21"><expr pos:start="71:18" pos:end="71:21"><name pos:start="71:18" pos:end="71:21">temp</name></expr></argument>,<argument pos:start="71:23" pos:end="71:41"><expr pos:start="71:23" pos:end="71:41"><call pos:start="71:23" pos:end="71:41"><name pos:start="71:23" pos:end="71:25">dfs</name><argument_list pos:start="71:26" pos:end="71:41">(<argument pos:start="71:27" pos:end="71:40"><expr pos:start="71:27" pos:end="71:40"><name pos:start="71:27" pos:end="71:37"><name pos:start="71:27" pos:end="71:34">new_edge</name><index pos:start="71:35" pos:end="71:37">[<expr pos:start="71:36" pos:end="71:36"><name pos:start="71:36" pos:end="71:36">i</name></expr>]</index></name><operator pos:start="71:38" pos:end="71:38">.</operator><name pos:start="71:39" pos:end="71:40">to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:10"><name pos:start="73:5" pos:end="73:7">vis</name><index pos:start="73:8" pos:end="73:10">[<expr pos:start="73:9" pos:end="73:9"><name pos:start="73:9" pos:end="73:9">x</name></expr>]</index></name><operator pos:start="73:11" pos:end="73:11">=</operator><name pos:start="73:12" pos:end="73:15">temp</name><operator pos:start="73:16" pos:end="73:16">+</operator><name pos:start="73:17" pos:end="73:19">sum</name></expr>;</expr_stmt>
    <return pos:start="74:5" pos:end="74:18">return <expr pos:start="74:12" pos:end="74:17"><name pos:start="74:12" pos:end="74:17"><name pos:start="74:12" pos:end="74:14">vis</name><index pos:start="74:15" pos:end="74:17">[<expr pos:start="74:16" pos:end="74:16"><name pos:start="74:16" pos:end="74:16">x</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<decl_stmt pos:start="76:1" pos:end="76:8"><decl pos:start="76:1" pos:end="76:7"><type pos:start="76:1" pos:end="76:3"><name pos:start="76:1" pos:end="76:3">int</name></type> <name pos:start="76:5" pos:end="76:7">ans</name></decl>;</decl_stmt>
<function pos:start="77:1" pos:end="133:1"><type pos:start="77:1" pos:end="77:3"><name pos:start="77:1" pos:end="77:3">int</name></type> <name pos:start="77:5" pos:end="77:8">main</name><parameter_list pos:start="77:9" pos:end="77:10">()</parameter_list> <block pos:start="77:12" pos:end="133:1">{<block_content pos:start="78:5" pos:end="132:13">
    <expr_stmt pos:start="78:5" pos:end="78:37"><expr pos:start="78:5" pos:end="78:36"><call pos:start="78:5" pos:end="78:36"><name pos:start="78:5" pos:end="78:11">freopen</name><argument_list pos:start="78:12" pos:end="78:36">(<argument pos:start="78:13" pos:end="78:25"><expr pos:start="78:13" pos:end="78:25"><literal type="string" pos:start="78:13" pos:end="78:25">"treasure.in"</literal></expr></argument>,<argument pos:start="78:27" pos:end="78:29"><expr pos:start="78:27" pos:end="78:29"><literal type="string" pos:start="78:27" pos:end="78:29">"r"</literal></expr></argument>,<argument pos:start="78:31" pos:end="78:35"><expr pos:start="78:31" pos:end="78:35"><name pos:start="78:31" pos:end="78:35">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><call pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:11">freopen</name><argument_list pos:start="79:12" pos:end="79:38">(<argument pos:start="79:13" pos:end="79:26"><expr pos:start="79:13" pos:end="79:26"><literal type="string" pos:start="79:13" pos:end="79:26">"treasure.out"</literal></expr></argument>,<argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><literal type="string" pos:start="79:28" pos:end="79:30">"w"</literal></expr></argument>,<argument pos:start="79:32" pos:end="79:37"><expr pos:start="79:32" pos:end="79:37"><name pos:start="79:32" pos:end="79:37">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:27"><expr pos:start="80:5" pos:end="80:26"><call pos:start="80:5" pos:end="80:26"><name pos:start="80:5" pos:end="80:9">scanf</name><argument_list pos:start="80:10" pos:end="80:26">(<argument pos:start="80:11" pos:end="80:17"><expr pos:start="80:11" pos:end="80:17"><literal type="string" pos:start="80:11" pos:end="80:17">"%d %d"</literal></expr></argument>, <argument pos:start="80:20" pos:end="80:21"><expr pos:start="80:20" pos:end="80:21"><operator pos:start="80:20" pos:end="80:20">&amp;</operator><name pos:start="80:21" pos:end="80:21">n</name></expr></argument>, <argument pos:start="80:24" pos:end="80:25"><expr pos:start="80:24" pos:end="80:25"><operator pos:start="80:24" pos:end="80:24">&amp;</operator><name pos:start="80:25" pos:end="80:25">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="81:5" pos:end="81:14"><expr pos:start="81:5" pos:end="81:13"><call pos:start="81:5" pos:end="81:13"><name pos:start="81:5" pos:end="81:11">getchar</name><argument_list pos:start="81:12" pos:end="81:13">()</argument_list></call></expr>;</expr_stmt>
    <for pos:start="82:5" pos:end="95:5">for<control pos:start="82:8" pos:end="82:25">(<init pos:start="82:9" pos:end="82:16"><decl pos:start="82:9" pos:end="82:15"><type pos:start="82:9" pos:end="82:11"><name pos:start="82:9" pos:end="82:11">int</name></type> <name pos:start="82:13" pos:end="82:13">i</name><init pos:start="82:14" pos:end="82:15">=<expr pos:start="82:15" pos:end="82:15"><literal type="number" pos:start="82:15" pos:end="82:15">1</literal></expr></init></decl>;</init><condition pos:start="82:17" pos:end="82:21"><expr pos:start="82:17" pos:end="82:20"><name pos:start="82:17" pos:end="82:17">i</name><operator pos:start="82:18" pos:end="82:19">&lt;=</operator><name pos:start="82:20" pos:end="82:20">n</name></expr>;</condition><incr pos:start="82:22" pos:end="82:24"><expr pos:start="82:22" pos:end="82:24"><name pos:start="82:22" pos:end="82:22">i</name><operator pos:start="82:23" pos:end="82:24">++</operator></expr></incr>)</control><block pos:start="82:26" pos:end="95:5">{<block_content pos:start="83:9" pos:end="94:18">
        <for pos:start="83:9" pos:end="93:9">for<control pos:start="83:12" pos:end="83:29">(<init pos:start="83:13" pos:end="83:20"><decl pos:start="83:13" pos:end="83:19"><type pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">int</name></type> <name pos:start="83:17" pos:end="83:17">j</name><init pos:start="83:18" pos:end="83:19">=<expr pos:start="83:19" pos:end="83:19"><literal type="number" pos:start="83:19" pos:end="83:19">1</literal></expr></init></decl>;</init><condition pos:start="83:21" pos:end="83:25"><expr pos:start="83:21" pos:end="83:24"><name pos:start="83:21" pos:end="83:21">j</name><operator pos:start="83:22" pos:end="83:23">&lt;=</operator><name pos:start="83:24" pos:end="83:24">m</name></expr>;</condition><incr pos:start="83:26" pos:end="83:28"><expr pos:start="83:26" pos:end="83:28"><name pos:start="83:26" pos:end="83:26">j</name><operator pos:start="83:27" pos:end="83:28">++</operator></expr></incr>)</control><block pos:start="83:30" pos:end="93:9">{<block_content pos:start="84:13" pos:end="92:31">
            <expr_stmt pos:start="84:13" pos:end="84:39"><expr pos:start="84:13" pos:end="84:38"><name pos:start="84:13" pos:end="84:22"><name pos:start="84:13" pos:end="84:13">a</name><index pos:start="84:14" pos:end="84:22">[<expr pos:start="84:15" pos:end="84:21"><name pos:start="84:15" pos:end="84:15">i</name><operator pos:start="84:16" pos:end="84:16">*</operator><name pos:start="84:17" pos:end="84:17">m</name><operator pos:start="84:18" pos:end="84:18">+</operator><name pos:start="84:19" pos:end="84:19">j</name><operator pos:start="84:20" pos:end="84:20">-</operator><name pos:start="84:21" pos:end="84:21">m</name></expr>]</index></name><operator pos:start="84:23" pos:end="84:23">=</operator><operator pos:start="84:24" pos:end="84:24">(</operator><call pos:start="84:25" pos:end="84:33"><name pos:start="84:25" pos:end="84:31">getchar</name><argument_list pos:start="84:32" pos:end="84:33">()</argument_list></call><operator pos:start="84:34" pos:end="84:34">-</operator><literal type="char" pos:start="84:35" pos:end="84:37">'0'</literal><operator pos:start="84:38" pos:end="84:38">)</operator></expr>;</expr_stmt>
            <if_stmt pos:start="85:13" pos:end="92:31"><if pos:start="85:13" pos:end="87:13">if<condition pos:start="85:15" pos:end="85:46">(<expr pos:start="85:16" pos:end="85:45"><name pos:start="85:16" pos:end="85:25"><name pos:start="85:16" pos:end="85:16">a</name><index pos:start="85:17" pos:end="85:25">[<expr pos:start="85:18" pos:end="85:24"><name pos:start="85:18" pos:end="85:18">i</name><operator pos:start="85:19" pos:end="85:19">*</operator><name pos:start="85:20" pos:end="85:20">m</name><operator pos:start="85:21" pos:end="85:21">+</operator><name pos:start="85:22" pos:end="85:22">j</name><operator pos:start="85:23" pos:end="85:23">-</operator><name pos:start="85:24" pos:end="85:24">m</name></expr>]</index></name><operator pos:start="85:26" pos:end="85:27">&lt;=</operator><literal type="number" pos:start="85:28" pos:end="85:28">9</literal> <operator pos:start="85:30" pos:end="85:31">&amp;&amp;</operator> <name pos:start="85:33" pos:end="85:42"><name pos:start="85:33" pos:end="85:33">a</name><index pos:start="85:34" pos:end="85:42">[<expr pos:start="85:35" pos:end="85:41"><name pos:start="85:35" pos:end="85:35">i</name><operator pos:start="85:36" pos:end="85:36">*</operator><name pos:start="85:37" pos:end="85:37">m</name><operator pos:start="85:38" pos:end="85:38">+</operator><name pos:start="85:39" pos:end="85:39">j</name><operator pos:start="85:40" pos:end="85:40">-</operator><name pos:start="85:41" pos:end="85:41">m</name></expr>]</index></name><operator pos:start="85:43" pos:end="85:44">&gt;=</operator><literal type="number" pos:start="85:45" pos:end="85:45">1</literal></expr>)</condition><block pos:start="85:47" pos:end="87:13">{<block_content pos:start="86:17" pos:end="86:25">
                <continue pos:start="86:17" pos:end="86:25">continue;</continue>
            </block_content>}</block></if>
            <if type="elseif" pos:start="88:13" pos:end="91:13">else if<condition pos:start="88:20" pos:end="88:40">(<expr pos:start="88:21" pos:end="88:39"><name pos:start="88:21" pos:end="88:30"><name pos:start="88:21" pos:end="88:21">a</name><index pos:start="88:22" pos:end="88:30">[<expr pos:start="88:23" pos:end="88:29"><name pos:start="88:23" pos:end="88:23">i</name><operator pos:start="88:24" pos:end="88:24">*</operator><name pos:start="88:25" pos:end="88:25">m</name><operator pos:start="88:26" pos:end="88:26">+</operator><name pos:start="88:27" pos:end="88:27">j</name><operator pos:start="88:28" pos:end="88:28">-</operator><name pos:start="88:29" pos:end="88:29">m</name></expr>]</index></name><operator pos:start="88:31" pos:end="88:32">==</operator><literal type="char" pos:start="88:33" pos:end="88:35">'*'</literal><operator pos:start="88:36" pos:end="88:36">-</operator><literal type="char" pos:start="88:37" pos:end="88:39">'0'</literal></expr>)</condition><block pos:start="88:41" pos:end="91:13">{<block_content pos:start="89:17" pos:end="90:41">
                <expr_stmt pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:17">a</name><index pos:start="89:18" pos:end="89:26">[<expr pos:start="89:19" pos:end="89:25"><name pos:start="89:19" pos:end="89:19">i</name><operator pos:start="89:20" pos:end="89:20">*</operator><name pos:start="89:21" pos:end="89:21">m</name><operator pos:start="89:22" pos:end="89:22">+</operator><name pos:start="89:23" pos:end="89:23">j</name><operator pos:start="89:24" pos:end="89:24">-</operator><name pos:start="89:25" pos:end="89:25">m</name></expr>]</index></name><operator pos:start="89:27" pos:end="89:27">=</operator><literal type="number" pos:start="89:28" pos:end="89:28">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="90:17" pos:end="90:41"><expr pos:start="90:17" pos:end="90:40"><name pos:start="90:17" pos:end="90:32"><name pos:start="90:17" pos:end="90:25">chuansong</name><index pos:start="90:26" pos:end="90:32">[<expr pos:start="90:27" pos:end="90:31"><name pos:start="90:27" pos:end="90:29">pos</name><operator pos:start="90:30" pos:end="90:31">++</operator></expr>]</index></name><operator pos:start="90:33" pos:end="90:33">=</operator><name pos:start="90:34" pos:end="90:34">i</name><operator pos:start="90:35" pos:end="90:35">*</operator><name pos:start="90:36" pos:end="90:36">m</name><operator pos:start="90:37" pos:end="90:37">-</operator><name pos:start="90:38" pos:end="90:38">m</name><operator pos:start="90:39" pos:end="90:39">+</operator><name pos:start="90:40" pos:end="90:40">j</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="92:13" pos:end="92:31">else<block type="pseudo" pos:start="92:18" pos:end="92:31"><block_content pos:start="92:18" pos:end="92:31"> <expr_stmt pos:start="92:18" pos:end="92:31"><expr pos:start="92:18" pos:end="92:30"><name pos:start="92:18" pos:end="92:27"><name pos:start="92:18" pos:end="92:18">a</name><index pos:start="92:19" pos:end="92:27">[<expr pos:start="92:20" pos:end="92:26"><name pos:start="92:20" pos:end="92:20">i</name><operator pos:start="92:21" pos:end="92:21">*</operator><name pos:start="92:22" pos:end="92:22">m</name><operator pos:start="92:23" pos:end="92:23">-</operator><name pos:start="92:24" pos:end="92:24">m</name><operator pos:start="92:25" pos:end="92:25">+</operator><name pos:start="92:26" pos:end="92:26">j</name></expr>]</index></name><operator pos:start="92:28" pos:end="92:28">=</operator><operator pos:start="92:29" pos:end="92:29">-</operator><literal type="number" pos:start="92:30" pos:end="92:30">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="94:9" pos:end="94:18"><expr pos:start="94:9" pos:end="94:17"><call pos:start="94:9" pos:end="94:17"><name pos:start="94:9" pos:end="94:15">getchar</name><argument_list pos:start="94:16" pos:end="94:17">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="96:5" pos:end="105:5">for<control pos:start="96:8" pos:end="96:25">(<init pos:start="96:9" pos:end="96:16"><decl pos:start="96:9" pos:end="96:15"><type pos:start="96:9" pos:end="96:11"><name pos:start="96:9" pos:end="96:11">int</name></type> <name pos:start="96:13" pos:end="96:13">i</name><init pos:start="96:14" pos:end="96:15">=<expr pos:start="96:15" pos:end="96:15"><literal type="number" pos:start="96:15" pos:end="96:15">1</literal></expr></init></decl>;</init><condition pos:start="96:17" pos:end="96:21"><expr pos:start="96:17" pos:end="96:20"><name pos:start="96:17" pos:end="96:17">i</name><operator pos:start="96:18" pos:end="96:19">&lt;=</operator><name pos:start="96:20" pos:end="96:20">n</name></expr>;</condition><incr pos:start="96:22" pos:end="96:24"><expr pos:start="96:22" pos:end="96:24"><name pos:start="96:22" pos:end="96:22">i</name><operator pos:start="96:23" pos:end="96:24">++</operator></expr></incr>)</control><block pos:start="96:26" pos:end="105:5">{<block_content pos:start="97:9" pos:end="104:9">
        <for pos:start="97:9" pos:end="104:9">for<control pos:start="97:12" pos:end="97:29">(<init pos:start="97:13" pos:end="97:20"><decl pos:start="97:13" pos:end="97:19"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:17">j</name><init pos:start="97:18" pos:end="97:19">=<expr pos:start="97:19" pos:end="97:19"><literal type="number" pos:start="97:19" pos:end="97:19">1</literal></expr></init></decl>;</init><condition pos:start="97:21" pos:end="97:25"><expr pos:start="97:21" pos:end="97:24"><name pos:start="97:21" pos:end="97:21">j</name><operator pos:start="97:22" pos:end="97:23">&lt;=</operator><name pos:start="97:24" pos:end="97:24">m</name></expr>;</condition><incr pos:start="97:26" pos:end="97:28"><expr pos:start="97:26" pos:end="97:28"><name pos:start="97:26" pos:end="97:26">j</name><operator pos:start="97:27" pos:end="97:28">++</operator></expr></incr>)</control><block pos:start="97:30" pos:end="104:9">{<block_content pos:start="98:13" pos:end="103:13">
            <if_stmt pos:start="98:13" pos:end="100:13"><if pos:start="98:13" pos:end="100:13">if<condition pos:start="98:15" pos:end="98:60">(<expr pos:start="98:16" pos:end="98:59"><name pos:start="98:16" pos:end="98:25"><name pos:start="98:16" pos:end="98:16">a</name><index pos:start="98:17" pos:end="98:25">[<expr pos:start="98:18" pos:end="98:24"><name pos:start="98:18" pos:end="98:18">i</name><operator pos:start="98:19" pos:end="98:19">*</operator><name pos:start="98:20" pos:end="98:20">m</name><operator pos:start="98:21" pos:end="98:21">+</operator><name pos:start="98:22" pos:end="98:22">j</name><operator pos:start="98:23" pos:end="98:23">-</operator><name pos:start="98:24" pos:end="98:24">m</name></expr>]</index></name><operator pos:start="98:26" pos:end="98:27">!=</operator><operator pos:start="98:28" pos:end="98:28">-</operator><literal type="number" pos:start="98:29" pos:end="98:29">1</literal> <operator pos:start="98:31" pos:end="98:32">&amp;&amp;</operator> <name pos:start="98:34" pos:end="98:45"><name pos:start="98:34" pos:end="98:34">a</name><index pos:start="98:35" pos:end="98:45">[<expr pos:start="98:36" pos:end="98:44"><name pos:start="98:36" pos:end="98:36">i</name><operator pos:start="98:37" pos:end="98:37">*</operator><name pos:start="98:38" pos:end="98:38">m</name><operator pos:start="98:39" pos:end="98:39">-</operator><name pos:start="98:40" pos:end="98:40">m</name><operator pos:start="98:41" pos:end="98:41">+</operator><name pos:start="98:42" pos:end="98:42">j</name><operator pos:start="98:43" pos:end="98:43">+</operator><literal type="number" pos:start="98:44" pos:end="98:44">1</literal></expr>]</index></name><operator pos:start="98:46" pos:end="98:47">!=</operator><operator pos:start="98:48" pos:end="98:48">-</operator><literal type="number" pos:start="98:49" pos:end="98:49">1</literal> <operator pos:start="98:51" pos:end="98:52">&amp;&amp;</operator> <name pos:start="98:54" pos:end="98:54">j</name><operator pos:start="98:55" pos:end="98:55">+</operator><literal type="number" pos:start="98:56" pos:end="98:56">1</literal><operator pos:start="98:57" pos:end="98:58">&lt;=</operator><name pos:start="98:59" pos:end="98:59">m</name></expr>)</condition><block pos:start="98:61" pos:end="100:13">{<block_content pos:start="99:17" pos:end="99:43">
                <expr_stmt pos:start="99:17" pos:end="99:43"><expr pos:start="99:17" pos:end="99:42"><call pos:start="99:17" pos:end="99:42"><name pos:start="99:17" pos:end="99:23">addEdge</name><argument_list pos:start="99:24" pos:end="99:42">(<argument pos:start="99:25" pos:end="99:31"><expr pos:start="99:25" pos:end="99:31"><name pos:start="99:25" pos:end="99:25">i</name><operator pos:start="99:26" pos:end="99:26">*</operator><name pos:start="99:27" pos:end="99:27">m</name><operator pos:start="99:28" pos:end="99:28">-</operator><name pos:start="99:29" pos:end="99:29">m</name><operator pos:start="99:30" pos:end="99:30">+</operator><name pos:start="99:31" pos:end="99:31">j</name></expr></argument>,<argument pos:start="99:33" pos:end="99:41"><expr pos:start="99:33" pos:end="99:41"><name pos:start="99:33" pos:end="99:33">i</name><operator pos:start="99:34" pos:end="99:34">*</operator><name pos:start="99:35" pos:end="99:35">m</name><operator pos:start="99:36" pos:end="99:36">-</operator><name pos:start="99:37" pos:end="99:37">m</name><operator pos:start="99:38" pos:end="99:38">+</operator><name pos:start="99:39" pos:end="99:39">j</name><operator pos:start="99:40" pos:end="99:40">+</operator><literal type="number" pos:start="99:41" pos:end="99:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="101:13" pos:end="103:13"><if pos:start="101:13" pos:end="103:13">if<condition pos:start="101:15" pos:end="101:56">(<expr pos:start="101:16" pos:end="101:55"><name pos:start="101:16" pos:end="101:25"><name pos:start="101:16" pos:end="101:16">a</name><index pos:start="101:17" pos:end="101:25">[<expr pos:start="101:18" pos:end="101:24"><name pos:start="101:18" pos:end="101:18">i</name><operator pos:start="101:19" pos:end="101:19">*</operator><name pos:start="101:20" pos:end="101:20">m</name><operator pos:start="101:21" pos:end="101:21">+</operator><name pos:start="101:22" pos:end="101:22">j</name><operator pos:start="101:23" pos:end="101:23">-</operator><name pos:start="101:24" pos:end="101:24">m</name></expr>]</index></name><operator pos:start="101:26" pos:end="101:27">!=</operator><operator pos:start="101:28" pos:end="101:28">-</operator><literal type="number" pos:start="101:29" pos:end="101:29">1</literal> <operator pos:start="101:31" pos:end="101:32">&amp;&amp;</operator> <name pos:start="101:34" pos:end="101:41"><name pos:start="101:34" pos:end="101:34">a</name><index pos:start="101:35" pos:end="101:41">[<expr pos:start="101:36" pos:end="101:40"><name pos:start="101:36" pos:end="101:36">i</name><operator pos:start="101:37" pos:end="101:37">*</operator><name pos:start="101:38" pos:end="101:38">m</name><operator pos:start="101:39" pos:end="101:39">+</operator><name pos:start="101:40" pos:end="101:40">j</name></expr>]</index></name><operator pos:start="101:42" pos:end="101:43">!=</operator><operator pos:start="101:44" pos:end="101:44">-</operator><literal type="number" pos:start="101:45" pos:end="101:45">1</literal> <operator pos:start="101:47" pos:end="101:48">&amp;&amp;</operator> <name pos:start="101:50" pos:end="101:50">i</name><operator pos:start="101:51" pos:end="101:51">+</operator><literal type="number" pos:start="101:52" pos:end="101:52">1</literal><operator pos:start="101:53" pos:end="101:54">&lt;=</operator><name pos:start="101:55" pos:end="101:55">n</name></expr>)</condition><block pos:start="101:57" pos:end="103:13">{<block_content pos:start="102:17" pos:end="102:39">
                <expr_stmt pos:start="102:17" pos:end="102:39"><expr pos:start="102:17" pos:end="102:38"><call pos:start="102:17" pos:end="102:38"><name pos:start="102:17" pos:end="102:23">addEdge</name><argument_list pos:start="102:24" pos:end="102:38">(<argument pos:start="102:25" pos:end="102:31"><expr pos:start="102:25" pos:end="102:31"><name pos:start="102:25" pos:end="102:25">i</name><operator pos:start="102:26" pos:end="102:26">*</operator><name pos:start="102:27" pos:end="102:27">m</name><operator pos:start="102:28" pos:end="102:28">+</operator><name pos:start="102:29" pos:end="102:29">j</name><operator pos:start="102:30" pos:end="102:30">-</operator><name pos:start="102:31" pos:end="102:31">m</name></expr></argument>,<argument pos:start="102:33" pos:end="102:37"><expr pos:start="102:33" pos:end="102:37"><name pos:start="102:33" pos:end="102:33">i</name><operator pos:start="102:34" pos:end="102:34">*</operator><name pos:start="102:35" pos:end="102:35">m</name><operator pos:start="102:36" pos:end="102:36">+</operator><name pos:start="102:37" pos:end="102:37">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <for pos:start="106:5" pos:end="112:5">for<control pos:start="106:8" pos:end="106:26">(<init pos:start="106:9" pos:end="106:16"><decl pos:start="106:9" pos:end="106:15"><type pos:start="106:9" pos:end="106:11"><name pos:start="106:9" pos:end="106:11">int</name></type> <name pos:start="106:13" pos:end="106:13">i</name><init pos:start="106:14" pos:end="106:15">=<expr pos:start="106:15" pos:end="106:15"><literal type="number" pos:start="106:15" pos:end="106:15">0</literal></expr></init></decl>;</init><condition pos:start="106:17" pos:end="106:22"><expr pos:start="106:17" pos:end="106:21"><name pos:start="106:17" pos:end="106:17">i</name><operator pos:start="106:18" pos:end="106:18">&lt;</operator><name pos:start="106:19" pos:end="106:21">pos</name></expr>;</condition><incr pos:start="106:23" pos:end="106:25"><expr pos:start="106:23" pos:end="106:25"><name pos:start="106:23" pos:end="106:23">i</name><operator pos:start="106:24" pos:end="106:25">++</operator></expr></incr>)</control><block pos:start="106:27" pos:end="112:5">{<block_content pos:start="107:9" pos:end="111:56">
        <decl_stmt pos:start="107:9" pos:end="107:16"><decl pos:start="107:9" pos:end="107:13"><type pos:start="107:9" pos:end="107:11"><name pos:start="107:9" pos:end="107:11">int</name></type> <name pos:start="107:13" pos:end="107:13">x</name></decl>,<decl pos:start="107:15" pos:end="107:15"><type ref="prev" pos:start="107:9" pos:end="107:11"/><name pos:start="107:15" pos:end="107:15">y</name></decl>;</decl_stmt>
        <expr_stmt pos:start="108:9" pos:end="108:29"><expr pos:start="108:9" pos:end="108:28"><call pos:start="108:9" pos:end="108:28"><name pos:start="108:9" pos:end="108:13">scanf</name><argument_list pos:start="108:14" pos:end="108:28">(<argument pos:start="108:15" pos:end="108:21"><expr pos:start="108:15" pos:end="108:21"><literal type="string" pos:start="108:15" pos:end="108:21">"%d %d"</literal></expr></argument>,<argument pos:start="108:23" pos:end="108:24"><expr pos:start="108:23" pos:end="108:24"><operator pos:start="108:23" pos:end="108:23">&amp;</operator><name pos:start="108:24" pos:end="108:24">x</name></expr></argument>,<argument pos:start="108:26" pos:end="108:27"><expr pos:start="108:26" pos:end="108:27"><operator pos:start="108:26" pos:end="108:26">&amp;</operator><name pos:start="108:27" pos:end="108:27">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="109:9" pos:end="109:12"><expr pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:9">x</name><operator pos:start="109:10" pos:end="109:11">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:12"><expr pos:start="110:9" pos:end="110:11"><name pos:start="110:9" pos:end="110:9">y</name><operator pos:start="110:10" pos:end="110:11">++</operator></expr>;</expr_stmt>
        <if_stmt pos:start="111:9" pos:end="111:56"><if pos:start="111:9" pos:end="111:56">if<condition pos:start="111:11" pos:end="111:26">(<expr pos:start="111:12" pos:end="111:25"><name pos:start="111:12" pos:end="111:21"><name pos:start="111:12" pos:end="111:12">a</name><index pos:start="111:13" pos:end="111:21">[<expr pos:start="111:14" pos:end="111:20"><name pos:start="111:14" pos:end="111:14">x</name><operator pos:start="111:15" pos:end="111:15">*</operator><name pos:start="111:16" pos:end="111:16">m</name><operator pos:start="111:17" pos:end="111:17">+</operator><name pos:start="111:18" pos:end="111:18">y</name><operator pos:start="111:19" pos:end="111:19">-</operator><name pos:start="111:20" pos:end="111:20">m</name></expr>]</index></name><operator pos:start="111:22" pos:end="111:23">!=</operator><operator pos:start="111:24" pos:end="111:24">-</operator><literal type="number" pos:start="111:25" pos:end="111:25">1</literal></expr>)</condition><block type="pseudo" pos:start="111:27" pos:end="111:56"><block_content pos:start="111:27" pos:end="111:56"><expr_stmt pos:start="111:27" pos:end="111:56"><expr pos:start="111:27" pos:end="111:55"><call pos:start="111:27" pos:end="111:55"><name pos:start="111:27" pos:end="111:33">addEdge</name><argument_list pos:start="111:34" pos:end="111:55">(<argument pos:start="111:35" pos:end="111:46"><expr pos:start="111:35" pos:end="111:46"><name pos:start="111:35" pos:end="111:46"><name pos:start="111:35" pos:end="111:43">chuansong</name><index pos:start="111:44" pos:end="111:46">[<expr pos:start="111:45" pos:end="111:45"><name pos:start="111:45" pos:end="111:45">i</name></expr>]</index></name></expr></argument>,<argument pos:start="111:48" pos:end="111:54"><expr pos:start="111:48" pos:end="111:54"><name pos:start="111:48" pos:end="111:48">x</name><operator pos:start="111:49" pos:end="111:49">*</operator><name pos:start="111:50" pos:end="111:50">m</name><operator pos:start="111:51" pos:end="111:51">+</operator><name pos:start="111:52" pos:end="111:52">y</name><operator pos:start="111:53" pos:end="111:53">-</operator><name pos:start="111:54" pos:end="111:54">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
    <for pos:start="114:5" pos:end="118:5">for<control pos:start="114:8" pos:end="114:27">(<init pos:start="114:9" pos:end="114:16"><decl pos:start="114:9" pos:end="114:15"><type pos:start="114:9" pos:end="114:11"><name pos:start="114:9" pos:end="114:11">int</name></type> <name pos:start="114:13" pos:end="114:13">i</name><init pos:start="114:14" pos:end="114:15">=<expr pos:start="114:15" pos:end="114:15"><literal type="number" pos:start="114:15" pos:end="114:15">1</literal></expr></init></decl>;</init><condition pos:start="114:17" pos:end="114:23"><expr pos:start="114:17" pos:end="114:22"><name pos:start="114:17" pos:end="114:17">i</name><operator pos:start="114:18" pos:end="114:19">&lt;=</operator><name pos:start="114:20" pos:end="114:20">n</name><operator pos:start="114:21" pos:end="114:21">*</operator><name pos:start="114:22" pos:end="114:22">m</name></expr>;</condition><incr pos:start="114:24" pos:end="114:26"><expr pos:start="114:24" pos:end="114:26"><name pos:start="114:24" pos:end="114:24">i</name><operator pos:start="114:25" pos:end="114:26">++</operator></expr></incr>)</control><block pos:start="114:28" pos:end="118:5">{<block_content pos:start="115:9" pos:end="117:9">
        <if_stmt pos:start="115:9" pos:end="117:9"><if pos:start="115:9" pos:end="117:9">if<condition pos:start="115:11" pos:end="115:21">(<expr pos:start="115:12" pos:end="115:20"><name pos:start="115:12" pos:end="115:17"><name pos:start="115:12" pos:end="115:14">dfn</name><index pos:start="115:15" pos:end="115:17">[<expr pos:start="115:16" pos:end="115:16"><name pos:start="115:16" pos:end="115:16">i</name></expr>]</index></name><operator pos:start="115:18" pos:end="115:19">==</operator><literal type="number" pos:start="115:20" pos:end="115:20">0</literal></expr>)</condition><block pos:start="115:22" pos:end="117:9">{<block_content pos:start="116:13" pos:end="116:22">
            <expr_stmt pos:start="116:13" pos:end="116:22"><expr pos:start="116:13" pos:end="116:21"><call pos:start="116:13" pos:end="116:21"><name pos:start="116:13" pos:end="116:18">tarjan</name><argument_list pos:start="116:19" pos:end="116:21">(<argument pos:start="116:20" pos:end="116:20"><expr pos:start="116:20" pos:end="116:20"><name pos:start="116:20" pos:end="116:20">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for pos:start="119:5" pos:end="126:5">for<control pos:start="119:8" pos:end="119:27">(<init pos:start="119:9" pos:end="119:16"><decl pos:start="119:9" pos:end="119:15"><type pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">int</name></type> <name pos:start="119:13" pos:end="119:13">u</name><init pos:start="119:14" pos:end="119:15">=<expr pos:start="119:15" pos:end="119:15"><literal type="number" pos:start="119:15" pos:end="119:15">1</literal></expr></init></decl>;</init><condition pos:start="119:17" pos:end="119:23"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:17">u</name><operator pos:start="119:18" pos:end="119:19">&lt;=</operator><name pos:start="119:20" pos:end="119:20">n</name><operator pos:start="119:21" pos:end="119:21">*</operator><name pos:start="119:22" pos:end="119:22">m</name></expr>;</condition><incr pos:start="119:24" pos:end="119:26"><expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:24">u</name><operator pos:start="119:25" pos:end="119:26">++</operator></expr></incr>)</control><block pos:start="119:28" pos:end="126:5">{<block_content pos:start="120:9" pos:end="125:9">
        <for pos:start="120:9" pos:end="125:9">for<control pos:start="120:12" pos:end="120:40">(<init pos:start="120:13" pos:end="120:26"><decl pos:start="120:13" pos:end="120:25"><type pos:start="120:13" pos:end="120:15"><name pos:start="120:13" pos:end="120:15">int</name></type> <name pos:start="120:17" pos:end="120:17">i</name><init pos:start="120:18" pos:end="120:25">=<expr pos:start="120:19" pos:end="120:25"><name pos:start="120:19" pos:end="120:25"><name pos:start="120:19" pos:end="120:22">head</name><index pos:start="120:23" pos:end="120:25">[<expr pos:start="120:24" pos:end="120:24"><name pos:start="120:24" pos:end="120:24">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="120:27" pos:end="120:28"><expr pos:start="120:27" pos:end="120:27"><name pos:start="120:27" pos:end="120:27">i</name></expr>;</condition><incr pos:start="120:29" pos:end="120:39"><expr pos:start="120:29" pos:end="120:39"><name pos:start="120:29" pos:end="120:29">i</name><operator pos:start="120:30" pos:end="120:30">=</operator><name pos:start="120:31" pos:end="120:34"><name pos:start="120:31" pos:end="120:31">e</name><index pos:start="120:32" pos:end="120:34">[<expr pos:start="120:33" pos:end="120:33"><name pos:start="120:33" pos:end="120:33">i</name></expr>]</index></name><operator pos:start="120:35" pos:end="120:35">.</operator><name pos:start="120:36" pos:end="120:39">next</name></expr></incr>)</control><block pos:start="120:41" pos:end="125:9">{<block_content pos:start="121:13" pos:end="124:13">
            <decl_stmt pos:start="121:13" pos:end="121:26"><decl pos:start="121:13" pos:end="121:25"><type pos:start="121:13" pos:end="121:15"><name pos:start="121:13" pos:end="121:15">int</name></type> <name pos:start="121:17" pos:end="121:17">v</name><init pos:start="121:18" pos:end="121:25">=<expr pos:start="121:19" pos:end="121:25"><name pos:start="121:19" pos:end="121:22"><name pos:start="121:19" pos:end="121:19">e</name><index pos:start="121:20" pos:end="121:22">[<expr pos:start="121:21" pos:end="121:21"><name pos:start="121:21" pos:end="121:21">i</name></expr>]</index></name><operator pos:start="121:23" pos:end="121:23">.</operator><name pos:start="121:24" pos:end="121:25">to</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="122:13" pos:end="124:13"><if pos:start="122:13" pos:end="124:13">if<condition pos:start="122:15" pos:end="122:34">(<expr pos:start="122:16" pos:end="122:33"><name pos:start="122:16" pos:end="122:23"><name pos:start="122:16" pos:end="122:20">sccno</name><index pos:start="122:21" pos:end="122:23">[<expr pos:start="122:22" pos:end="122:22"><name pos:start="122:22" pos:end="122:22">u</name></expr>]</index></name><operator pos:start="122:24" pos:end="122:25">!=</operator><name pos:start="122:26" pos:end="122:33"><name pos:start="122:26" pos:end="122:30">sccno</name><index pos:start="122:31" pos:end="122:33">[<expr pos:start="122:32" pos:end="122:32"><name pos:start="122:32" pos:end="122:32">v</name></expr>]</index></name></expr>)</condition><block pos:start="122:35" pos:end="124:13">{<block_content pos:start="123:17" pos:end="123:46">
                <expr_stmt pos:start="123:17" pos:end="123:46"><expr pos:start="123:17" pos:end="123:45"><call pos:start="123:17" pos:end="123:45"><name pos:start="123:17" pos:end="123:26">addNewEdge</name><argument_list pos:start="123:27" pos:end="123:45">(<argument pos:start="123:28" pos:end="123:35"><expr pos:start="123:28" pos:end="123:35"><name pos:start="123:28" pos:end="123:35"><name pos:start="123:28" pos:end="123:32">sccno</name><index pos:start="123:33" pos:end="123:35">[<expr pos:start="123:34" pos:end="123:34"><name pos:start="123:34" pos:end="123:34">v</name></expr>]</index></name></expr></argument>,<argument pos:start="123:37" pos:end="123:44"><expr pos:start="123:37" pos:end="123:44"><name pos:start="123:37" pos:end="123:44"><name pos:start="123:37" pos:end="123:41">sccno</name><index pos:start="123:42" pos:end="123:44">[<expr pos:start="123:43" pos:end="123:43"><name pos:start="123:43" pos:end="123:43">u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <for pos:start="127:5" pos:end="130:36">for<control pos:start="127:8" pos:end="127:31">(<init pos:start="127:9" pos:end="127:16"><decl pos:start="127:9" pos:end="127:15"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:13">i</name><init pos:start="127:14" pos:end="127:15">=<expr pos:start="127:15" pos:end="127:15"><literal type="number" pos:start="127:15" pos:end="127:15">1</literal></expr></init></decl>;</init><condition pos:start="127:17" pos:end="127:27"><expr pos:start="127:17" pos:end="127:26"><name pos:start="127:17" pos:end="127:17">i</name><operator pos:start="127:18" pos:end="127:19">&lt;=</operator><name pos:start="127:20" pos:end="127:26">scc_cnt</name></expr>;</condition><incr pos:start="127:28" pos:end="127:30"><expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:28">i</name><operator pos:start="127:29" pos:end="127:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="128:9" pos:end="130:36"><block_content pos:start="128:9" pos:end="130:36">
        <if_stmt pos:start="128:9" pos:end="130:36"><if pos:start="128:9" pos:end="130:36">if<condition pos:start="128:11" pos:end="128:27">(<expr pos:start="128:12" pos:end="128:26"><name pos:start="128:12" pos:end="128:17"><name pos:start="128:12" pos:end="128:14">scc</name><index pos:start="128:15" pos:end="128:17">[<expr pos:start="128:16" pos:end="128:16"><name pos:start="128:16" pos:end="128:16">i</name></expr>]</index></name><operator pos:start="128:18" pos:end="128:18">.</operator><call pos:start="128:19" pos:end="128:24"><name pos:start="128:19" pos:end="128:22">size</name><argument_list pos:start="128:23" pos:end="128:24">()</argument_list></call><operator pos:start="128:25" pos:end="128:25">&gt;</operator><literal type="number" pos:start="128:26" pos:end="128:26">0</literal></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="130:36"><block_content pos:start="129:13" pos:end="130:36">
            <if_stmt pos:start="129:13" pos:end="130:36"><if pos:start="129:13" pos:end="130:36">if<condition pos:start="129:15" pos:end="129:32">(<expr pos:start="129:16" pos:end="129:31"><name pos:start="129:16" pos:end="129:27"><name pos:start="129:16" pos:end="129:16">a</name><index pos:start="129:17" pos:end="129:27">[<expr pos:start="129:18" pos:end="129:26"><name pos:start="129:18" pos:end="129:26"><name pos:start="129:18" pos:end="129:20">scc</name><index pos:start="129:21" pos:end="129:23">[<expr pos:start="129:22" pos:end="129:22"><name pos:start="129:22" pos:end="129:22">i</name></expr>]</index><index pos:start="129:24" pos:end="129:26">[<expr pos:start="129:25" pos:end="129:25"><literal type="number" pos:start="129:25" pos:end="129:25">0</literal></expr>]</index></name></expr>]</index></name><operator pos:start="129:28" pos:end="129:29">!=</operator><operator pos:start="129:30" pos:end="129:30">-</operator><literal type="number" pos:start="129:31" pos:end="129:31">1</literal></expr>)</condition><block type="pseudo" pos:start="130:17" pos:end="130:36"><block_content pos:start="130:17" pos:end="130:36">
                <expr_stmt pos:start="130:17" pos:end="130:36"><expr pos:start="130:17" pos:end="130:35"><name pos:start="130:17" pos:end="130:19">ans</name><operator pos:start="130:20" pos:end="130:20">=</operator><call pos:start="130:21" pos:end="130:35"><name pos:start="130:21" pos:end="130:23">max</name><argument_list pos:start="130:24" pos:end="130:35">(<argument pos:start="130:25" pos:end="130:27"><expr pos:start="130:25" pos:end="130:27"><name pos:start="130:25" pos:end="130:27">ans</name></expr></argument>,<argument pos:start="130:29" pos:end="130:34"><expr pos:start="130:29" pos:end="130:34"><call pos:start="130:29" pos:end="130:34"><name pos:start="130:29" pos:end="130:31">dfs</name><argument_list pos:start="130:32" pos:end="130:34">(<argument pos:start="130:33" pos:end="130:33"><expr pos:start="130:33" pos:end="130:33"><name pos:start="130:33" pos:end="130:33">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt pos:start="131:5" pos:end="131:24"><expr pos:start="131:5" pos:end="131:23"><name pos:start="131:5" pos:end="131:8">cout</name> <operator pos:start="131:10" pos:end="131:11">&lt;&lt;</operator> <name pos:start="131:13" pos:end="131:15">ans</name> <operator pos:start="131:17" pos:end="131:18">&lt;&lt;</operator> <name pos:start="131:20" pos:end="131:23">endl</name></expr>;</expr_stmt>
    <return pos:start="132:5" pos:end="132:13">return <expr pos:start="132:12" pos:end="132:12"><literal type="number" pos:start="132:12" pos:end="132:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
