<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/999/999.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:17">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:17">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:20">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define pos:start="3:1" pos:end="3:51">#<cpp:directive pos:start="3:2" pos:end="3:7">define</cpp:directive> <cpp:macro pos:start="3:9" pos:end="3:15"><name pos:start="3:9" pos:end="3:15">BFSNEXT</name></cpp:macro> <cpp:value pos:start="3:17" pos:end="3:51">now.score+map[now.x,now.y],now.from</cpp:value></cpp:define>
<using pos:start="4:1" pos:end="4:20">using <namespace pos:start="4:7" pos:end="4:20">namespace <name pos:start="4:17" pos:end="4:19">std</name>;</namespace></using>

<decl_stmt pos:start="6:1" pos:end="6:21"><decl pos:start="6:1" pos:end="6:5"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:5">n</name></decl>, <decl pos:start="6:8" pos:end="6:8"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:8" pos:end="6:8">m</name></decl>, <decl pos:start="6:11" pos:end="6:11"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:11" pos:end="6:11">x</name></decl>, <decl pos:start="6:14" pos:end="6:14"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:14" pos:end="6:14">y</name></decl>, <decl pos:start="6:17" pos:end="6:17"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:17" pos:end="6:17">v</name></decl>, <decl pos:start="6:20" pos:end="6:20"><type ref="prev" pos:start="6:1" pos:end="6:3"/><name pos:start="6:20" pos:end="6:20">c</name></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:20"><decl pos:start="7:1" pos:end="7:19"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:7">map</name><index pos:start="7:8" pos:end="7:13">[<expr pos:start="7:9" pos:end="7:12"><literal type="number" pos:start="7:9" pos:end="7:12">1010</literal></expr>]</index><index pos:start="7:14" pos:end="7:19">[<expr pos:start="7:15" pos:end="7:18"><literal type="number" pos:start="7:15" pos:end="7:18">1010</literal></expr>]</index></name></decl>;</decl_stmt>
<struct pos:start="8:1" pos:end="18:2">struct <name pos:start="8:8" pos:end="8:12">queue</name>
<block pos:start="9:1" pos:end="18:1">{<public type="default" pos:start="10:3" pos:end="17:3">
  <decl_stmt pos:start="10:3" pos:end="10:11"><decl pos:start="10:3" pos:end="10:7"><type pos:start="10:3" pos:end="10:5"><name pos:start="10:3" pos:end="10:5">int</name></type> <name pos:start="10:7" pos:end="10:7">x</name></decl>, <decl pos:start="10:10" pos:end="10:10"><type ref="prev" pos:start="10:3" pos:end="10:5"/><name pos:start="10:10" pos:end="10:10">y</name></decl>;</decl_stmt>
  <decl_stmt pos:start="11:3" pos:end="11:12"><decl pos:start="11:3" pos:end="11:11"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type> <name pos:start="11:7" pos:end="11:11">score</name></decl>;</decl_stmt>
  <decl_stmt pos:start="12:3" pos:end="12:11"><decl pos:start="12:3" pos:end="12:10"><type pos:start="12:3" pos:end="12:5"><name pos:start="12:3" pos:end="12:5">int</name></type> <name pos:start="12:7" pos:end="12:10">from</name></decl>;</decl_stmt>
  
  <function pos:start="14:3" pos:end="17:3"><type pos:start="14:3" pos:end="14:6"><name pos:start="14:3" pos:end="14:6">void</name></type> <name pos:start="14:8" pos:end="14:11">init</name><parameter_list pos:start="14:12" pos:end="14:74">(<parameter pos:start="14:13" pos:end="14:24"><decl pos:start="14:13" pos:end="14:24"><type pos:start="14:13" pos:end="14:24"><specifier pos:start="14:13" pos:end="14:17">const</specifier> <name pos:start="14:19" pos:end="14:21">int</name></type> <name pos:start="14:23" pos:end="14:24">_x</name></decl></parameter>, <parameter pos:start="14:27" pos:end="14:38"><decl pos:start="14:27" pos:end="14:38"><type pos:start="14:27" pos:end="14:38"><specifier pos:start="14:27" pos:end="14:31">const</specifier> <name pos:start="14:33" pos:end="14:35">int</name></type> <name pos:start="14:37" pos:end="14:38">_y</name></decl></parameter>, <parameter pos:start="14:41" pos:end="14:56"><decl pos:start="14:41" pos:end="14:56"><type pos:start="14:41" pos:end="14:56"><specifier pos:start="14:41" pos:end="14:45">const</specifier> <name pos:start="14:47" pos:end="14:49">int</name></type> <name pos:start="14:51" pos:end="14:56">_score</name></decl></parameter>, <parameter pos:start="14:59" pos:end="14:73"><decl pos:start="14:59" pos:end="14:73"><type pos:start="14:59" pos:end="14:73"><specifier pos:start="14:59" pos:end="14:63">const</specifier> <name pos:start="14:65" pos:end="14:67">int</name></type> <name pos:start="14:69" pos:end="14:73">_from</name></decl></parameter>)</parameter_list>
  <block pos:start="15:3" pos:end="17:3">{<block_content pos:start="16:5" pos:end="16:49">
    <expr_stmt pos:start="16:5" pos:end="16:49"><expr pos:start="16:5" pos:end="16:10"><name pos:start="16:5" pos:end="16:5">x</name> <operator pos:start="16:7" pos:end="16:7">=</operator> <name pos:start="16:9" pos:end="16:10">_x</name></expr><operator pos:start="16:11" pos:end="16:11">,</operator> <expr pos:start="16:13" pos:end="16:18"><name pos:start="16:13" pos:end="16:13">y</name> <operator pos:start="16:15" pos:end="16:15">=</operator> <name pos:start="16:17" pos:end="16:18">_y</name></expr><operator pos:start="16:19" pos:end="16:19">,</operator> <expr pos:start="16:21" pos:end="16:34"><name pos:start="16:21" pos:end="16:25">score</name> <operator pos:start="16:27" pos:end="16:27">=</operator> <name pos:start="16:29" pos:end="16:34">_score</name></expr><operator pos:start="16:35" pos:end="16:35">,</operator> <expr pos:start="16:37" pos:end="16:48"><name pos:start="16:37" pos:end="16:40">from</name> <operator pos:start="16:42" pos:end="16:42">=</operator> <name pos:start="16:44" pos:end="16:48">_from</name></expr>;</expr_stmt>
  </block_content>}</block></function>
</public>}</block>;</struct>
<decl_stmt pos:start="19:1" pos:end="19:16"><decl pos:start="19:1" pos:end="19:15"><type pos:start="19:1" pos:end="19:5"><name pos:start="19:1" pos:end="19:5">queue</name></type> <name pos:start="19:7" pos:end="19:15"><name pos:start="19:7" pos:end="19:7">q</name> <index pos:start="19:9" pos:end="19:15">[<expr pos:start="19:10" pos:end="19:14"><literal type="number" pos:start="19:10" pos:end="19:14">10101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="20:1" pos:end="20:17"><decl pos:start="20:1" pos:end="20:9"><type pos:start="20:1" pos:end="20:3"><name pos:start="20:1" pos:end="20:3">int</name></type> <name pos:start="20:5" pos:end="20:5">l</name> <init pos:start="20:7" pos:end="20:9">= <expr pos:start="20:9" pos:end="20:9"><literal type="number" pos:start="20:9" pos:end="20:9">0</literal></expr></init></decl>, <decl pos:start="20:12" pos:end="20:16"><type ref="prev" pos:start="20:1" pos:end="20:3"/><name pos:start="20:12" pos:end="20:12">r</name> <init pos:start="20:14" pos:end="20:16">= <expr pos:start="20:16" pos:end="20:16"><literal type="number" pos:start="20:16" pos:end="20:16">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="21:1" pos:end="21:13"><decl pos:start="21:1" pos:end="21:12"><type pos:start="21:1" pos:end="21:3"><name pos:start="21:1" pos:end="21:3">int</name></type> <name pos:start="21:5" pos:end="21:7">ans</name> <init pos:start="21:9" pos:end="21:12">= <expr pos:start="21:11" pos:end="21:12"><operator pos:start="21:11" pos:end="21:11">-</operator><literal type="number" pos:start="21:12" pos:end="21:12">1</literal></expr></init></decl>;</decl_stmt>

<function pos:start="23:1" pos:end="85:1"><type pos:start="23:1" pos:end="23:3"><name pos:start="23:1" pos:end="23:3">int</name></type> <name pos:start="23:5" pos:end="23:8">main</name> <parameter_list pos:start="23:10" pos:end="23:11">()</parameter_list>
<block pos:start="24:1" pos:end="85:1">{<block_content pos:start="25:3" pos:end="84:11">
  <expr_stmt pos:start="25:3" pos:end="25:36"><expr pos:start="25:3" pos:end="25:35"><call pos:start="25:3" pos:end="25:35"><name pos:start="25:3" pos:end="25:9">freopen</name> <argument_list pos:start="25:11" pos:end="25:35">(<argument pos:start="25:12" pos:end="25:22"><expr pos:start="25:12" pos:end="25:22"><literal type="string" pos:start="25:12" pos:end="25:22">"escape.in"</literal></expr></argument>, <argument pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><literal type="string" pos:start="25:25" pos:end="25:27">"r"</literal></expr></argument>, <argument pos:start="25:30" pos:end="25:34"><expr pos:start="25:30" pos:end="25:34"><name pos:start="25:30" pos:end="25:34">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt pos:start="26:3" pos:end="26:38"><expr pos:start="26:3" pos:end="26:37"><call pos:start="26:3" pos:end="26:37"><name pos:start="26:3" pos:end="26:9">freopen</name> <argument_list pos:start="26:11" pos:end="26:37">(<argument pos:start="26:12" pos:end="26:23"><expr pos:start="26:12" pos:end="26:23"><literal type="string" pos:start="26:12" pos:end="26:23">"escape.out"</literal></expr></argument>, <argument pos:start="26:26" pos:end="26:28"><expr pos:start="26:26" pos:end="26:28"><literal type="string" pos:start="26:26" pos:end="26:28">"w"</literal></expr></argument>, <argument pos:start="26:31" pos:end="26:36"><expr pos:start="26:31" pos:end="26:36"><name pos:start="26:31" pos:end="26:36">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt pos:start="27:3" pos:end="27:48"><expr pos:start="27:3" pos:end="27:47"><call pos:start="27:3" pos:end="27:47"><name pos:start="27:3" pos:end="27:7">scanf</name><argument_list pos:start="27:8" pos:end="27:47">(<argument pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:22"><literal type="string" pos:start="27:9" pos:end="27:22">"%d%d%d%d%d%d"</literal></expr></argument>, <argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:26">n</name></expr></argument>, <argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:30">m</name></expr></argument>, <argument pos:start="27:33" pos:end="27:34"><expr pos:start="27:33" pos:end="27:34"><operator pos:start="27:33" pos:end="27:33">&amp;</operator><name pos:start="27:34" pos:end="27:34">x</name></expr></argument>, <argument pos:start="27:37" pos:end="27:38"><expr pos:start="27:37" pos:end="27:38"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:38">y</name></expr></argument>, <argument pos:start="27:41" pos:end="27:42"><expr pos:start="27:41" pos:end="27:42"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:42">v</name></expr></argument>, <argument pos:start="27:45" pos:end="27:46"><expr pos:start="27:45" pos:end="27:46"><operator pos:start="27:45" pos:end="27:45">&amp;</operator><name pos:start="27:46" pos:end="27:46">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for pos:start="28:3" pos:end="34:3">for <control pos:start="28:7" pos:end="28:31">(<init pos:start="28:8" pos:end="28:17"><decl pos:start="28:8" pos:end="28:16"><type pos:start="28:8" pos:end="28:10"><name pos:start="28:8" pos:end="28:10">int</name></type> <name pos:start="28:12" pos:end="28:12">i</name> <init pos:start="28:14" pos:end="28:16">= <expr pos:start="28:16" pos:end="28:16"><literal type="number" pos:start="28:16" pos:end="28:16">1</literal></expr></init></decl>;</init> <condition pos:start="28:19" pos:end="28:25"><expr pos:start="28:19" pos:end="28:24"><name pos:start="28:19" pos:end="28:19">i</name> <operator pos:start="28:21" pos:end="28:22">&lt;=</operator> <name pos:start="28:24" pos:end="28:24">n</name></expr>;</condition> <incr pos:start="28:27" pos:end="28:30"><expr pos:start="28:27" pos:end="28:30"><name pos:start="28:27" pos:end="28:27">i</name> <operator pos:start="28:29" pos:end="28:30">++</operator></expr></incr>)</control>
  <block pos:start="29:3" pos:end="34:3">{<block_content pos:start="30:6" pos:end="33:6">
     <for pos:start="30:6" pos:end="33:6">for <control pos:start="30:10" pos:end="30:34">(<init pos:start="30:11" pos:end="30:20"><decl pos:start="30:11" pos:end="30:19"><type pos:start="30:11" pos:end="30:13"><name pos:start="30:11" pos:end="30:13">int</name></type> <name pos:start="30:15" pos:end="30:15">j</name> <init pos:start="30:17" pos:end="30:19">= <expr pos:start="30:19" pos:end="30:19"><literal type="number" pos:start="30:19" pos:end="30:19">1</literal></expr></init></decl>;</init> <condition pos:start="30:22" pos:end="30:28"><expr pos:start="30:22" pos:end="30:27"><name pos:start="30:22" pos:end="30:22">j</name> <operator pos:start="30:24" pos:end="30:25">&lt;=</operator> <name pos:start="30:27" pos:end="30:27">m</name></expr>;</condition> <incr pos:start="30:30" pos:end="30:33"><expr pos:start="30:30" pos:end="30:33"><name pos:start="30:30" pos:end="30:30">j</name> <operator pos:start="30:32" pos:end="30:33">++</operator></expr></incr>)</control>
     <block pos:start="31:6" pos:end="33:6">{<block_content pos:start="32:8" pos:end="32:31">
       <expr_stmt pos:start="32:8" pos:end="32:31"><expr pos:start="32:8" pos:end="32:30"><call pos:start="32:8" pos:end="32:30"><name pos:start="32:8" pos:end="32:12">scanf</name><argument_list pos:start="32:13" pos:end="32:30">(<argument pos:start="32:14" pos:end="32:17"><expr pos:start="32:14" pos:end="32:17"><literal type="string" pos:start="32:14" pos:end="32:17">"%d"</literal></expr></argument>, <argument pos:start="32:20" pos:end="32:29"><expr pos:start="32:20" pos:end="32:29"><operator pos:start="32:20" pos:end="32:20">&amp;</operator><name pos:start="32:21" pos:end="32:29"><name pos:start="32:21" pos:end="32:23">map</name><index pos:start="32:24" pos:end="32:26">[<expr pos:start="32:25" pos:end="32:25"><name pos:start="32:25" pos:end="32:25">i</name></expr>]</index><index pos:start="32:27" pos:end="32:29">[<expr pos:start="32:28" pos:end="32:28"><name pos:start="32:28" pos:end="32:28">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>
  </block_content>}</block></for>
  
  
  <expr_stmt pos:start="37:3" pos:end="37:101"><expr pos:start="37:3" pos:end="37:25"><name pos:start="37:3" pos:end="37:8"><name pos:start="37:3" pos:end="37:3">q</name><index pos:start="37:4" pos:end="37:8">[<expr pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:5">r</name><operator pos:start="37:6" pos:end="37:7">++</operator></expr>]</index></name><operator pos:start="37:9" pos:end="37:9">.</operator><call pos:start="37:10" pos:end="37:25"><name pos:start="37:10" pos:end="37:13">init</name><argument_list pos:start="37:14" pos:end="37:25">(<argument pos:start="37:15" pos:end="37:15"><expr pos:start="37:15" pos:end="37:15"><literal type="number" pos:start="37:15" pos:end="37:15">1</literal></expr></argument>, <argument pos:start="37:18" pos:end="37:18"><expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">1</literal></expr></argument>, <argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><name pos:start="37:21" pos:end="37:21">c</name></expr></argument>, <argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">1</literal></expr></argument>)</argument_list></call></expr><operator pos:start="37:26" pos:end="37:26">,</operator> <expr pos:start="37:28" pos:end="37:50"><name pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:28">q</name><index pos:start="37:29" pos:end="37:33">[<expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:30">r</name><operator pos:start="37:31" pos:end="37:32">++</operator></expr>]</index></name><operator pos:start="37:34" pos:end="37:34">.</operator><call pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:38">init</name><argument_list pos:start="37:39" pos:end="37:50">(<argument pos:start="37:40" pos:end="37:40"><expr pos:start="37:40" pos:end="37:40"><literal type="number" pos:start="37:40" pos:end="37:40">1</literal></expr></argument>, <argument pos:start="37:43" pos:end="37:43"><expr pos:start="37:43" pos:end="37:43"><name pos:start="37:43" pos:end="37:43">m</name></expr></argument>, <argument pos:start="37:46" pos:end="37:46"><expr pos:start="37:46" pos:end="37:46"><name pos:start="37:46" pos:end="37:46">c</name></expr></argument>, <argument pos:start="37:49" pos:end="37:49"><expr pos:start="37:49" pos:end="37:49"><literal type="number" pos:start="37:49" pos:end="37:49">2</literal></expr></argument>)</argument_list></call></expr><operator pos:start="37:51" pos:end="37:51">,</operator> <expr pos:start="37:53" pos:end="37:75"><name pos:start="37:53" pos:end="37:58"><name pos:start="37:53" pos:end="37:53">q</name><index pos:start="37:54" pos:end="37:58">[<expr pos:start="37:55" pos:end="37:57"><name pos:start="37:55" pos:end="37:55">r</name><operator pos:start="37:56" pos:end="37:57">++</operator></expr>]</index></name><operator pos:start="37:59" pos:end="37:59">.</operator><call pos:start="37:60" pos:end="37:75"><name pos:start="37:60" pos:end="37:63">init</name><argument_list pos:start="37:64" pos:end="37:75">(<argument pos:start="37:65" pos:end="37:65"><expr pos:start="37:65" pos:end="37:65"><name pos:start="37:65" pos:end="37:65">n</name></expr></argument>, <argument pos:start="37:68" pos:end="37:68"><expr pos:start="37:68" pos:end="37:68"><literal type="number" pos:start="37:68" pos:end="37:68">1</literal></expr></argument>, <argument pos:start="37:71" pos:end="37:71"><expr pos:start="37:71" pos:end="37:71"><name pos:start="37:71" pos:end="37:71">c</name></expr></argument>, <argument pos:start="37:74" pos:end="37:74"><expr pos:start="37:74" pos:end="37:74"><literal type="number" pos:start="37:74" pos:end="37:74">3</literal></expr></argument>)</argument_list></call></expr><operator pos:start="37:76" pos:end="37:76">,</operator> <expr pos:start="37:78" pos:end="37:100"><name pos:start="37:78" pos:end="37:83"><name pos:start="37:78" pos:end="37:78">q</name><index pos:start="37:79" pos:end="37:83">[<expr pos:start="37:80" pos:end="37:82"><name pos:start="37:80" pos:end="37:80">r</name><operator pos:start="37:81" pos:end="37:82">++</operator></expr>]</index></name><operator pos:start="37:84" pos:end="37:84">.</operator><call pos:start="37:85" pos:end="37:100"><name pos:start="37:85" pos:end="37:88">init</name><argument_list pos:start="37:89" pos:end="37:100">(<argument pos:start="37:90" pos:end="37:90"><expr pos:start="37:90" pos:end="37:90"><name pos:start="37:90" pos:end="37:90">n</name></expr></argument>, <argument pos:start="37:93" pos:end="37:93"><expr pos:start="37:93" pos:end="37:93"><name pos:start="37:93" pos:end="37:93">m</name></expr></argument>, <argument pos:start="37:96" pos:end="37:96"><expr pos:start="37:96" pos:end="37:96"><name pos:start="37:96" pos:end="37:96">c</name></expr></argument>, <argument pos:start="37:99" pos:end="37:99"><expr pos:start="37:99" pos:end="37:99"><literal type="number" pos:start="37:99" pos:end="37:99">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while pos:start="38:3" pos:end="81:3">while <condition pos:start="38:9" pos:end="38:15">(<expr pos:start="38:10" pos:end="38:14"><name pos:start="38:10" pos:end="38:10">l</name> <operator pos:start="38:12" pos:end="38:12">&lt;</operator> <name pos:start="38:14" pos:end="38:14">r</name></expr>)</condition>
  <block pos:start="39:3" pos:end="81:3">{<block_content pos:start="40:5" pos:end="80:5">
    <decl_stmt pos:start="40:5" pos:end="40:84"><decl pos:start="40:5" pos:end="40:19"><type pos:start="40:5" pos:end="40:7"><name pos:start="40:5" pos:end="40:7">int</name></type> <name pos:start="40:9" pos:end="40:10">nx</name> <init pos:start="40:12" pos:end="40:19">= <expr pos:start="40:14" pos:end="40:19"><name pos:start="40:14" pos:end="40:17"><name pos:start="40:14" pos:end="40:14">q</name><index pos:start="40:15" pos:end="40:17">[<expr pos:start="40:16" pos:end="40:16"><name pos:start="40:16" pos:end="40:16">l</name></expr>]</index></name><operator pos:start="40:18" pos:end="40:18">.</operator><name pos:start="40:19" pos:end="40:19">x</name></expr></init></decl>, <decl pos:start="40:22" pos:end="40:32"><type ref="prev" pos:start="40:5" pos:end="40:7"/><name pos:start="40:22" pos:end="40:23">ny</name> <init pos:start="40:25" pos:end="40:32">= <expr pos:start="40:27" pos:end="40:32"><name pos:start="40:27" pos:end="40:30"><name pos:start="40:27" pos:end="40:27">q</name><index pos:start="40:28" pos:end="40:30">[<expr pos:start="40:29" pos:end="40:29"><name pos:start="40:29" pos:end="40:29">l</name></expr>]</index></name><operator pos:start="40:31" pos:end="40:31">.</operator><name pos:start="40:32" pos:end="40:32">y</name></expr></init></decl>, <decl pos:start="40:35" pos:end="40:49"><type ref="prev" pos:start="40:5" pos:end="40:7"/><name pos:start="40:35" pos:end="40:36">ns</name> <init pos:start="40:38" pos:end="40:49">= <expr pos:start="40:40" pos:end="40:49"><name pos:start="40:40" pos:end="40:43"><name pos:start="40:40" pos:end="40:40">q</name><index pos:start="40:41" pos:end="40:43">[<expr pos:start="40:42" pos:end="40:42"><name pos:start="40:42" pos:end="40:42">l</name></expr>]</index></name><operator pos:start="40:44" pos:end="40:44">.</operator><name pos:start="40:45" pos:end="40:49">score</name></expr></init></decl>, <decl pos:start="40:52" pos:end="40:65"><type ref="prev" pos:start="40:5" pos:end="40:7"/><name pos:start="40:52" pos:end="40:53">nf</name> <init pos:start="40:55" pos:end="40:65">= <expr pos:start="40:57" pos:end="40:65"><name pos:start="40:57" pos:end="40:60"><name pos:start="40:57" pos:end="40:57">q</name><index pos:start="40:58" pos:end="40:60">[<expr pos:start="40:59" pos:end="40:59"><name pos:start="40:59" pos:end="40:59">l</name></expr>]</index></name><operator pos:start="40:61" pos:end="40:61">.</operator><name pos:start="40:62" pos:end="40:65">from</name></expr></init></decl>, <decl pos:start="40:68" pos:end="40:83"><type ref="prev" pos:start="40:5" pos:end="40:7"/><name pos:start="40:68" pos:end="40:69">nm</name> <init pos:start="40:71" pos:end="40:83">= <expr pos:start="40:73" pos:end="40:83"><name pos:start="40:73" pos:end="40:83"><name pos:start="40:73" pos:end="40:75">map</name><index pos:start="40:76" pos:end="40:79">[<expr pos:start="40:77" pos:end="40:78"><name pos:start="40:77" pos:end="40:78">nx</name></expr>]</index><index pos:start="40:80" pos:end="40:83">[<expr pos:start="40:81" pos:end="40:82"><name pos:start="40:81" pos:end="40:82">ny</name></expr>]</index></name></expr></init></decl>;</decl_stmt><expr_stmt pos:start="40:85" pos:end="40:88"><expr pos:start="40:85" pos:end="40:87"><name pos:start="40:85" pos:end="40:85">l</name><operator pos:start="40:86" pos:end="40:87">++</operator></expr>;</expr_stmt>
    <if_stmt pos:start="41:5" pos:end="48:5"><if pos:start="41:5" pos:end="44:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:10">ns</name> <operator pos:start="41:12" pos:end="41:13">&lt;=</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition>
    <block pos:start="42:5" pos:end="44:5">{<block_content pos:start="43:7" pos:end="43:15">
      <continue pos:start="43:7" pos:end="43:15">continue;</continue>
    </block_content>}</block></if>
    <if type="elseif" pos:start="45:5" pos:end="48:5">else if <condition pos:start="45:13" pos:end="45:21">( <expr pos:start="45:15" pos:end="45:20"><name pos:start="45:15" pos:end="45:16">ns</name> <operator pos:start="45:18" pos:end="45:18">&gt;</operator> <name pos:start="45:20" pos:end="45:20">c</name></expr>)</condition>
    <block pos:start="46:5" pos:end="48:5">{<block_content pos:start="47:7" pos:end="47:13">
      <expr_stmt pos:start="47:7" pos:end="47:13"><expr pos:start="47:7" pos:end="47:12"><name pos:start="47:7" pos:end="47:8">ns</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <name pos:start="47:12" pos:end="47:12">c</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="49:5" pos:end="80:5"><if pos:start="49:5" pos:end="52:5">if <condition pos:start="49:8" pos:end="49:27">(<expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:10">nx</name> <operator pos:start="49:12" pos:end="49:13">==</operator> <name pos:start="49:15" pos:end="49:15">x</name> <operator pos:start="49:17" pos:end="49:18">&amp;&amp;</operator> <name pos:start="49:20" pos:end="49:21">ny</name> <operator pos:start="49:23" pos:end="49:24">==</operator> <name pos:start="49:26" pos:end="49:26">y</name></expr>)</condition>
    <block pos:start="50:5" pos:end="52:5">{<block_content pos:start="51:7" pos:end="51:25">
      <expr_stmt pos:start="51:7" pos:end="51:25"><expr pos:start="51:7" pos:end="51:24"><name pos:start="51:7" pos:end="51:9">ans</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <call pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:15">max</name><argument_list pos:start="51:16" pos:end="51:24">(<argument pos:start="51:17" pos:end="51:19"><expr pos:start="51:17" pos:end="51:19"><name pos:start="51:17" pos:end="51:19">ans</name></expr></argument>, <argument pos:start="51:22" pos:end="51:23"><expr pos:start="51:22" pos:end="51:23"><name pos:start="51:22" pos:end="51:23">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="53:5" pos:end="59:5">else if <condition pos:start="53:13" pos:end="53:21">(<expr pos:start="53:14" pos:end="53:20"><name pos:start="53:14" pos:end="53:15">nf</name> <operator pos:start="53:17" pos:end="53:18">==</operator> <literal type="number" pos:start="53:20" pos:end="53:20">1</literal></expr>)</condition>
    <block pos:start="54:5" pos:end="59:5">{<block_content pos:start="55:7" pos:end="58:45">
      <if_stmt pos:start="55:7" pos:end="56:45"><if pos:start="55:7" pos:end="56:45">if <condition pos:start="55:10" pos:end="55:36">(<expr pos:start="55:11" pos:end="55:35"><literal type="number" pos:start="55:11" pos:end="55:11">0</literal> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <name pos:start="55:15" pos:end="55:16">nx</name> <operator pos:start="55:18" pos:end="55:18">+</operator> <literal type="number" pos:start="55:20" pos:end="55:20">1</literal> <operator pos:start="55:22" pos:end="55:23">&amp;&amp;</operator> <name pos:start="55:25" pos:end="55:26">nx</name> <operator pos:start="55:28" pos:end="55:28">+</operator> <literal type="number" pos:start="55:30" pos:end="55:30">1</literal> <operator pos:start="55:32" pos:end="55:33">&lt;=</operator> <name pos:start="55:35" pos:end="55:35">n</name></expr>)</condition><block type="pseudo" pos:start="56:9" pos:end="56:45"><block_content pos:start="56:9" pos:end="56:45">
        <expr_stmt pos:start="56:9" pos:end="56:45"><expr pos:start="56:9" pos:end="56:44"><name pos:start="56:9" pos:end="56:14"><name pos:start="56:9" pos:end="56:9">q</name><index pos:start="56:10" pos:end="56:14">[<expr pos:start="56:11" pos:end="56:13"><name pos:start="56:11" pos:end="56:11">r</name><operator pos:start="56:12" pos:end="56:13">++</operator></expr>]</index></name><operator pos:start="56:15" pos:end="56:15">.</operator><call pos:start="56:16" pos:end="56:44"><name pos:start="56:16" pos:end="56:19">init</name><argument_list pos:start="56:20" pos:end="56:44">(<argument pos:start="56:21" pos:end="56:26"><expr pos:start="56:21" pos:end="56:26"><name pos:start="56:21" pos:end="56:22">nx</name> <operator pos:start="56:24" pos:end="56:24">+</operator> <literal type="number" pos:start="56:26" pos:end="56:26">1</literal></expr></argument>, <argument pos:start="56:29" pos:end="56:30"><expr pos:start="56:29" pos:end="56:30"><name pos:start="56:29" pos:end="56:30">ny</name></expr></argument>, <argument pos:start="56:33" pos:end="56:39"><expr pos:start="56:33" pos:end="56:39"><name pos:start="56:33" pos:end="56:34">ns</name> <operator pos:start="56:36" pos:end="56:36">+</operator> <name pos:start="56:38" pos:end="56:39">nm</name></expr></argument>, <argument pos:start="56:42" pos:end="56:43"><expr pos:start="56:42" pos:end="56:43"><name pos:start="56:42" pos:end="56:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="57:7" pos:end="58:45"><if pos:start="57:7" pos:end="58:45">if <condition pos:start="57:10" pos:end="57:36">(<expr pos:start="57:11" pos:end="57:35"><literal type="number" pos:start="57:11" pos:end="57:11">0</literal> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <name pos:start="57:15" pos:end="57:16">ny</name> <operator pos:start="57:18" pos:end="57:18">+</operator> <literal type="number" pos:start="57:20" pos:end="57:20">1</literal> <operator pos:start="57:22" pos:end="57:23">&amp;&amp;</operator> <name pos:start="57:25" pos:end="57:26">ny</name> <operator pos:start="57:28" pos:end="57:28">+</operator> <literal type="number" pos:start="57:30" pos:end="57:30">1</literal> <operator pos:start="57:32" pos:end="57:33">&lt;=</operator> <name pos:start="57:35" pos:end="57:35">m</name></expr>)</condition><block type="pseudo" pos:start="58:9" pos:end="58:45"><block_content pos:start="58:9" pos:end="58:45">
        <expr_stmt pos:start="58:9" pos:end="58:45"><expr pos:start="58:9" pos:end="58:44"><name pos:start="58:9" pos:end="58:14"><name pos:start="58:9" pos:end="58:9">q</name><index pos:start="58:10" pos:end="58:14">[<expr pos:start="58:11" pos:end="58:13"><name pos:start="58:11" pos:end="58:11">r</name><operator pos:start="58:12" pos:end="58:13">++</operator></expr>]</index></name><operator pos:start="58:15" pos:end="58:15">.</operator><call pos:start="58:16" pos:end="58:44"><name pos:start="58:16" pos:end="58:19">init</name><argument_list pos:start="58:20" pos:end="58:44">(<argument pos:start="58:21" pos:end="58:22"><expr pos:start="58:21" pos:end="58:22"><name pos:start="58:21" pos:end="58:22">nx</name></expr></argument>, <argument pos:start="58:25" pos:end="58:30"><expr pos:start="58:25" pos:end="58:30"><name pos:start="58:25" pos:end="58:26">ny</name> <operator pos:start="58:28" pos:end="58:28">+</operator> <literal type="number" pos:start="58:30" pos:end="58:30">1</literal></expr></argument>, <argument pos:start="58:33" pos:end="58:39"><expr pos:start="58:33" pos:end="58:39"><name pos:start="58:33" pos:end="58:34">ns</name> <operator pos:start="58:36" pos:end="58:36">+</operator> <name pos:start="58:38" pos:end="58:39">nm</name></expr></argument>, <argument pos:start="58:42" pos:end="58:43"><expr pos:start="58:42" pos:end="58:43"><name pos:start="58:42" pos:end="58:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="60:5" pos:end="66:5">else if <condition pos:start="60:13" pos:end="60:21">(<expr pos:start="60:14" pos:end="60:20"><name pos:start="60:14" pos:end="60:15">nf</name> <operator pos:start="60:17" pos:end="60:18">==</operator> <literal type="number" pos:start="60:20" pos:end="60:20">2</literal></expr>)</condition>
    <block pos:start="61:5" pos:end="66:5">{<block_content pos:start="62:7" pos:end="65:45">
      <if_stmt pos:start="62:7" pos:end="63:45"><if pos:start="62:7" pos:end="63:45">if <condition pos:start="62:10" pos:end="62:36">(<expr pos:start="62:11" pos:end="62:35"><literal type="number" pos:start="62:11" pos:end="62:11">0</literal> <operator pos:start="62:13" pos:end="62:13">&lt;</operator> <name pos:start="62:15" pos:end="62:16">nx</name> <operator pos:start="62:18" pos:end="62:18">+</operator> <literal type="number" pos:start="62:20" pos:end="62:20">1</literal> <operator pos:start="62:22" pos:end="62:23">&amp;&amp;</operator> <name pos:start="62:25" pos:end="62:26">nx</name> <operator pos:start="62:28" pos:end="62:28">+</operator> <literal type="number" pos:start="62:30" pos:end="62:30">1</literal> <operator pos:start="62:32" pos:end="62:33">&lt;=</operator> <name pos:start="62:35" pos:end="62:35">n</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:45"><block_content pos:start="63:9" pos:end="63:45">
        <expr_stmt pos:start="63:9" pos:end="63:45"><expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:9">q</name><index pos:start="63:10" pos:end="63:14">[<expr pos:start="63:11" pos:end="63:13"><name pos:start="63:11" pos:end="63:11">r</name><operator pos:start="63:12" pos:end="63:13">++</operator></expr>]</index></name><operator pos:start="63:15" pos:end="63:15">.</operator><call pos:start="63:16" pos:end="63:44"><name pos:start="63:16" pos:end="63:19">init</name><argument_list pos:start="63:20" pos:end="63:44">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:22">nx</name> <operator pos:start="63:24" pos:end="63:24">+</operator> <literal type="number" pos:start="63:26" pos:end="63:26">1</literal></expr></argument>, <argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><name pos:start="63:29" pos:end="63:30">ny</name></expr></argument>, <argument pos:start="63:33" pos:end="63:39"><expr pos:start="63:33" pos:end="63:39"><name pos:start="63:33" pos:end="63:34">ns</name> <operator pos:start="63:36" pos:end="63:36">+</operator> <name pos:start="63:38" pos:end="63:39">nm</name></expr></argument>, <argument pos:start="63:42" pos:end="63:43"><expr pos:start="63:42" pos:end="63:43"><name pos:start="63:42" pos:end="63:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="64:7" pos:end="65:45"><if pos:start="64:7" pos:end="65:45">if <condition pos:start="64:10" pos:end="64:36">(<expr pos:start="64:11" pos:end="64:35"><literal type="number" pos:start="64:11" pos:end="64:11">0</literal> <operator pos:start="64:13" pos:end="64:13">&lt;</operator> <name pos:start="64:15" pos:end="64:16">ny</name> <operator pos:start="64:18" pos:end="64:18">-</operator> <literal type="number" pos:start="64:20" pos:end="64:20">1</literal> <operator pos:start="64:22" pos:end="64:23">&amp;&amp;</operator> <name pos:start="64:25" pos:end="64:26">ny</name> <operator pos:start="64:28" pos:end="64:28">-</operator> <literal type="number" pos:start="64:30" pos:end="64:30">1</literal> <operator pos:start="64:32" pos:end="64:33">&lt;=</operator> <name pos:start="64:35" pos:end="64:35">m</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:45"><block_content pos:start="65:9" pos:end="65:45">
        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:9">q</name><index pos:start="65:10" pos:end="65:14">[<expr pos:start="65:11" pos:end="65:13"><name pos:start="65:11" pos:end="65:11">r</name><operator pos:start="65:12" pos:end="65:13">++</operator></expr>]</index></name><operator pos:start="65:15" pos:end="65:15">.</operator><call pos:start="65:16" pos:end="65:44"><name pos:start="65:16" pos:end="65:19">init</name><argument_list pos:start="65:20" pos:end="65:44">(<argument pos:start="65:21" pos:end="65:22"><expr pos:start="65:21" pos:end="65:22"><name pos:start="65:21" pos:end="65:22">nx</name></expr></argument>, <argument pos:start="65:25" pos:end="65:30"><expr pos:start="65:25" pos:end="65:30"><name pos:start="65:25" pos:end="65:26">ny</name> <operator pos:start="65:28" pos:end="65:28">-</operator> <literal type="number" pos:start="65:30" pos:end="65:30">1</literal></expr></argument>, <argument pos:start="65:33" pos:end="65:39"><expr pos:start="65:33" pos:end="65:39"><name pos:start="65:33" pos:end="65:34">ns</name> <operator pos:start="65:36" pos:end="65:36">+</operator> <name pos:start="65:38" pos:end="65:39">nm</name></expr></argument>, <argument pos:start="65:42" pos:end="65:43"><expr pos:start="65:42" pos:end="65:43"><name pos:start="65:42" pos:end="65:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="67:5" pos:end="73:5">else if <condition pos:start="67:13" pos:end="67:21">(<expr pos:start="67:14" pos:end="67:20"><name pos:start="67:14" pos:end="67:15">nf</name> <operator pos:start="67:17" pos:end="67:18">==</operator> <literal type="number" pos:start="67:20" pos:end="67:20">3</literal></expr>)</condition>
    <block pos:start="68:5" pos:end="73:5">{<block_content pos:start="69:7" pos:end="72:45">
      <if_stmt pos:start="69:7" pos:end="70:45"><if pos:start="69:7" pos:end="70:45">if <condition pos:start="69:10" pos:end="69:36">(<expr pos:start="69:11" pos:end="69:35"><literal type="number" pos:start="69:11" pos:end="69:11">0</literal> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <name pos:start="69:15" pos:end="69:16">nx</name> <operator pos:start="69:18" pos:end="69:18">-</operator> <literal type="number" pos:start="69:20" pos:end="69:20">1</literal> <operator pos:start="69:22" pos:end="69:23">&amp;&amp;</operator> <name pos:start="69:25" pos:end="69:26">nx</name> <operator pos:start="69:28" pos:end="69:28">-</operator> <literal type="number" pos:start="69:30" pos:end="69:30">1</literal> <operator pos:start="69:32" pos:end="69:33">&lt;=</operator> <name pos:start="69:35" pos:end="69:35">n</name></expr>)</condition><block type="pseudo" pos:start="70:9" pos:end="70:45"><block_content pos:start="70:9" pos:end="70:45">
        <expr_stmt pos:start="70:9" pos:end="70:45"><expr pos:start="70:9" pos:end="70:44"><name pos:start="70:9" pos:end="70:14"><name pos:start="70:9" pos:end="70:9">q</name><index pos:start="70:10" pos:end="70:14">[<expr pos:start="70:11" pos:end="70:13"><name pos:start="70:11" pos:end="70:11">r</name><operator pos:start="70:12" pos:end="70:13">++</operator></expr>]</index></name><operator pos:start="70:15" pos:end="70:15">.</operator><call pos:start="70:16" pos:end="70:44"><name pos:start="70:16" pos:end="70:19">init</name><argument_list pos:start="70:20" pos:end="70:44">(<argument pos:start="70:21" pos:end="70:26"><expr pos:start="70:21" pos:end="70:26"><name pos:start="70:21" pos:end="70:22">nx</name> <operator pos:start="70:24" pos:end="70:24">-</operator> <literal type="number" pos:start="70:26" pos:end="70:26">1</literal></expr></argument>, <argument pos:start="70:29" pos:end="70:30"><expr pos:start="70:29" pos:end="70:30"><name pos:start="70:29" pos:end="70:30">ny</name></expr></argument>, <argument pos:start="70:33" pos:end="70:39"><expr pos:start="70:33" pos:end="70:39"><name pos:start="70:33" pos:end="70:34">ns</name> <operator pos:start="70:36" pos:end="70:36">+</operator> <name pos:start="70:38" pos:end="70:39">nm</name></expr></argument>, <argument pos:start="70:42" pos:end="70:43"><expr pos:start="70:42" pos:end="70:43"><name pos:start="70:42" pos:end="70:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="71:7" pos:end="72:45"><if pos:start="71:7" pos:end="72:45">if <condition pos:start="71:10" pos:end="71:36">(<expr pos:start="71:11" pos:end="71:35"><literal type="number" pos:start="71:11" pos:end="71:11">0</literal> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <name pos:start="71:15" pos:end="71:16">ny</name> <operator pos:start="71:18" pos:end="71:18">+</operator> <literal type="number" pos:start="71:20" pos:end="71:20">1</literal> <operator pos:start="71:22" pos:end="71:23">&amp;&amp;</operator> <name pos:start="71:25" pos:end="71:26">ny</name> <operator pos:start="71:28" pos:end="71:28">+</operator> <literal type="number" pos:start="71:30" pos:end="71:30">1</literal> <operator pos:start="71:32" pos:end="71:33">&lt;=</operator> <name pos:start="71:35" pos:end="71:35">m</name></expr>)</condition><block type="pseudo" pos:start="72:9" pos:end="72:45"><block_content pos:start="72:9" pos:end="72:45">
        <expr_stmt pos:start="72:9" pos:end="72:45"><expr pos:start="72:9" pos:end="72:44"><name pos:start="72:9" pos:end="72:14"><name pos:start="72:9" pos:end="72:9">q</name><index pos:start="72:10" pos:end="72:14">[<expr pos:start="72:11" pos:end="72:13"><name pos:start="72:11" pos:end="72:11">r</name><operator pos:start="72:12" pos:end="72:13">++</operator></expr>]</index></name><operator pos:start="72:15" pos:end="72:15">.</operator><call pos:start="72:16" pos:end="72:44"><name pos:start="72:16" pos:end="72:19">init</name><argument_list pos:start="72:20" pos:end="72:44">(<argument pos:start="72:21" pos:end="72:22"><expr pos:start="72:21" pos:end="72:22"><name pos:start="72:21" pos:end="72:22">nx</name></expr></argument>, <argument pos:start="72:25" pos:end="72:30"><expr pos:start="72:25" pos:end="72:30"><name pos:start="72:25" pos:end="72:26">ny</name> <operator pos:start="72:28" pos:end="72:28">+</operator> <literal type="number" pos:start="72:30" pos:end="72:30">1</literal></expr></argument>, <argument pos:start="72:33" pos:end="72:39"><expr pos:start="72:33" pos:end="72:39"><name pos:start="72:33" pos:end="72:34">ns</name> <operator pos:start="72:36" pos:end="72:36">+</operator> <name pos:start="72:38" pos:end="72:39">nm</name></expr></argument>, <argument pos:start="72:42" pos:end="72:43"><expr pos:start="72:42" pos:end="72:43"><name pos:start="72:42" pos:end="72:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else pos:start="74:5" pos:end="80:5">else
    <block pos:start="75:5" pos:end="80:5">{<block_content pos:start="76:7" pos:end="79:45">
      <if_stmt pos:start="76:7" pos:end="77:45"><if pos:start="76:7" pos:end="77:45">if <condition pos:start="76:10" pos:end="76:36">(<expr pos:start="76:11" pos:end="76:35"><literal type="number" pos:start="76:11" pos:end="76:11">0</literal> <operator pos:start="76:13" pos:end="76:13">&lt;</operator> <name pos:start="76:15" pos:end="76:16">nx</name> <operator pos:start="76:18" pos:end="76:18">-</operator> <literal type="number" pos:start="76:20" pos:end="76:20">1</literal> <operator pos:start="76:22" pos:end="76:23">&amp;&amp;</operator> <name pos:start="76:25" pos:end="76:26">nx</name> <operator pos:start="76:28" pos:end="76:28">-</operator> <literal type="number" pos:start="76:30" pos:end="76:30">1</literal> <operator pos:start="76:32" pos:end="76:33">&lt;=</operator> <name pos:start="76:35" pos:end="76:35">n</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:45"><block_content pos:start="77:9" pos:end="77:45">
        <expr_stmt pos:start="77:9" pos:end="77:45"><expr pos:start="77:9" pos:end="77:44"><name pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:9">q</name><index pos:start="77:10" pos:end="77:14">[<expr pos:start="77:11" pos:end="77:13"><name pos:start="77:11" pos:end="77:11">r</name><operator pos:start="77:12" pos:end="77:13">++</operator></expr>]</index></name><operator pos:start="77:15" pos:end="77:15">.</operator><call pos:start="77:16" pos:end="77:44"><name pos:start="77:16" pos:end="77:19">init</name><argument_list pos:start="77:20" pos:end="77:44">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:22">nx</name> <operator pos:start="77:24" pos:end="77:24">-</operator> <literal type="number" pos:start="77:26" pos:end="77:26">1</literal></expr></argument>, <argument pos:start="77:29" pos:end="77:30"><expr pos:start="77:29" pos:end="77:30"><name pos:start="77:29" pos:end="77:30">ny</name></expr></argument>, <argument pos:start="77:33" pos:end="77:39"><expr pos:start="77:33" pos:end="77:39"><name pos:start="77:33" pos:end="77:34">ns</name> <operator pos:start="77:36" pos:end="77:36">+</operator> <name pos:start="77:38" pos:end="77:39">nm</name></expr></argument>, <argument pos:start="77:42" pos:end="77:43"><expr pos:start="77:42" pos:end="77:43"><name pos:start="77:42" pos:end="77:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt pos:start="78:7" pos:end="79:45"><if pos:start="78:7" pos:end="79:45">if <condition pos:start="78:10" pos:end="78:36">(<expr pos:start="78:11" pos:end="78:35"><literal type="number" pos:start="78:11" pos:end="78:11">0</literal> <operator pos:start="78:13" pos:end="78:13">&lt;</operator> <name pos:start="78:15" pos:end="78:16">ny</name> <operator pos:start="78:18" pos:end="78:18">-</operator> <literal type="number" pos:start="78:20" pos:end="78:20">1</literal> <operator pos:start="78:22" pos:end="78:23">&amp;&amp;</operator> <name pos:start="78:25" pos:end="78:26">ny</name> <operator pos:start="78:28" pos:end="78:28">-</operator> <literal type="number" pos:start="78:30" pos:end="78:30">1</literal> <operator pos:start="78:32" pos:end="78:33">&lt;=</operator> <name pos:start="78:35" pos:end="78:35">n</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:45"><block_content pos:start="79:9" pos:end="79:45">
        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:9">q</name><index pos:start="79:10" pos:end="79:14">[<expr pos:start="79:11" pos:end="79:13"><name pos:start="79:11" pos:end="79:11">r</name><operator pos:start="79:12" pos:end="79:13">++</operator></expr>]</index></name><operator pos:start="79:15" pos:end="79:15">.</operator><call pos:start="79:16" pos:end="79:44"><name pos:start="79:16" pos:end="79:19">init</name><argument_list pos:start="79:20" pos:end="79:44">(<argument pos:start="79:21" pos:end="79:22"><expr pos:start="79:21" pos:end="79:22"><name pos:start="79:21" pos:end="79:22">nx</name></expr></argument>, <argument pos:start="79:25" pos:end="79:30"><expr pos:start="79:25" pos:end="79:30"><name pos:start="79:25" pos:end="79:26">ny</name> <operator pos:start="79:28" pos:end="79:28">-</operator> <literal type="number" pos:start="79:30" pos:end="79:30">1</literal></expr></argument>, <argument pos:start="79:33" pos:end="79:39"><expr pos:start="79:33" pos:end="79:39"><name pos:start="79:33" pos:end="79:34">ns</name> <operator pos:start="79:36" pos:end="79:36">+</operator> <name pos:start="79:38" pos:end="79:39">nm</name></expr></argument>, <argument pos:start="79:42" pos:end="79:43"><expr pos:start="79:42" pos:end="79:43"><name pos:start="79:42" pos:end="79:43">nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  
  <expr_stmt pos:start="83:3" pos:end="83:22"><expr pos:start="83:3" pos:end="83:21"><call pos:start="83:3" pos:end="83:21"><name pos:start="83:3" pos:end="83:8">printf</name><argument_list pos:start="83:9" pos:end="83:21">(<argument pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:15"><literal type="string" pos:start="83:10" pos:end="83:15">"%d\n"</literal></expr></argument>, <argument pos:start="83:18" pos:end="83:20"><expr pos:start="83:18" pos:end="83:20"><name pos:start="83:18" pos:end="83:20">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return pos:start="84:3" pos:end="84:11">return <expr pos:start="84:10" pos:end="84:10"><literal type="number" pos:start="84:10" pos:end="84:10">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
