<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/667/667.cpp" pos:tabs="8">
<cpp:include pos:start="2:1" pos:end="2:24">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="3:1" pos:end="6:0">using <namespace pos:start="3:7" pos:end="6:0">namespace <name pos:start="3:17" pos:end="3:19">std</name>;</namespace></using>

<cpp:define pos:start="5:1" pos:end="5:20">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:10"><name pos:start="5:9" pos:end="5:10">ll</name></cpp:macro> <cpp:value pos:start="5:12" pos:end="5:20">long long</cpp:value></cpp:define>
<decl_stmt pos:start="6:1" pos:end="6:45"><decl pos:start="6:1" pos:end="6:26"><type pos:start="6:1" pos:end="6:9"><specifier pos:start="6:1" pos:end="6:5">const</specifier> <name pos:start="6:7" pos:end="6:9">int</name></type> <name pos:start="6:11" pos:end="6:11">N</name> <init pos:start="6:13" pos:end="6:26">= <expr pos:start="6:15" pos:end="6:26"><operator pos:start="6:15" pos:end="6:15">(</operator><name pos:start="6:16" pos:end="6:18">int</name><operator pos:start="6:19" pos:end="6:19">)</operator><literal type="number" pos:start="6:20" pos:end="6:24">1e4</literal> <operator pos:start="6:24" pos:end="6:24">+</operator> <literal type="number" pos:start="6:26" pos:end="6:26">5</literal></expr></init></decl>, <decl pos:start="6:29" pos:end="6:44"><type ref="prev" pos:start="6:1" pos:end="6:9"/><name pos:start="6:29" pos:end="6:29">M</name> <init pos:start="6:31" pos:end="6:44">= <expr pos:start="6:33" pos:end="6:44"><operator pos:start="6:33" pos:end="6:33">(</operator><name pos:start="6:34" pos:end="6:36">int</name><operator pos:start="6:37" pos:end="6:37">)</operator><literal type="number" pos:start="6:38" pos:end="6:42">2e5</literal> <operator pos:start="6:42" pos:end="6:42">+</operator> <literal type="number" pos:start="6:44" pos:end="6:44">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:48"><decl pos:start="7:1" pos:end="7:5"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:5">n</name></decl>, <decl pos:start="7:8" pos:end="7:8"><type ref="prev" pos:start="7:1" pos:end="7:3"/><name pos:start="7:8" pos:end="7:8">m</name></decl>, <decl pos:start="7:11" pos:end="7:16"><type ref="prev" pos:start="7:1" pos:end="7:3"/><name pos:start="7:11" pos:end="7:16"><name pos:start="7:11" pos:end="7:13">dfn</name><index pos:start="7:14" pos:end="7:16">[<expr pos:start="7:15" pos:end="7:15"><name pos:start="7:15" pos:end="7:15">N</name></expr>]</index></name></decl>, <decl pos:start="7:19" pos:end="7:24"><type ref="prev" pos:start="7:1" pos:end="7:3"/><name pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:21">low</name><index pos:start="7:22" pos:end="7:24">[<expr pos:start="7:23" pos:end="7:23"><name pos:start="7:23" pos:end="7:23">N</name></expr>]</index></name></decl>, <decl pos:start="7:27" pos:end="7:31"><type ref="prev" pos:start="7:1" pos:end="7:3"/><name pos:start="7:27" pos:end="7:31">times</name></decl>, <decl pos:start="7:34" pos:end="7:42"><type ref="prev" pos:start="7:1" pos:end="7:3"/><name pos:start="7:34" pos:end="7:42"><name pos:start="7:34" pos:end="7:39">belong</name><index pos:start="7:40" pos:end="7:42">[<expr pos:start="7:41" pos:end="7:41"><name pos:start="7:41" pos:end="7:41">N</name></expr>]</index></name></decl>, <decl pos:start="7:45" pos:end="7:47"><type ref="prev" pos:start="7:1" pos:end="7:3"/><name pos:start="7:45" pos:end="7:47">ans</name></decl>;</decl_stmt>

<decl_stmt pos:start="9:1" pos:end="9:14"><decl pos:start="9:1" pos:end="9:7"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:7">num</name></decl>, <decl pos:start="9:10" pos:end="9:13"><type ref="prev" pos:start="9:1" pos:end="9:3"/><name pos:start="9:10" pos:end="9:13"><name pos:start="9:10" pos:end="9:10">h</name><index pos:start="9:11" pos:end="9:13">[<expr pos:start="9:12" pos:end="9:12"><name pos:start="9:12" pos:end="9:12">N</name></expr>]</index></name></decl>;</decl_stmt>
<struct pos:start="10:1" pos:end="13:7">struct <name pos:start="10:8" pos:end="10:11">edge</name>
<block pos:start="11:1" pos:end="13:1">{<public type="default" pos:start="12:5" pos:end="12:16">
    <decl_stmt pos:start="12:5" pos:end="12:16"><decl pos:start="12:5" pos:end="12:9"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">v</name></decl>, <decl pos:start="12:12" pos:end="12:15"><type ref="prev" pos:start="12:5" pos:end="12:7"/><name pos:start="12:12" pos:end="12:15">next</name></decl>;</decl_stmt>
</public>}</block> <decl pos:start="13:3" pos:end="13:6"><name pos:start="13:3" pos:end="13:6"><name pos:start="13:3" pos:end="13:3">e</name><index pos:start="13:4" pos:end="13:6">[<expr pos:start="13:5" pos:end="13:5"><name pos:start="13:5" pos:end="13:5">M</name></expr>]</index></name></decl>;</struct>

<decl_stmt pos:start="15:1" pos:end="15:13"><decl pos:start="15:1" pos:end="15:12"><type pos:start="15:1" pos:end="15:10"><name pos:start="15:1" pos:end="15:10"><name pos:start="15:1" pos:end="15:5">stack</name><argument_list type="generic" pos:start="15:6" pos:end="15:10">&lt;<argument pos:start="15:7" pos:end="15:9"><expr pos:start="15:7" pos:end="15:9"><name pos:start="15:7" pos:end="15:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="15:12" pos:end="15:12">s</name></decl>;</decl_stmt>
<decl_stmt pos:start="16:1" pos:end="16:18"><decl pos:start="16:1" pos:end="16:17"><type pos:start="16:1" pos:end="16:11"><name pos:start="16:1" pos:end="16:11"><name pos:start="16:1" pos:end="16:6">vector</name><argument_list type="generic" pos:start="16:7" pos:end="16:11">&lt;<argument pos:start="16:8" pos:end="16:10"><expr pos:start="16:8" pos:end="16:10"><name pos:start="16:8" pos:end="16:10">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="16:13" pos:end="16:17"><name pos:start="16:13" pos:end="16:14">bs</name><index pos:start="16:15" pos:end="16:17">[<expr pos:start="16:16" pos:end="16:16"><name pos:start="16:16" pos:end="16:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="17:1" pos:end="17:8"><decl pos:start="17:1" pos:end="17:7"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:7">cnt</name></decl>;</decl_stmt>

<function pos:start="19:1" pos:end="24:1"><type pos:start="19:1" pos:end="19:4"><name pos:start="19:1" pos:end="19:4">void</name></type> <name pos:start="19:6" pos:end="19:11">insert</name><parameter_list pos:start="19:12" pos:end="19:25">(<parameter pos:start="19:13" pos:end="19:17"><decl pos:start="19:13" pos:end="19:17"><type pos:start="19:13" pos:end="19:17"><name pos:start="19:13" pos:end="19:15">int</name></type> <name pos:start="19:17" pos:end="19:17">u</name></decl></parameter>, <parameter pos:start="19:20" pos:end="19:24"><decl pos:start="19:20" pos:end="19:24"><type pos:start="19:20" pos:end="19:24"><name pos:start="19:20" pos:end="19:22">int</name></type> <name pos:start="19:24" pos:end="19:24">v</name></decl></parameter>)</parameter_list>
<block pos:start="20:1" pos:end="24:1">{<block_content pos:start="21:5" pos:end="23:15">
    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">e</name><index pos:start="21:6" pos:end="21:12">[<expr pos:start="21:7" pos:end="21:11"><operator pos:start="21:7" pos:end="21:8">++</operator><name pos:start="21:9" pos:end="21:11">num</name></expr>]</index></name><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:14">v</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:18">v</name></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:23"><expr pos:start="22:5" pos:end="22:22"><name pos:start="22:5" pos:end="22:10"><name pos:start="22:5" pos:end="22:5">e</name><index pos:start="22:6" pos:end="22:10">[<expr pos:start="22:7" pos:end="22:9"><name pos:start="22:7" pos:end="22:9">num</name></expr>]</index></name><operator pos:start="22:11" pos:end="22:11">.</operator><name pos:start="22:12" pos:end="22:15">next</name> <operator pos:start="22:17" pos:end="22:17">=</operator> <name pos:start="22:19" pos:end="22:22"><name pos:start="22:19" pos:end="22:19">h</name><index pos:start="22:20" pos:end="22:22">[<expr pos:start="22:21" pos:end="22:21"><name pos:start="22:21" pos:end="22:21">u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:15"><expr pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:5">h</name><index pos:start="23:6" pos:end="23:8">[<expr pos:start="23:7" pos:end="23:7"><name pos:start="23:7" pos:end="23:7">u</name></expr>]</index></name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:14">num</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="26:1" pos:end="42:1"><type pos:start="26:1" pos:end="26:10"><specifier pos:start="26:1" pos:end="26:6">inline</specifier> <name pos:start="26:8" pos:end="26:10">int</name></type> <name pos:start="26:12" pos:end="26:15">read</name><parameter_list pos:start="26:16" pos:end="26:17">()</parameter_list>
<block pos:start="27:1" pos:end="42:1">{<block_content pos:start="28:5" pos:end="41:22">
    <decl_stmt pos:start="28:5" pos:end="28:21"><decl pos:start="28:5" pos:end="28:13"><type pos:start="28:5" pos:end="28:7"><name pos:start="28:5" pos:end="28:7">int</name></type> <name pos:start="28:9" pos:end="28:9">s</name> <init pos:start="28:11" pos:end="28:13">= <expr pos:start="28:13" pos:end="28:13"><literal type="number" pos:start="28:13" pos:end="28:13">0</literal></expr></init></decl>, <decl pos:start="28:16" pos:end="28:20"><type ref="prev" pos:start="28:5" pos:end="28:7"/><name pos:start="28:16" pos:end="28:16">f</name> <init pos:start="28:18" pos:end="28:20">= <expr pos:start="28:20" pos:end="28:20"><literal type="number" pos:start="28:20" pos:end="28:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">char</name></type> <name pos:start="29:10" pos:end="29:11">ch</name> <init pos:start="29:13" pos:end="29:23">= <expr pos:start="29:15" pos:end="29:23"><call pos:start="29:15" pos:end="29:23"><name pos:start="29:15" pos:end="29:21">getchar</name><argument_list pos:start="29:22" pos:end="29:23">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while pos:start="30:5" pos:end="35:5">while <condition pos:start="30:11" pos:end="30:30">(<expr pos:start="30:12" pos:end="30:29"><name pos:start="30:12" pos:end="30:26"><name pos:start="30:12" pos:end="30:13">ch</name> <argument_list type="generic" pos:start="30:15" pos:end="30:26">&lt; <argument pos:start="30:17" pos:end="30:24"><expr pos:start="30:17" pos:end="30:24"><literal type="number" pos:start="30:17" pos:end="30:18">48</literal> <operator pos:start="30:20" pos:end="30:21">||</operator> <name pos:start="30:23" pos:end="30:24">ch</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="30:28" pos:end="30:29">57</literal></expr>)</condition>
    <block pos:start="31:5" pos:end="35:5">{<block_content pos:start="32:9" pos:end="34:23">
        <if_stmt pos:start="32:9" pos:end="33:18"><if pos:start="32:9" pos:end="33:18">if <condition pos:start="32:12" pos:end="32:22">(<expr pos:start="32:13" pos:end="32:21"><name pos:start="32:13" pos:end="32:14">ch</name> <operator pos:start="32:16" pos:end="32:17">==</operator> <literal type="char" pos:start="32:19" pos:end="32:21">'-'</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:18"><block_content pos:start="33:13" pos:end="33:18">
            <expr_stmt pos:start="33:13" pos:end="33:18"><expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:13">f</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:23"><expr pos:start="34:9" pos:end="34:22"><name pos:start="34:9" pos:end="34:10">ch</name> <operator pos:start="34:12" pos:end="34:12">=</operator> <call pos:start="34:14" pos:end="34:22"><name pos:start="34:14" pos:end="34:20">getchar</name><argument_list pos:start="34:21" pos:end="34:22">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while pos:start="36:5" pos:end="40:5">while <condition pos:start="36:11" pos:end="36:32">(<expr pos:start="36:12" pos:end="36:31"><name pos:start="36:12" pos:end="36:13">ch</name> <operator pos:start="36:15" pos:end="36:16">&gt;=</operator> <literal type="number" pos:start="36:18" pos:end="36:19">48</literal> <operator pos:start="36:21" pos:end="36:22">&amp;&amp;</operator> <name pos:start="36:24" pos:end="36:25">ch</name> <operator pos:start="36:27" pos:end="36:28">&lt;=</operator> <literal type="number" pos:start="36:30" pos:end="36:31">57</literal></expr>)</condition>
    <block pos:start="37:5" pos:end="40:5">{<block_content pos:start="38:9" pos:end="39:23">
        <expr_stmt pos:start="38:9" pos:end="38:44"><expr pos:start="38:9" pos:end="38:43"><name pos:start="38:9" pos:end="38:9">s</name> <operator pos:start="38:11" pos:end="38:11">=</operator> <operator pos:start="38:13" pos:end="38:13">(</operator><name pos:start="38:14" pos:end="38:14">s</name> <operator pos:start="38:16" pos:end="38:17">&lt;&lt;</operator> <literal type="number" pos:start="38:19" pos:end="38:19">3</literal><operator pos:start="38:20" pos:end="38:20">)</operator> <operator pos:start="38:22" pos:end="38:22">+</operator> <operator pos:start="38:24" pos:end="38:24">(</operator><name pos:start="38:25" pos:end="38:25">s</name> <operator pos:start="38:27" pos:end="38:28">&lt;&lt;</operator> <literal type="number" pos:start="38:30" pos:end="38:30">1</literal><operator pos:start="38:31" pos:end="38:31">)</operator> <operator pos:start="38:33" pos:end="38:33">+</operator> <operator pos:start="38:35" pos:end="38:35">(</operator><name pos:start="38:36" pos:end="38:37">ch</name> <operator pos:start="38:39" pos:end="38:39">^</operator> <literal type="number" pos:start="38:41" pos:end="38:42">48</literal><operator pos:start="38:43" pos:end="38:43">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:10">ch</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:22"><name pos:start="39:14" pos:end="39:20">getchar</name><argument_list pos:start="39:21" pos:end="39:22">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="41:5" pos:end="41:22">return <expr pos:start="41:12" pos:end="41:21"><ternary pos:start="41:12" pos:end="41:21"><condition pos:start="41:12" pos:end="41:14"><expr pos:start="41:12" pos:end="41:12"><name pos:start="41:12" pos:end="41:12">f</name></expr> ?</condition><then pos:start="41:16" pos:end="41:17"> <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><name pos:start="41:17" pos:end="41:17">s</name></expr> </then><else pos:start="41:19" pos:end="41:21">: <expr pos:start="41:21" pos:end="41:21"><name pos:start="41:21" pos:end="41:21">s</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function pos:start="44:1" pos:end="74:1"><type pos:start="44:1" pos:end="44:4"><name pos:start="44:1" pos:end="44:4">void</name></type> <name pos:start="44:6" pos:end="44:11">tarjin</name><parameter_list pos:start="44:12" pos:end="44:26">(<parameter pos:start="44:13" pos:end="44:17"><decl pos:start="44:13" pos:end="44:17"><type pos:start="44:13" pos:end="44:17"><name pos:start="44:13" pos:end="44:15">int</name></type> <name pos:start="44:17" pos:end="44:17">u</name></decl></parameter>, <parameter pos:start="44:20" pos:end="44:25"><decl pos:start="44:20" pos:end="44:25"><type pos:start="44:20" pos:end="44:25"><name pos:start="44:20" pos:end="44:22">int</name></type> <name pos:start="44:24" pos:end="44:25">fa</name></decl></parameter>)</parameter_list>
<block pos:start="45:1" pos:end="74:1">{<block_content pos:start="46:5" pos:end="73:5">
    <expr_stmt pos:start="46:5" pos:end="46:30"><expr pos:start="46:5" pos:end="46:29"><name pos:start="46:5" pos:end="46:10"><name pos:start="46:5" pos:end="46:7">dfn</name><index pos:start="46:8" pos:end="46:10">[<expr pos:start="46:9" pos:end="46:9"><name pos:start="46:9" pos:end="46:9">u</name></expr>]</index></name> <operator pos:start="46:12" pos:end="46:12">=</operator> <name pos:start="46:14" pos:end="46:19"><name pos:start="46:14" pos:end="46:16">low</name><index pos:start="46:17" pos:end="46:19">[<expr pos:start="46:18" pos:end="46:18"><name pos:start="46:18" pos:end="46:18">u</name></expr>]</index></name> <operator pos:start="46:21" pos:end="46:21">=</operator> <operator pos:start="46:23" pos:end="46:24">++</operator><name pos:start="46:25" pos:end="46:29">times</name></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:14"><expr pos:start="47:5" pos:end="47:13"><call pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:6">.</operator><name pos:start="47:7" pos:end="47:10">push</name></name><argument_list pos:start="47:11" pos:end="47:13">(<argument pos:start="47:12" pos:end="47:12"><expr pos:start="47:12" pos:end="47:12"><name pos:start="47:12" pos:end="47:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="48:5" pos:end="60:5">for <control pos:start="48:9" pos:end="48:40">(<init pos:start="48:10" pos:end="48:22"><decl pos:start="48:10" pos:end="48:21"><type pos:start="48:10" pos:end="48:12"><name pos:start="48:10" pos:end="48:12">int</name></type> <name pos:start="48:14" pos:end="48:14">i</name> <init pos:start="48:16" pos:end="48:21">= <expr pos:start="48:18" pos:end="48:21"><name pos:start="48:18" pos:end="48:21"><name pos:start="48:18" pos:end="48:18">h</name><index pos:start="48:19" pos:end="48:21">[<expr pos:start="48:20" pos:end="48:20"><name pos:start="48:20" pos:end="48:20">u</name></expr>]</index></name></expr></init></decl>;</init> <condition pos:start="48:24" pos:end="48:25"><expr pos:start="48:24" pos:end="48:24"><name pos:start="48:24" pos:end="48:24">i</name></expr>;</condition> <incr pos:start="48:27" pos:end="48:39"><expr pos:start="48:27" pos:end="48:39"><name pos:start="48:27" pos:end="48:27">i</name> <operator pos:start="48:29" pos:end="48:29">=</operator> <name pos:start="48:31" pos:end="48:34"><name pos:start="48:31" pos:end="48:31">e</name><index pos:start="48:32" pos:end="48:34">[<expr pos:start="48:33" pos:end="48:33"><name pos:start="48:33" pos:end="48:33">i</name></expr>]</index></name><operator pos:start="48:35" pos:end="48:35">.</operator><name pos:start="48:36" pos:end="48:39">next</name></expr></incr>)</control>
    <block pos:start="49:5" pos:end="60:5">{<block_content pos:start="50:9" pos:end="59:9">
        <decl_stmt pos:start="50:9" pos:end="50:23"><decl pos:start="50:9" pos:end="50:22"><type pos:start="50:9" pos:end="50:11"><name pos:start="50:9" pos:end="50:11">int</name></type> <name pos:start="50:13" pos:end="50:13">v</name> <init pos:start="50:15" pos:end="50:22">= <expr pos:start="50:17" pos:end="50:22"><name pos:start="50:17" pos:end="50:20"><name pos:start="50:17" pos:end="50:17">e</name><index pos:start="50:18" pos:end="50:20">[<expr pos:start="50:19" pos:end="50:19"><name pos:start="50:19" pos:end="50:19">i</name></expr>]</index></name><operator pos:start="50:21" pos:end="50:21">.</operator><name pos:start="50:22" pos:end="50:22">v</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:19"><name pos:start="51:14" pos:end="51:16">dfn</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">v</name></expr>]</index></name></expr>)</condition>
        <block pos:start="52:9" pos:end="55:9">{<block_content pos:start="53:13" pos:end="54:41">
            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><call pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:18">tarjin</name><argument_list pos:start="53:19" pos:end="53:24">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">v</name></expr></argument>, <argument pos:start="53:23" pos:end="53:23"><expr pos:start="53:23" pos:end="53:23"><name pos:start="53:23" pos:end="53:23">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="54:13" pos:end="54:41"><expr pos:start="54:13" pos:end="54:40"><name pos:start="54:13" pos:end="54:18"><name pos:start="54:13" pos:end="54:15">low</name><index pos:start="54:16" pos:end="54:18">[<expr pos:start="54:17" pos:end="54:17"><name pos:start="54:17" pos:end="54:17">u</name></expr>]</index></name> <operator pos:start="54:20" pos:end="54:20">=</operator> <call pos:start="54:22" pos:end="54:40"><name pos:start="54:22" pos:end="54:24">min</name><argument_list pos:start="54:25" pos:end="54:40">(<argument pos:start="54:26" pos:end="54:31"><expr pos:start="54:26" pos:end="54:31"><name pos:start="54:26" pos:end="54:31"><name pos:start="54:26" pos:end="54:28">low</name><index pos:start="54:29" pos:end="54:31">[<expr pos:start="54:30" pos:end="54:30"><name pos:start="54:30" pos:end="54:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="54:34" pos:end="54:39"><expr pos:start="54:34" pos:end="54:39"><name pos:start="54:34" pos:end="54:39"><name pos:start="54:34" pos:end="54:36">low</name><index pos:start="54:37" pos:end="54:39">[<expr pos:start="54:38" pos:end="54:38"><name pos:start="54:38" pos:end="54:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif" pos:start="56:9" pos:end="59:9">else if <condition pos:start="56:17" pos:end="56:44">(<expr pos:start="56:18" pos:end="56:43"><name pos:start="56:18" pos:end="56:23"><name pos:start="56:18" pos:end="56:20">dfn</name><index pos:start="56:21" pos:end="56:23">[<expr pos:start="56:22" pos:end="56:22"><name pos:start="56:22" pos:end="56:22">v</name></expr>]</index></name> <operator pos:start="56:25" pos:end="56:25">&lt;</operator> <name pos:start="56:27" pos:end="56:32"><name pos:start="56:27" pos:end="56:29">dfn</name><index pos:start="56:30" pos:end="56:32">[<expr pos:start="56:31" pos:end="56:31"><name pos:start="56:31" pos:end="56:31">u</name></expr>]</index></name> <operator pos:start="56:34" pos:end="56:35">&amp;&amp;</operator> <name pos:start="56:37" pos:end="56:37">v</name> <operator pos:start="56:39" pos:end="56:40">!=</operator> <name pos:start="56:42" pos:end="56:43">fa</name></expr>)</condition>
        <block pos:start="57:9" pos:end="59:9">{<block_content pos:start="58:13" pos:end="58:41">
            <expr_stmt pos:start="58:13" pos:end="58:41"><expr pos:start="58:13" pos:end="58:40"><name pos:start="58:13" pos:end="58:18"><name pos:start="58:13" pos:end="58:15">low</name><index pos:start="58:16" pos:end="58:18">[<expr pos:start="58:17" pos:end="58:17"><name pos:start="58:17" pos:end="58:17">u</name></expr>]</index></name> <operator pos:start="58:20" pos:end="58:20">=</operator> <call pos:start="58:22" pos:end="58:40"><name pos:start="58:22" pos:end="58:24">min</name><argument_list pos:start="58:25" pos:end="58:40">(<argument pos:start="58:26" pos:end="58:31"><expr pos:start="58:26" pos:end="58:31"><name pos:start="58:26" pos:end="58:31"><name pos:start="58:26" pos:end="58:28">low</name><index pos:start="58:29" pos:end="58:31">[<expr pos:start="58:30" pos:end="58:30"><name pos:start="58:30" pos:end="58:30">u</name></expr>]</index></name></expr></argument>, <argument pos:start="58:34" pos:end="58:39"><expr pos:start="58:34" pos:end="58:39"><name pos:start="58:34" pos:end="58:39"><name pos:start="58:34" pos:end="58:36">dfn</name><index pos:start="58:37" pos:end="58:39">[<expr pos:start="58:38" pos:end="58:38"><name pos:start="58:38" pos:end="58:38">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="73:5">if <condition pos:start="61:8" pos:end="61:25">(<expr pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:11">dfn</name><index pos:start="61:12" pos:end="61:14">[<expr pos:start="61:13" pos:end="61:13"><name pos:start="61:13" pos:end="61:13">u</name></expr>]</index></name> <operator pos:start="61:16" pos:end="61:17">==</operator> <name pos:start="61:19" pos:end="61:24"><name pos:start="61:19" pos:end="61:21">low</name><index pos:start="61:22" pos:end="61:24">[<expr pos:start="61:23" pos:end="61:23"><name pos:start="61:23" pos:end="61:23">u</name></expr>]</index></name></expr>)</condition>
    <block pos:start="62:5" pos:end="73:5">{<block_content pos:start="63:9" pos:end="72:9">
        <expr_stmt pos:start="63:9" pos:end="63:14"><expr pos:start="63:9" pos:end="63:13"><name pos:start="63:9" pos:end="63:11">cnt</name><operator pos:start="63:12" pos:end="63:13">++</operator></expr>;</expr_stmt>
        <while pos:start="64:9" pos:end="72:9">while <condition pos:start="64:15" pos:end="64:17">(<expr pos:start="64:16" pos:end="64:16"><literal type="number" pos:start="64:16" pos:end="64:16">1</literal></expr>)</condition>
        <block pos:start="65:9" pos:end="72:9">{<block_content pos:start="66:13" pos:end="71:22">
            <decl_stmt pos:start="66:13" pos:end="66:28"><decl pos:start="66:13" pos:end="66:27"><type pos:start="66:13" pos:end="66:15"><name pos:start="66:13" pos:end="66:15">int</name></type> <name pos:start="66:17" pos:end="66:17">x</name> <init pos:start="66:19" pos:end="66:27">= <expr pos:start="66:21" pos:end="66:27"><call pos:start="66:21" pos:end="66:27"><name pos:start="66:21" pos:end="66:25"><name pos:start="66:21" pos:end="66:21">s</name><operator pos:start="66:22" pos:end="66:22">.</operator><name pos:start="66:23" pos:end="66:25">top</name></name><argument_list pos:start="66:26" pos:end="66:27">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:14">bs</name><index pos:start="67:15" pos:end="67:19">[<expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">cnt</name></expr>]</index></name><operator pos:start="67:20" pos:end="67:20">.</operator><call pos:start="67:21" pos:end="67:32"><name pos:start="67:21" pos:end="67:29">push_back</name><argument_list pos:start="67:30" pos:end="67:32">(<argument pos:start="67:31" pos:end="67:31"><expr pos:start="67:31" pos:end="67:31"><name pos:start="67:31" pos:end="67:31">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:28"><expr pos:start="68:13" pos:end="68:27"><name pos:start="68:13" pos:end="68:21"><name pos:start="68:13" pos:end="68:18">belong</name><index pos:start="68:19" pos:end="68:21">[<expr pos:start="68:20" pos:end="68:20"><name pos:start="68:20" pos:end="68:20">x</name></expr>]</index></name> <operator pos:start="68:23" pos:end="68:23">=</operator> <name pos:start="68:25" pos:end="68:27">cnt</name></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:19"><call pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:17"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:14">.</operator><name pos:start="69:15" pos:end="69:17">pop</name></name><argument_list pos:start="69:18" pos:end="69:19">()</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="70:13" pos:end="71:22"><if pos:start="70:13" pos:end="71:22">if <condition pos:start="70:16" pos:end="70:23">(<expr pos:start="70:17" pos:end="70:22"><name pos:start="70:17" pos:end="70:17">x</name> <operator pos:start="70:19" pos:end="70:20">==</operator> <name pos:start="70:22" pos:end="70:22">u</name></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:22"><block_content pos:start="71:17" pos:end="71:22">
                <break pos:start="71:17" pos:end="71:22">break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="76:1" pos:end="112:1"><type pos:start="76:1" pos:end="76:6"><name pos:start="76:1" pos:end="76:6">signed</name></type> <name pos:start="76:8" pos:end="76:11">main</name><parameter_list pos:start="76:12" pos:end="76:13">()</parameter_list>
<block pos:start="77:1" pos:end="112:1">{<block_content pos:start="79:5" pos:end="111:13">
    
    <expr_stmt pos:start="79:5" pos:end="79:27"><expr pos:start="79:5" pos:end="79:14"><name pos:start="79:5" pos:end="79:5">n</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <call pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:12">read</name><argument_list pos:start="79:13" pos:end="79:14">()</argument_list></call></expr><operator pos:start="79:15" pos:end="79:15">,</operator> <expr pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:17">m</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <call pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:24">read</name><argument_list pos:start="79:25" pos:end="79:26">()</argument_list></call></expr>;</expr_stmt>
    <for pos:start="80:5" pos:end="85:5">for <control pos:start="80:9" pos:end="80:32">(<init pos:start="80:10" pos:end="80:19"><decl pos:start="80:10" pos:end="80:18"><type pos:start="80:10" pos:end="80:12"><name pos:start="80:10" pos:end="80:12">int</name></type> <name pos:start="80:14" pos:end="80:14">i</name> <init pos:start="80:16" pos:end="80:18">= <expr pos:start="80:18" pos:end="80:18"><literal type="number" pos:start="80:18" pos:end="80:18">1</literal></expr></init></decl>;</init> <condition pos:start="80:21" pos:end="80:27"><expr pos:start="80:21" pos:end="80:26"><name pos:start="80:21" pos:end="80:21">i</name> <operator pos:start="80:23" pos:end="80:24">&lt;=</operator> <name pos:start="80:26" pos:end="80:26">m</name></expr>;</condition> <incr pos:start="80:29" pos:end="80:31"><expr pos:start="80:29" pos:end="80:31"><operator pos:start="80:29" pos:end="80:30">++</operator><name pos:start="80:31" pos:end="80:31">i</name></expr></incr>)</control>
    <block pos:start="81:5" pos:end="85:5">{<block_content pos:start="82:9" pos:end="84:21">
        <decl_stmt pos:start="82:9" pos:end="82:35"><decl pos:start="82:9" pos:end="82:22"><type pos:start="82:9" pos:end="82:11"><name pos:start="82:9" pos:end="82:11">int</name></type> <name pos:start="82:13" pos:end="82:13">u</name> <init pos:start="82:15" pos:end="82:22">= <expr pos:start="82:17" pos:end="82:22"><call pos:start="82:17" pos:end="82:22"><name pos:start="82:17" pos:end="82:20">read</name><argument_list pos:start="82:21" pos:end="82:22">()</argument_list></call></expr></init></decl>, <decl pos:start="82:25" pos:end="82:34"><type ref="prev" pos:start="82:9" pos:end="82:11"/><name pos:start="82:25" pos:end="82:25">v</name> <init pos:start="82:27" pos:end="82:34">= <expr pos:start="82:29" pos:end="82:34"><call pos:start="82:29" pos:end="82:34"><name pos:start="82:29" pos:end="82:32">read</name><argument_list pos:start="82:33" pos:end="82:34">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><call pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:14">insert</name><argument_list pos:start="83:15" pos:end="83:20">(<argument pos:start="83:16" pos:end="83:16"><expr pos:start="83:16" pos:end="83:16"><name pos:start="83:16" pos:end="83:16">u</name></expr></argument>, <argument pos:start="83:19" pos:end="83:19"><expr pos:start="83:19" pos:end="83:19"><name pos:start="83:19" pos:end="83:19">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="84:9" pos:end="84:21"><expr pos:start="84:9" pos:end="84:20"><call pos:start="84:9" pos:end="84:20"><name pos:start="84:9" pos:end="84:14">insert</name><argument_list pos:start="84:15" pos:end="84:20">(<argument pos:start="84:16" pos:end="84:16"><expr pos:start="84:16" pos:end="84:16"><name pos:start="84:16" pos:end="84:16">v</name></expr></argument>, <argument pos:start="84:19" pos:end="84:19"><expr pos:start="84:19" pos:end="84:19"><name pos:start="84:19" pos:end="84:19">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for pos:start="86:5" pos:end="92:5">for <control pos:start="86:9" pos:end="86:31">(<init pos:start="86:10" pos:end="86:19"><decl pos:start="86:10" pos:end="86:18"><type pos:start="86:10" pos:end="86:12"><name pos:start="86:10" pos:end="86:12">int</name></type> <name pos:start="86:14" pos:end="86:14">i</name> <init pos:start="86:16" pos:end="86:18">= <expr pos:start="86:18" pos:end="86:18"><literal type="number" pos:start="86:18" pos:end="86:18">0</literal></expr></init></decl>;</init> <condition pos:start="86:21" pos:end="86:26"><expr pos:start="86:21" pos:end="86:25"><name pos:start="86:21" pos:end="86:21">i</name> <operator pos:start="86:23" pos:end="86:23">&lt;</operator> <name pos:start="86:25" pos:end="86:25">n</name></expr>;</condition> <incr pos:start="86:28" pos:end="86:30"><expr pos:start="86:28" pos:end="86:30"><operator pos:start="86:28" pos:end="86:29">++</operator><name pos:start="86:30" pos:end="86:30">i</name></expr></incr>)</control>
    <block pos:start="87:5" pos:end="92:5">{<block_content pos:start="88:9" pos:end="91:9">
        <if_stmt pos:start="88:9" pos:end="91:9"><if pos:start="88:9" pos:end="91:9">if <condition pos:start="88:12" pos:end="88:20">(<expr pos:start="88:13" pos:end="88:19"><operator pos:start="88:13" pos:end="88:13">!</operator><name pos:start="88:14" pos:end="88:19"><name pos:start="88:14" pos:end="88:16">dfn</name><index pos:start="88:17" pos:end="88:19">[<expr pos:start="88:18" pos:end="88:18"><name pos:start="88:18" pos:end="88:18">i</name></expr>]</index></name></expr>)</condition>
        <block pos:start="89:9" pos:end="91:9">{<block_content pos:start="90:13" pos:end="90:26">
            <expr_stmt pos:start="90:13" pos:end="90:26"><expr pos:start="90:13" pos:end="90:25"><call pos:start="90:13" pos:end="90:25"><name pos:start="90:13" pos:end="90:18">tarjin</name><argument_list pos:start="90:19" pos:end="90:25">(<argument pos:start="90:20" pos:end="90:20"><expr pos:start="90:20" pos:end="90:20"><name pos:start="90:20" pos:end="90:20">i</name></expr></argument>, <argument pos:start="90:23" pos:end="90:24"><expr pos:start="90:23" pos:end="90:24"><operator pos:start="90:23" pos:end="90:23">-</operator><literal type="number" pos:start="90:24" pos:end="90:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for pos:start="93:5" pos:end="109:5">for <control pos:start="93:9" pos:end="93:34">(<init pos:start="93:10" pos:end="93:19"><decl pos:start="93:10" pos:end="93:18"><type pos:start="93:10" pos:end="93:12"><name pos:start="93:10" pos:end="93:12">int</name></type> <name pos:start="93:14" pos:end="93:14">i</name> <init pos:start="93:16" pos:end="93:18">= <expr pos:start="93:18" pos:end="93:18"><literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr></init></decl>;</init> <condition pos:start="93:21" pos:end="93:29"><expr pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:21">i</name> <operator pos:start="93:23" pos:end="93:24">&lt;=</operator> <name pos:start="93:26" pos:end="93:28">cnt</name></expr>;</condition> <incr pos:start="93:31" pos:end="93:33"><expr pos:start="93:31" pos:end="93:33"><operator pos:start="93:31" pos:end="93:32">++</operator><name pos:start="93:33" pos:end="93:33">i</name></expr></incr>)</control>
    <block pos:start="94:5" pos:end="109:5">{<block_content pos:start="95:9" pos:end="108:23">
        <decl_stmt pos:start="95:9" pos:end="95:40"><decl pos:start="95:9" pos:end="95:19"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:15">sum</name> <init pos:start="95:17" pos:end="95:19">= <expr pos:start="95:19" pos:end="95:19"><literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr></init></decl>, <decl pos:start="95:22" pos:end="95:39"><type ref="prev" pos:start="95:9" pos:end="95:11"/><name pos:start="95:22" pos:end="95:24">tot</name> <init pos:start="95:26" pos:end="95:39">= <expr pos:start="95:28" pos:end="95:39"><name pos:start="95:28" pos:end="95:32"><name pos:start="95:28" pos:end="95:29">bs</name><index pos:start="95:30" pos:end="95:32">[<expr pos:start="95:31" pos:end="95:31"><name pos:start="95:31" pos:end="95:31">i</name></expr>]</index></name><operator pos:start="95:33" pos:end="95:33">.</operator><call pos:start="95:34" pos:end="95:39"><name pos:start="95:34" pos:end="95:37">size</name><argument_list pos:start="95:38" pos:end="95:39">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for pos:start="96:9" pos:end="104:9">for <control pos:start="96:13" pos:end="96:37">(<init pos:start="96:14" pos:end="96:23"><decl pos:start="96:14" pos:end="96:22"><type pos:start="96:14" pos:end="96:16"><name pos:start="96:14" pos:end="96:16">int</name></type> <name pos:start="96:18" pos:end="96:18">j</name> <init pos:start="96:20" pos:end="96:22">= <expr pos:start="96:22" pos:end="96:22"><literal type="number" pos:start="96:22" pos:end="96:22">0</literal></expr></init></decl>;</init> <condition pos:start="96:25" pos:end="96:32"><expr pos:start="96:25" pos:end="96:31"><name pos:start="96:25" pos:end="96:25">j</name> <operator pos:start="96:27" pos:end="96:27">&lt;</operator> <name pos:start="96:29" pos:end="96:31">tot</name></expr>;</condition> <incr pos:start="96:34" pos:end="96:36"><expr pos:start="96:34" pos:end="96:36"><operator pos:start="96:34" pos:end="96:35">++</operator><name pos:start="96:36" pos:end="96:36">j</name></expr></incr>)</control>
        <block pos:start="97:9" pos:end="104:9">{<block_content pos:start="98:13" pos:end="103:13">
            <decl_stmt pos:start="98:13" pos:end="98:29"><decl pos:start="98:13" pos:end="98:28"><type pos:start="98:13" pos:end="98:15"><name pos:start="98:13" pos:end="98:15">int</name></type> <name pos:start="98:17" pos:end="98:17">u</name> <init pos:start="98:19" pos:end="98:28">= <expr pos:start="98:21" pos:end="98:28"><name pos:start="98:21" pos:end="98:28"><name pos:start="98:21" pos:end="98:22">bs</name><index pos:start="98:23" pos:end="98:25">[<expr pos:start="98:24" pos:end="98:24"><name pos:start="98:24" pos:end="98:24">i</name></expr>]</index><index pos:start="98:26" pos:end="98:28">[<expr pos:start="98:27" pos:end="98:27"><name pos:start="98:27" pos:end="98:27">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for pos:start="99:13" pos:end="103:13">for <control pos:start="99:17" pos:end="99:48">(<init pos:start="99:18" pos:end="99:30"><decl pos:start="99:18" pos:end="99:29"><type pos:start="99:18" pos:end="99:20"><name pos:start="99:18" pos:end="99:20">int</name></type> <name pos:start="99:22" pos:end="99:22">k</name> <init pos:start="99:24" pos:end="99:29">= <expr pos:start="99:26" pos:end="99:29"><name pos:start="99:26" pos:end="99:29"><name pos:start="99:26" pos:end="99:26">h</name><index pos:start="99:27" pos:end="99:29">[<expr pos:start="99:28" pos:end="99:28"><name pos:start="99:28" pos:end="99:28">u</name></expr>]</index></name></expr></init></decl>;</init> <condition pos:start="99:32" pos:end="99:33"><expr pos:start="99:32" pos:end="99:32"><name pos:start="99:32" pos:end="99:32">k</name></expr>;</condition> <incr pos:start="99:35" pos:end="99:47"><expr pos:start="99:35" pos:end="99:47"><name pos:start="99:35" pos:end="99:35">k</name> <operator pos:start="99:37" pos:end="99:37">=</operator> <name pos:start="99:39" pos:end="99:42"><name pos:start="99:39" pos:end="99:39">e</name><index pos:start="99:40" pos:end="99:42">[<expr pos:start="99:41" pos:end="99:41"><name pos:start="99:41" pos:end="99:41">k</name></expr>]</index></name><operator pos:start="99:43" pos:end="99:43">.</operator><name pos:start="99:44" pos:end="99:47">next</name></expr></incr>)</control>
            <block pos:start="100:13" pos:end="103:13">{<block_content pos:start="101:17" pos:end="102:26">
                <if_stmt pos:start="101:17" pos:end="102:26"><if pos:start="101:17" pos:end="102:26">if <condition pos:start="101:20" pos:end="101:40">(<expr pos:start="101:21" pos:end="101:39"><name pos:start="101:21" pos:end="101:34"><name pos:start="101:21" pos:end="101:26">belong</name><index pos:start="101:27" pos:end="101:34">[<expr pos:start="101:28" pos:end="101:33"><name pos:start="101:28" pos:end="101:31"><name pos:start="101:28" pos:end="101:28">e</name><index pos:start="101:29" pos:end="101:31">[<expr pos:start="101:30" pos:end="101:30"><name pos:start="101:30" pos:end="101:30">k</name></expr>]</index></name><operator pos:start="101:32" pos:end="101:32">.</operator><name pos:start="101:33" pos:end="101:33">v</name></expr>]</index></name> <operator pos:start="101:36" pos:end="101:37">==</operator> <name pos:start="101:39" pos:end="101:39">i</name></expr>)</condition><block type="pseudo" pos:start="102:21" pos:end="102:26"><block_content pos:start="102:21" pos:end="102:26">
                    <expr_stmt pos:start="102:21" pos:end="102:26"><expr pos:start="102:21" pos:end="102:25"><operator pos:start="102:21" pos:end="102:22">++</operator><name pos:start="102:23" pos:end="102:25">sum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <if_stmt pos:start="105:9" pos:end="106:21"><if pos:start="105:9" pos:end="106:21">if <condition pos:start="105:12" pos:end="105:27">(<expr pos:start="105:13" pos:end="105:26"><literal type="number" pos:start="105:13" pos:end="105:13">2</literal> <operator pos:start="105:15" pos:end="105:15">*</operator> <name pos:start="105:17" pos:end="105:19">tot</name> <operator pos:start="105:21" pos:end="105:22">==</operator> <name pos:start="105:24" pos:end="105:26">sum</name></expr>)</condition><block type="pseudo" pos:start="106:13" pos:end="106:21"><block_content pos:start="106:13" pos:end="106:21">
            <continue pos:start="106:13" pos:end="106:21">continue;</continue></block_content></block></if></if_stmt>
        
        <expr_stmt pos:start="108:9" pos:end="108:23"><expr pos:start="108:9" pos:end="108:22"><name pos:start="108:9" pos:end="108:11">ans</name> <operator pos:start="108:13" pos:end="108:14">+=</operator> <name pos:start="108:16" pos:end="108:18">sum</name> <operator pos:start="108:20" pos:end="108:20">/</operator> <literal type="number" pos:start="108:22" pos:end="108:22">2</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="110:5" pos:end="110:36"><expr pos:start="110:5" pos:end="110:35"><call pos:start="110:5" pos:end="110:35"><name pos:start="110:5" pos:end="110:10">printf</name><argument_list pos:start="110:11" pos:end="110:35">(<argument pos:start="110:12" pos:end="110:20"><expr pos:start="110:12" pos:end="110:20"><literal type="string" pos:start="110:12" pos:end="110:20">"%d %d\n"</literal></expr></argument>, <argument pos:start="110:23" pos:end="110:29"><expr pos:start="110:23" pos:end="110:29"><name pos:start="110:23" pos:end="110:25">cnt</name> <operator pos:start="110:27" pos:end="110:27">-</operator> <literal type="number" pos:start="110:29" pos:end="110:29">1</literal></expr></argument>, <argument pos:start="110:32" pos:end="110:34"><expr pos:start="110:32" pos:end="110:34"><name pos:start="110:32" pos:end="110:34">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
