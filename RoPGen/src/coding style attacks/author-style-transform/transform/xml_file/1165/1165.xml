<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1165/1165.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<typedef pos:start="3:1" pos:end="3:21">typedef <type pos:start="3:9" pos:end="3:17"><name pos:start="3:9" pos:end="3:12">long</name> <name pos:start="3:14" pos:end="3:17">long</name></type> <name pos:start="3:19" pos:end="3:20">ll</name>;</typedef>
<decl_stmt pos:start="4:1" pos:end="4:13"><decl pos:start="4:1" pos:end="4:12"><type pos:start="4:1" pos:end="4:2"><name pos:start="4:1" pos:end="4:2">ll</name></type> <name pos:start="4:4" pos:end="4:12"><name pos:start="4:4" pos:end="4:4">a</name><index pos:start="4:5" pos:end="4:12">[<expr pos:start="4:6" pos:end="4:11"><literal type="number" pos:start="4:6" pos:end="4:11">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:22"><decl pos:start="5:1" pos:end="5:21"><type pos:start="5:1" pos:end="5:17"><name pos:start="5:1" pos:end="5:17"><name pos:start="5:1" pos:end="5:3">map</name><argument_list type="generic" pos:start="5:4" pos:end="5:17">&lt;<argument pos:start="5:5" pos:end="5:6"><expr pos:start="5:5" pos:end="5:6"><name pos:start="5:5" pos:end="5:6">ll</name></expr></argument>,<argument pos:start="5:8" pos:end="5:15"><expr pos:start="5:8" pos:end="5:15"><name pos:start="5:8" pos:end="5:15"><name pos:start="5:8" pos:end="5:10">set</name><argument_list type="generic" pos:start="5:11" pos:end="5:15">&lt;<argument pos:start="5:12" pos:end="5:14"><expr pos:start="5:12" pos:end="5:14"><name pos:start="5:12" pos:end="5:14">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:start="5:19" pos:end="5:21">cnt</name></decl>;</decl_stmt>
<decl_stmt pos:start="6:1" pos:end="6:17"><decl pos:start="6:1" pos:end="6:16"><type pos:start="6:1" pos:end="6:4"><name pos:start="6:1" pos:end="6:4">bool</name></type> <name pos:start="6:6" pos:end="6:16"><name pos:start="6:6" pos:end="6:8">vis</name><index pos:start="6:9" pos:end="6:16">[<expr pos:start="6:10" pos:end="6:15"><literal type="number" pos:start="6:10" pos:end="6:15">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:6"><decl pos:start="7:1" pos:end="7:5"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:5">n</name></decl>;</decl_stmt>
<decl_stmt pos:start="8:1" pos:end="8:10"><decl pos:start="8:1" pos:end="8:9"><type pos:start="8:1" pos:end="8:3"><name pos:start="8:1" pos:end="8:3">int</name></type> <name pos:start="8:5" pos:end="8:7">ans</name><init pos:start="8:8" pos:end="8:9">=<expr pos:start="8:9" pos:end="8:9"><literal type="number" pos:start="8:9" pos:end="8:9">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="9:1" pos:end="9:11"><decl pos:start="9:1" pos:end="9:10"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:8">stop</name><init pos:start="9:9" pos:end="9:10">=<expr pos:start="9:10" pos:end="9:10"><literal type="number" pos:start="9:10" pos:end="9:10">0</literal></expr></init></decl>;</decl_stmt>
<function pos:start="10:1" pos:end="23:1"><type pos:start="10:1" pos:end="10:4"><name pos:start="10:1" pos:end="10:4">void</name></type> <name pos:start="10:6" pos:end="10:11">arrive</name><parameter_list pos:start="10:12" pos:end="10:17">(<parameter pos:start="10:13" pos:end="10:16"><decl pos:start="10:13" pos:end="10:16"><type pos:start="10:13" pos:end="10:14"><name pos:start="10:13" pos:end="10:14">ll</name></type> <name pos:start="10:16" pos:end="10:16">x</name></decl></parameter>)</parameter_list>
<block pos:start="11:1" pos:end="23:1">{<block_content pos:start="12:5" pos:end="22:13">
    <decl_stmt pos:start="12:5" pos:end="12:24"><decl pos:start="12:5" pos:end="12:23"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">h</name><init pos:start="12:10" pos:end="12:23">=<expr pos:start="12:11" pos:end="12:23"><name pos:start="12:11" pos:end="12:16"><name pos:start="12:11" pos:end="12:13">cnt</name><index pos:start="12:14" pos:end="12:16">[<expr pos:start="12:15" pos:end="12:15"><name pos:start="12:15" pos:end="12:15">x</name></expr>]</index></name><operator pos:start="12:17" pos:end="12:17">.</operator><call pos:start="12:18" pos:end="12:23"><name pos:start="12:18" pos:end="12:21">size</name><argument_list pos:start="12:22" pos:end="12:23">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="16:5">if<condition pos:start="13:7" pos:end="13:14">(<expr pos:start="13:8" pos:end="13:13"><name pos:start="13:8" pos:end="13:11">stop</name><operator pos:start="13:12" pos:end="13:12">&gt;</operator><name pos:start="13:13" pos:end="13:13">x</name></expr>)</condition>
    <block pos:start="14:5" pos:end="16:5">{<block_content pos:start="15:9" pos:end="15:24">
        <expr_stmt pos:start="15:9" pos:end="15:24"><expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:11">ans</name><operator pos:start="15:12" pos:end="15:13">+=</operator><operator pos:start="15:14" pos:end="15:14">(</operator><name pos:start="15:15" pos:end="15:18">stop</name><operator pos:start="15:19" pos:end="15:19">-</operator><name pos:start="15:20" pos:end="15:20">x</name><operator pos:start="15:21" pos:end="15:21">)</operator><operator pos:start="15:22" pos:end="15:22">*</operator><literal type="number" pos:start="15:23" pos:end="15:23">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else pos:start="16:6" pos:end="19:5">else
    <block pos:start="17:5" pos:end="19:5">{<block_content pos:start="18:9" pos:end="18:24">
        <expr_stmt pos:start="18:9" pos:end="18:24"><expr pos:start="18:9" pos:end="18:23"><name pos:start="18:9" pos:end="18:11">ans</name><operator pos:start="18:12" pos:end="18:13">+=</operator><operator pos:start="18:14" pos:end="18:14">(</operator><name pos:start="18:15" pos:end="18:15">x</name><operator pos:start="18:16" pos:end="18:16">-</operator><name pos:start="18:17" pos:end="18:20">stop</name><operator pos:start="18:21" pos:end="18:21">)</operator><operator pos:start="18:22" pos:end="18:22">*</operator><literal type="number" pos:start="18:23" pos:end="18:23">5</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:11"><expr pos:start="20:5" pos:end="20:10"><name pos:start="20:5" pos:end="20:8">stop</name><operator pos:start="20:9" pos:end="20:9">=</operator><name pos:start="20:10" pos:end="20:10">x</name></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:11"><expr pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:7">ans</name><operator pos:start="21:8" pos:end="21:9">+=</operator><literal type="number" pos:start="21:10" pos:end="21:10">3</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:13"><expr pos:start="22:5" pos:end="22:12"><name pos:start="22:5" pos:end="22:7">ans</name><operator pos:start="22:8" pos:end="22:9">+=</operator><name pos:start="22:10" pos:end="22:10">h</name><operator pos:start="22:11" pos:end="22:11">*</operator><literal type="number" pos:start="22:12" pos:end="22:12">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="24:1" pos:end="51:1"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:8">main</name><parameter_list pos:start="24:9" pos:end="24:10">()</parameter_list>
<block pos:start="25:1" pos:end="51:1">{<block_content pos:start="26:5" pos:end="50:16">
    <expr_stmt pos:start="26:5" pos:end="26:37"><expr pos:start="26:5" pos:end="26:36"><call pos:start="26:5" pos:end="26:36"><name pos:start="26:5" pos:end="26:11">freopen</name><argument_list pos:start="26:12" pos:end="26:36">(<argument pos:start="26:13" pos:end="26:25"><expr pos:start="26:13" pos:end="26:25"><literal type="string" pos:start="26:13" pos:end="26:25">"elevator.in"</literal></expr></argument>,<argument pos:start="26:27" pos:end="26:29"><expr pos:start="26:27" pos:end="26:29"><literal type="string" pos:start="26:27" pos:end="26:29">"r"</literal></expr></argument>,<argument pos:start="26:31" pos:end="26:35"><expr pos:start="26:31" pos:end="26:35"><name pos:start="26:31" pos:end="26:35">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><call pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:11">freopen</name><argument_list pos:start="27:12" pos:end="27:38">(<argument pos:start="27:13" pos:end="27:26"><expr pos:start="27:13" pos:end="27:26"><literal type="string" pos:start="27:13" pos:end="27:26">"elevator.out"</literal></expr></argument>,<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><literal type="string" pos:start="27:28" pos:end="27:30">"w"</literal></expr></argument>,<argument pos:start="27:32" pos:end="27:37"><expr pos:start="27:32" pos:end="27:37"><name pos:start="27:32" pos:end="27:37">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:11"><expr pos:start="28:5" pos:end="28:10"><name pos:start="28:5" pos:end="28:7">cin</name><operator pos:start="28:8" pos:end="28:9">&gt;&gt;</operator><name pos:start="28:10" pos:end="28:10">n</name></expr>;</expr_stmt>
    <for pos:start="29:5" pos:end="33:5">for<control pos:start="29:8" pos:end="29:25">(<init pos:start="29:9" pos:end="29:16"><decl pos:start="29:9" pos:end="29:15"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:13">i</name><init pos:start="29:14" pos:end="29:15">=<expr pos:start="29:15" pos:end="29:15"><literal type="number" pos:start="29:15" pos:end="29:15">1</literal></expr></init></decl>;</init><condition pos:start="29:17" pos:end="29:21"><expr pos:start="29:17" pos:end="29:20"><name pos:start="29:17" pos:end="29:17">i</name><operator pos:start="29:18" pos:end="29:19">&lt;=</operator><name pos:start="29:20" pos:end="29:20">n</name></expr>;</condition><incr pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><operator pos:start="29:22" pos:end="29:23">++</operator><name pos:start="29:24" pos:end="29:24">i</name></expr></incr>)</control>
    <block pos:start="30:5" pos:end="33:5">{<block_content pos:start="31:9" pos:end="32:28">
        <expr_stmt pos:start="31:9" pos:end="31:18"><expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:11">cin</name><operator pos:start="31:12" pos:end="31:13">&gt;&gt;</operator><name pos:start="31:14" pos:end="31:17"><name pos:start="31:14" pos:end="31:14">a</name><index pos:start="31:15" pos:end="31:17">[<expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:28"><expr pos:start="32:9" pos:end="32:27"><name pos:start="32:9" pos:end="32:17"><name pos:start="32:9" pos:end="32:11">cnt</name><index pos:start="32:12" pos:end="32:17">[<expr pos:start="32:13" pos:end="32:16"><name pos:start="32:13" pos:end="32:16"><name pos:start="32:13" pos:end="32:13">a</name><index pos:start="32:14" pos:end="32:16">[<expr pos:start="32:15" pos:end="32:15"><name pos:start="32:15" pos:end="32:15">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="32:18" pos:end="32:18">.</operator><call pos:start="32:19" pos:end="32:27"><name pos:start="32:19" pos:end="32:24">insert</name><argument_list pos:start="32:25" pos:end="32:27">(<argument pos:start="32:26" pos:end="32:26"><expr pos:start="32:26" pos:end="32:26"><name pos:start="32:26" pos:end="32:26">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt pos:start="34:5" pos:end="34:14"><decl pos:start="34:5" pos:end="34:13"><type pos:start="34:5" pos:end="34:7"><name pos:start="34:5" pos:end="34:7">int</name></type> <name pos:start="34:9" pos:end="34:11">now</name><init pos:start="34:12" pos:end="34:13">=<expr pos:start="34:13" pos:end="34:13"><literal type="number" pos:start="34:13" pos:end="34:13">1</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="35:5" pos:end="48:5">while<condition pos:start="35:10" pos:end="35:16">(<expr pos:start="35:11" pos:end="35:15"><name pos:start="35:11" pos:end="35:13">now</name><operator pos:start="35:14" pos:end="35:14">&lt;</operator><name pos:start="35:15" pos:end="35:15">n</name></expr>)</condition>
    <block pos:start="36:5" pos:end="48:5">{<block_content pos:start="37:9" pos:end="47:14">
        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if<condition pos:start="37:11" pos:end="37:20">(<expr pos:start="37:12" pos:end="37:19"><name pos:start="37:12" pos:end="37:19"><name pos:start="37:12" pos:end="37:14">vis</name><index pos:start="37:15" pos:end="37:19">[<expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">now</name></expr>]</index></name></expr>)</condition>
        <block pos:start="38:9" pos:end="41:9">{<block_content pos:start="39:13" pos:end="40:21">
            <expr_stmt pos:start="39:13" pos:end="39:18"><expr pos:start="39:13" pos:end="39:17"><operator pos:start="39:13" pos:end="39:14">++</operator><name pos:start="39:15" pos:end="39:17">now</name></expr>;</expr_stmt>
            <continue pos:start="40:13" pos:end="40:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <for pos:start="42:9" pos:end="45:9">for<control pos:start="42:12" pos:end="42:32">(<init pos:start="42:13" pos:end="42:31"><decl pos:start="42:13" pos:end="42:31"><type pos:start="42:13" pos:end="42:16"><name pos:start="42:13" pos:end="42:16">auto</name></type> <name pos:start="42:18" pos:end="42:19">it</name><range pos:start="42:20" pos:end="42:31">:<expr pos:start="42:21" pos:end="42:31"><name pos:start="42:21" pos:end="42:31"><name pos:start="42:21" pos:end="42:23">cnt</name><index pos:start="42:24" pos:end="42:31">[<expr pos:start="42:25" pos:end="42:30"><name pos:start="42:25" pos:end="42:30"><name pos:start="42:25" pos:end="42:25">a</name><index pos:start="42:26" pos:end="42:30">[<expr pos:start="42:27" pos:end="42:29"><name pos:start="42:27" pos:end="42:29">now</name></expr>]</index></name></expr>]</index></name></expr></range></decl></init>)</control>
        <block pos:start="43:9" pos:end="45:9">{<block_content pos:start="44:13" pos:end="44:25">
            <expr_stmt pos:start="44:13" pos:end="44:25"><expr pos:start="44:13" pos:end="44:24"><name pos:start="44:13" pos:end="44:19"><name pos:start="44:13" pos:end="44:15">vis</name><index pos:start="44:16" pos:end="44:19">[<expr pos:start="44:17" pos:end="44:18"><name pos:start="44:17" pos:end="44:18">it</name></expr>]</index></name><operator pos:start="44:20" pos:end="44:20">=</operator><literal type="boolean" pos:start="44:21" pos:end="44:24">true</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="46:9" pos:end="46:23"><expr pos:start="46:9" pos:end="46:22"><call pos:start="46:9" pos:end="46:22"><name pos:start="46:9" pos:end="46:14">arrive</name><argument_list pos:start="46:15" pos:end="46:22">(<argument pos:start="46:16" pos:end="46:21"><expr pos:start="46:16" pos:end="46:21"><name pos:start="46:16" pos:end="46:21"><name pos:start="46:16" pos:end="46:16">a</name><index pos:start="46:17" pos:end="46:21">[<expr pos:start="46:18" pos:end="46:20"><name pos:start="46:18" pos:end="46:20">now</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:14"><expr pos:start="47:9" pos:end="47:13"><operator pos:start="47:9" pos:end="47:10">++</operator><name pos:start="47:11" pos:end="47:13">now</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="49:5" pos:end="49:14"><expr pos:start="49:5" pos:end="49:13"><call pos:start="49:5" pos:end="49:13"><name pos:start="49:5" pos:end="49:10">arrive</name><argument_list pos:start="49:11" pos:end="49:13">(<argument pos:start="49:12" pos:end="49:12"><expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:16"><expr pos:start="50:5" pos:end="50:15"><name pos:start="50:5" pos:end="50:8">cout</name><operator pos:start="50:9" pos:end="50:10">&lt;&lt;</operator><name pos:start="50:11" pos:end="50:13">ans</name><operator pos:start="50:14" pos:end="50:14">-</operator><literal type="number" pos:start="50:15" pos:end="50:15">3</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
