<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/879/879.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:20">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:20">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:18">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:18">&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:16">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:16">&lt;cmath&gt;</cpp:file></cpp:include>
<decl_stmt pos:start="5:1" pos:end="5:13"><decl pos:start="5:1" pos:end="5:12"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:5">A</name><index pos:start="5:6" pos:end="5:12">[<expr pos:start="5:7" pos:end="5:11"><literal type="number" pos:start="5:7" pos:end="5:11">10000</literal></expr>]</index></name></decl>;</decl_stmt>
<using pos:start="6:1" pos:end="6:20">using <namespace pos:start="6:7" pos:end="6:20">namespace <name pos:start="6:17" pos:end="6:19">std</name>;</namespace></using>
<function pos:start="7:1" pos:end="24:1"><type pos:start="7:1" pos:end="7:4"><name pos:start="7:1" pos:end="7:4">bool</name></type> <name pos:start="7:6" pos:end="7:8">cmp</name><parameter_list pos:start="7:9" pos:end="7:22">(<parameter pos:start="7:10" pos:end="7:14"><decl pos:start="7:10" pos:end="7:14"><type pos:start="7:10" pos:end="7:14"><name pos:start="7:10" pos:end="7:12">int</name></type> <name pos:start="7:14" pos:end="7:14">a</name></decl></parameter>, <parameter pos:start="7:17" pos:end="7:21"><decl pos:start="7:17" pos:end="7:21"><type pos:start="7:17" pos:end="7:21"><name pos:start="7:17" pos:end="7:19">int</name></type> <name pos:start="7:21" pos:end="7:21">b</name></decl></parameter>)</parameter_list> <block pos:start="7:24" pos:end="24:1">{<block_content pos:start="8:5" pos:end="23:14">
    <decl_stmt pos:start="8:5" pos:end="8:15"><decl pos:start="8:5" pos:end="8:14"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:10">m1</name> <init pos:start="8:12" pos:end="8:14">= <expr pos:start="8:14" pos:end="8:14"><name pos:start="8:14" pos:end="8:14">a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">s1</name> <init pos:start="9:12" pos:end="9:14">= <expr pos:start="9:14" pos:end="9:14"><literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="10:5" pos:end="13:5">while <condition pos:start="10:11" pos:end="10:19">(<expr pos:start="10:12" pos:end="10:18"><name pos:start="10:12" pos:end="10:13">m1</name> <operator pos:start="10:15" pos:end="10:16">!=</operator> <literal type="number" pos:start="10:18" pos:end="10:18">0</literal></expr>)</condition><block pos:start="10:20" pos:end="13:5">{<block_content pos:start="11:9" pos:end="12:17">
        <expr_stmt pos:start="11:9" pos:end="11:22"><expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:10">s1</name> <operator pos:start="11:12" pos:end="11:13">+=</operator> <name pos:start="11:15" pos:end="11:16">m1</name> <operator pos:start="11:18" pos:end="11:18">%</operator> <literal type="number" pos:start="11:20" pos:end="11:21">10</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:17"><expr pos:start="12:9" pos:end="12:16"><name pos:start="12:9" pos:end="12:10">m1</name> <operator pos:start="12:12" pos:end="12:13">/=</operator> <literal type="number" pos:start="12:15" pos:end="12:16">10</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <decl_stmt pos:start="14:5" pos:end="14:15"><decl pos:start="14:5" pos:end="14:14"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:10">m2</name> <init pos:start="14:12" pos:end="14:14">= <expr pos:start="14:14" pos:end="14:14"><name pos:start="14:14" pos:end="14:14">b</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">s2</name> <init pos:start="15:12" pos:end="15:14">= <expr pos:start="15:14" pos:end="15:14"><literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="16:5" pos:end="19:5">while <condition pos:start="16:11" pos:end="16:19">(<expr pos:start="16:12" pos:end="16:18"><name pos:start="16:12" pos:end="16:13">m2</name> <operator pos:start="16:15" pos:end="16:16">!=</operator> <literal type="number" pos:start="16:18" pos:end="16:18">0</literal></expr>)</condition><block pos:start="16:20" pos:end="19:5">{<block_content pos:start="17:9" pos:end="18:17">
        <expr_stmt pos:start="17:9" pos:end="17:22"><expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:10">s2</name> <operator pos:start="17:12" pos:end="17:13">+=</operator> <name pos:start="17:15" pos:end="17:16">m2</name> <operator pos:start="17:18" pos:end="17:18">%</operator> <literal type="number" pos:start="17:20" pos:end="17:21">10</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:17"><expr pos:start="18:9" pos:end="18:16"><name pos:start="18:9" pos:end="18:10">m2</name> <operator pos:start="18:12" pos:end="18:13">/=</operator> <literal type="number" pos:start="18:15" pos:end="18:16">10</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="20:5" pos:end="22:5"><if pos:start="20:5" pos:end="22:5">if <condition pos:start="20:8" pos:end="20:17">(<expr pos:start="20:9" pos:end="20:16"><name pos:start="20:9" pos:end="20:10">m1</name> <operator pos:start="20:12" pos:end="20:13">!=</operator> <name pos:start="20:15" pos:end="20:16">m2</name></expr>)</condition><block pos:start="20:18" pos:end="22:5">{<block_content pos:start="21:9" pos:end="21:23">
        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><name pos:start="21:16" pos:end="21:17">m1</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <name pos:start="21:21" pos:end="21:22">m2</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
 <return pos:start="23:2" pos:end="23:14">return <expr pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">a</name> <operator pos:start="23:11" pos:end="23:11">&lt;</operator> <name pos:start="23:13" pos:end="23:13">b</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="26:1" pos:end="36:1"><type pos:start="26:1" pos:end="26:3"><name pos:start="26:1" pos:end="26:3">int</name></type> <name pos:start="26:5" pos:end="26:8">main</name><parameter_list pos:start="26:9" pos:end="26:10">()</parameter_list> <block pos:start="26:12" pos:end="36:1">{<block_content pos:start="27:4" pos:end="35:4">
   <decl_stmt pos:start="27:4" pos:end="27:9"><decl pos:start="27:4" pos:end="27:8"><type pos:start="27:4" pos:end="27:6"><name pos:start="27:4" pos:end="27:6">int</name></type> <name pos:start="27:8" pos:end="27:8">n</name></decl>;</decl_stmt>
   <expr_stmt pos:start="28:4" pos:end="28:12"><expr pos:start="28:4" pos:end="28:11"><name pos:start="28:4" pos:end="28:6">cin</name> <operator pos:start="28:8" pos:end="28:9">&gt;&gt;</operator> <name pos:start="28:11" pos:end="28:11">n</name></expr>;</expr_stmt>
   <for pos:start="29:4" pos:end="31:4">for <control pos:start="29:8" pos:end="29:27">(<init pos:start="29:9" pos:end="29:16"><decl pos:start="29:9" pos:end="29:15"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:13">i</name><init pos:start="29:14" pos:end="29:15">=<expr pos:start="29:15" pos:end="29:15"><literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr></init></decl>;</init> <condition pos:start="29:18" pos:end="29:23"><expr pos:start="29:18" pos:end="29:22"><name pos:start="29:18" pos:end="29:18">i</name> <operator pos:start="29:20" pos:end="29:20">&lt;</operator> <name pos:start="29:22" pos:end="29:22">n</name></expr>;</condition><incr pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:24">i</name><operator pos:start="29:25" pos:end="29:26">++</operator></expr></incr>)</control><block pos:start="29:28" pos:end="31:4">{<block_content pos:start="30:8" pos:end="30:19">
       <expr_stmt pos:start="30:8" pos:end="30:19"><expr pos:start="30:8" pos:end="30:18"><name pos:start="30:8" pos:end="30:10">cin</name> <operator pos:start="30:12" pos:end="30:13">&gt;&gt;</operator> <name pos:start="30:15" pos:end="30:18"><name pos:start="30:15" pos:end="30:15">A</name><index pos:start="30:16" pos:end="30:18">[<expr pos:start="30:17" pos:end="30:17"><name pos:start="30:17" pos:end="30:17">i</name></expr>]</index></name></expr>;</expr_stmt>
   </block_content>}</block></for>
   <expr_stmt pos:start="32:4" pos:end="32:21"><expr pos:start="32:4" pos:end="32:20"><call pos:start="32:4" pos:end="32:20"><name pos:start="32:4" pos:end="32:7">sort</name> <argument_list pos:start="32:9" pos:end="32:20">(<argument pos:start="32:10" pos:end="32:10"><expr pos:start="32:10" pos:end="32:10"><name pos:start="32:10" pos:end="32:10">A</name></expr></argument> ,<argument pos:start="32:13" pos:end="32:15"><expr pos:start="32:13" pos:end="32:15"><name pos:start="32:13" pos:end="32:13">A</name><operator pos:start="32:14" pos:end="32:14">+</operator><name pos:start="32:15" pos:end="32:15">n</name></expr></argument>,<argument pos:start="32:17" pos:end="32:19"><expr pos:start="32:17" pos:end="32:19"><name pos:start="32:17" pos:end="32:19">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="33:5" pos:end="35:4">for <control pos:start="33:9" pos:end="33:28">(<init pos:start="33:10" pos:end="33:17"><decl pos:start="33:10" pos:end="33:16"><type pos:start="33:10" pos:end="33:12"><name pos:start="33:10" pos:end="33:12">int</name></type> <name pos:start="33:14" pos:end="33:14">i</name><init pos:start="33:15" pos:end="33:16">=<expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr></init></decl>;</init> <condition pos:start="33:19" pos:end="33:24"><expr pos:start="33:19" pos:end="33:23"><name pos:start="33:19" pos:end="33:19">i</name> <operator pos:start="33:21" pos:end="33:21">&lt;</operator> <name pos:start="33:23" pos:end="33:23">n</name></expr>;</condition><incr pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:25">i</name><operator pos:start="33:26" pos:end="33:27">++</operator></expr></incr>)</control><block pos:start="33:29" pos:end="35:4">{<block_content pos:start="34:8" pos:end="34:27">
       <expr_stmt pos:start="34:8" pos:end="34:27"><expr pos:start="34:8" pos:end="34:26"><name pos:start="34:8" pos:end="34:11">cout</name> <operator pos:start="34:13" pos:end="34:14">&lt;&lt;</operator> <name pos:start="34:16" pos:end="34:19"><name pos:start="34:16" pos:end="34:16">A</name><index pos:start="34:17" pos:end="34:19">[<expr pos:start="34:18" pos:end="34:18"><name pos:start="34:18" pos:end="34:18">i</name></expr>]</index></name> <operator pos:start="34:21" pos:end="34:22">&lt;&lt;</operator> <literal type="string" pos:start="34:24" pos:end="34:26">" "</literal></expr>;</expr_stmt>
   </block_content>}</block></for>
</block_content>}</block></function>
</unit>
