<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/140/140.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:16">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:16">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:17">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive><cpp:file pos:start="3:9" pos:end="3:17">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:15">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive><cpp:file pos:start="4:9" pos:end="4:15">&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive><cpp:file pos:start="5:9" pos:end="5:13">&lt;set&gt;</cpp:file></cpp:include>
<cpp:include pos:start="6:1" pos:end="6:13">#<cpp:directive pos:start="6:2" pos:end="6:8">include</cpp:directive><cpp:file pos:start="6:9" pos:end="6:13">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:start="7:1" pos:end="7:19">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive><cpp:file pos:start="7:9" pos:end="7:19">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="8:1" pos:end="8:15">#<cpp:directive pos:start="8:2" pos:end="8:8">include</cpp:directive><cpp:file pos:start="8:9" pos:end="8:15">&lt;queue&gt;</cpp:file></cpp:include>
<cpp:define pos:start="9:1" pos:end="9:45">#<cpp:directive pos:start="9:2" pos:end="9:7">define</cpp:directive> <cpp:macro pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:12">_for</name><parameter_list pos:start="9:13" pos:end="9:19">(<parameter pos:start="9:14" pos:end="9:14"><type pos:start="9:14" pos:end="9:14"><name pos:start="9:14" pos:end="9:14">i</name></type></parameter>,<parameter pos:start="9:16" pos:end="9:16"><type pos:start="9:16" pos:end="9:16"><name pos:start="9:16" pos:end="9:16">a</name></type></parameter>,<parameter pos:start="9:18" pos:end="9:18"><type pos:start="9:18" pos:end="9:18"><name pos:start="9:18" pos:end="9:18">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="9:21" pos:end="9:45">for (int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<using pos:start="10:1" pos:end="10:20">using <namespace pos:start="10:7" pos:end="10:20">namespace <name pos:start="10:17" pos:end="10:19">std</name>;</namespace></using>
<typedef pos:start="11:1" pos:end="11:26">typedef <type pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:12">pair</name><argument_list type="generic" pos:start="11:13" pos:end="11:21">&lt;<argument pos:start="11:14" pos:end="11:16"><expr pos:start="11:14" pos:end="11:16"><name pos:start="11:14" pos:end="11:16">int</name></expr></argument>,<argument pos:start="11:18" pos:end="11:20"><expr pos:start="11:18" pos:end="11:20"><name pos:start="11:18" pos:end="11:20">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="11:23" pos:end="11:25">PII</name>;</typedef>
<decl_stmt pos:start="12:1" pos:end="12:41"><decl pos:start="12:1" pos:end="12:17"><type pos:start="12:1" pos:end="12:9"><specifier pos:start="12:1" pos:end="12:5">const</specifier> <name pos:start="12:7" pos:end="12:9">int</name></type> <name pos:start="12:11" pos:end="12:11">N</name><init pos:start="12:12" pos:end="12:17">=<expr pos:start="12:13" pos:end="12:17"><literal type="number" pos:start="12:13" pos:end="12:17">10005</literal></expr></init></decl>,<decl pos:start="12:19" pos:end="12:25"><type ref="prev" pos:start="12:1" pos:end="12:9"/><name pos:start="12:19" pos:end="12:19">M</name><init pos:start="12:20" pos:end="12:25">=<expr pos:start="12:21" pos:end="12:25"><literal type="number" pos:start="12:21" pos:end="12:25">21000</literal></expr></init></decl>,<decl pos:start="12:27" pos:end="12:40"><type ref="prev" pos:start="12:1" pos:end="12:9"/><name pos:start="12:27" pos:end="12:29">INF</name><init pos:start="12:30" pos:end="12:40">=<expr pos:start="12:31" pos:end="12:40"><literal type="number" pos:start="12:31" pos:end="12:40">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="13:1" pos:end="13:8"><decl pos:start="13:1" pos:end="13:5"><type pos:start="13:1" pos:end="13:3"><name pos:start="13:1" pos:end="13:3">int</name></type> <name pos:start="13:5" pos:end="13:5">n</name></decl>,<decl pos:start="13:7" pos:end="13:7"><type ref="prev" pos:start="13:1" pos:end="13:3"/><name pos:start="13:7" pos:end="13:7">m</name></decl>;</decl_stmt>
<decl_stmt pos:start="14:1" pos:end="14:12"><decl pos:start="14:1" pos:end="14:11"><type pos:start="14:1" pos:end="14:6"><name pos:start="14:1" pos:end="14:6">string</name></type> <name pos:start="14:8" pos:end="14:11"><name pos:start="14:8" pos:end="14:8">a</name><index pos:start="14:9" pos:end="14:11">[<expr pos:start="14:10" pos:end="14:10"><name pos:start="14:10" pos:end="14:10">N</name></expr>]</index></name></decl>;</decl_stmt>
<struct pos:start="15:1" pos:end="22:2">struct <name pos:start="15:8" pos:end="15:11">node</name><block pos:start="15:12" pos:end="22:1">{<public type="default" pos:start="16:5" pos:end="21:5">
    <decl_stmt pos:start="16:5" pos:end="16:12"><decl pos:start="16:5" pos:end="16:9"><type pos:start="16:5" pos:end="16:7"><name pos:start="16:5" pos:end="16:7">int</name></type> <name pos:start="16:9" pos:end="16:9">x</name></decl>,<decl pos:start="16:11" pos:end="16:11"><type ref="prev" pos:start="16:5" pos:end="16:7"/><name pos:start="16:11" pos:end="16:11">y</name></decl>;</decl_stmt>
    <constructor pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:8">node</name> <parameter_list pos:start="17:10" pos:end="17:11">()</parameter_list><block pos:start="17:12" pos:end="17:13">{<block_content/>}</block></constructor>
    <constructor pos:start="18:5" pos:end="21:5"><name pos:start="18:5" pos:end="18:8">node</name> <parameter_list pos:start="18:10" pos:end="18:24">(<parameter pos:start="18:11" pos:end="18:16"><decl pos:start="18:11" pos:end="18:16"><type pos:start="18:11" pos:end="18:16"><name pos:start="18:11" pos:end="18:13">int</name></type> <name pos:start="18:15" pos:end="18:16">_x</name></decl></parameter>,<parameter pos:start="18:18" pos:end="18:23"><decl pos:start="18:18" pos:end="18:23"><type pos:start="18:18" pos:end="18:23"><name pos:start="18:18" pos:end="18:20">int</name></type> <name pos:start="18:22" pos:end="18:23">_y</name></decl></parameter>)</parameter_list><block pos:start="18:25" pos:end="21:5">{<block_content pos:start="19:9" pos:end="20:13">
        <expr_stmt pos:start="19:9" pos:end="19:13"><expr pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:9">x</name><operator pos:start="19:10" pos:end="19:10">=</operator><name pos:start="19:11" pos:end="19:12">_x</name></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:13"><expr pos:start="20:9" pos:end="20:12"><name pos:start="20:9" pos:end="20:9">y</name><operator pos:start="20:10" pos:end="20:10">=</operator><name pos:start="20:11" pos:end="20:12">_y</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</struct>
<decl_stmt pos:start="23:1" pos:end="23:14"><decl pos:start="23:1" pos:end="23:13"><type pos:start="23:1" pos:end="23:11"><name pos:start="23:1" pos:end="23:11"><name pos:start="23:1" pos:end="23:5">queue</name><argument_list type="generic" pos:start="23:6" pos:end="23:11">&lt;<argument pos:start="23:7" pos:end="23:10"><expr pos:start="23:7" pos:end="23:10"><name pos:start="23:7" pos:end="23:10">node</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="23:13" pos:end="23:13">q</name></decl>;</decl_stmt>
<decl_stmt pos:start="24:1" pos:end="24:24"><decl pos:start="24:1" pos:end="24:8"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:8"><name pos:start="24:5" pos:end="24:5">e</name><index pos:start="24:6" pos:end="24:8">[<expr pos:start="24:7" pos:end="24:7"><name pos:start="24:7" pos:end="24:7">M</name></expr>]</index></name></decl>,<decl pos:start="24:10" pos:end="24:14"><type ref="prev" pos:start="24:1" pos:end="24:3"/><name pos:start="24:10" pos:end="24:14"><name pos:start="24:10" pos:end="24:11">ne</name><index pos:start="24:12" pos:end="24:14">[<expr pos:start="24:13" pos:end="24:13"><name pos:start="24:13" pos:end="24:13">M</name></expr>]</index></name></decl>,<decl pos:start="24:16" pos:end="24:19"><type ref="prev" pos:start="24:1" pos:end="24:3"/><name pos:start="24:16" pos:end="24:19"><name pos:start="24:16" pos:end="24:16">h</name><index pos:start="24:17" pos:end="24:19">[<expr pos:start="24:18" pos:end="24:18"><name pos:start="24:18" pos:end="24:18">N</name></expr>]</index></name></decl>,<decl pos:start="24:21" pos:end="24:23"><type ref="prev" pos:start="24:1" pos:end="24:3"/><name pos:start="24:21" pos:end="24:23">idx</name></decl>;</decl_stmt>
<decl_stmt pos:start="25:1" pos:end="25:49"><decl pos:start="25:1" pos:end="25:12"><type pos:start="25:1" pos:end="25:3"><name pos:start="25:1" pos:end="25:3">int</name></type> <name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:9">new_h</name><index pos:start="25:10" pos:end="25:12">[<expr pos:start="25:11" pos:end="25:11"><name pos:start="25:11" pos:end="25:11">N</name></expr>]</index></name></decl>,<decl pos:start="25:14" pos:end="25:21"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:14" pos:end="25:21"><name pos:start="25:14" pos:end="25:18">new_e</name><index pos:start="25:19" pos:end="25:21">[<expr pos:start="25:20" pos:end="25:20"><name pos:start="25:20" pos:end="25:20">M</name></expr>]</index></name></decl>,<decl pos:start="25:23" pos:end="25:31"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:23" pos:end="25:31"><name pos:start="25:23" pos:end="25:28">new_ne</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">M</name></expr>]</index></name></decl>,<decl pos:start="25:33" pos:end="25:40"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:33" pos:end="25:40"><name pos:start="25:33" pos:end="25:37">new_w</name><index pos:start="25:38" pos:end="25:40">[<expr pos:start="25:39" pos:end="25:39"><name pos:start="25:39" pos:end="25:39">M</name></expr>]</index></name></decl>,<decl pos:start="25:42" pos:end="25:48"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:42" pos:end="25:48">new_idx</name></decl>;</decl_stmt>
<decl_stmt pos:start="26:1" pos:end="26:16"><decl pos:start="26:1" pos:end="26:15"><type pos:start="26:1" pos:end="26:12"><name pos:start="26:1" pos:end="26:12"><name pos:start="26:1" pos:end="26:3">map</name><argument_list type="generic" pos:start="26:4" pos:end="26:12">&lt;<argument pos:start="26:5" pos:end="26:7"><expr pos:start="26:5" pos:end="26:7"><name pos:start="26:5" pos:end="26:7">int</name></expr></argument>,<argument pos:start="26:9" pos:end="26:11"><expr pos:start="26:9" pos:end="26:11"><name pos:start="26:9" pos:end="26:11">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="26:14" pos:end="26:15">mp</name></decl>;</decl_stmt>
<decl_stmt pos:start="27:1" pos:end="27:12"><decl pos:start="27:1" pos:end="27:11"><type pos:start="27:1" pos:end="27:3"><name pos:start="27:1" pos:end="27:3">int</name></type> <name pos:start="27:5" pos:end="27:9">times</name><init pos:start="27:10" pos:end="27:11">=<expr pos:start="27:11" pos:end="27:11"><literal type="number" pos:start="27:11" pos:end="27:11">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="28:18"><decl pos:start="28:1" pos:end="28:10"><type pos:start="28:1" pos:end="28:3"><name pos:start="28:1" pos:end="28:3">int</name></type> <name pos:start="28:5" pos:end="28:10"><name pos:start="28:5" pos:end="28:7">dfn</name><index pos:start="28:8" pos:end="28:10">[<expr pos:start="28:9" pos:end="28:9"><name pos:start="28:9" pos:end="28:9">N</name></expr>]</index></name></decl>,<decl pos:start="28:12" pos:end="28:17"><type ref="prev" pos:start="28:1" pos:end="28:3"/><name pos:start="28:12" pos:end="28:17"><name pos:start="28:12" pos:end="28:14">low</name><index pos:start="28:15" pos:end="28:17">[<expr pos:start="28:16" pos:end="28:16"><name pos:start="28:16" pos:end="28:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="29:1" pos:end="29:14"><decl pos:start="29:1" pos:end="29:13"><type pos:start="29:1" pos:end="29:3"><name pos:start="29:1" pos:end="29:3">int</name></type> <name pos:start="29:5" pos:end="29:11">scc_cnt</name><init pos:start="29:12" pos:end="29:13">=<expr pos:start="29:13" pos:end="29:13"><literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="30:1" pos:end="30:18"><decl pos:start="30:1" pos:end="30:12"><type pos:start="30:1" pos:end="30:3"><name pos:start="30:1" pos:end="30:3">int</name></type> <name pos:start="30:5" pos:end="30:12"><name pos:start="30:5" pos:end="30:9">sccno</name><index pos:start="30:10" pos:end="30:12">[<expr pos:start="30:11" pos:end="30:11"><name pos:start="30:11" pos:end="30:11">N</name></expr>]</index></name></decl>,<decl pos:start="30:14" pos:end="30:17"><type ref="prev" pos:start="30:1" pos:end="30:3"/><name pos:start="30:14" pos:end="30:17"><name pos:start="30:14" pos:end="30:14">w</name><index pos:start="30:15" pos:end="30:17">[<expr pos:start="30:16" pos:end="30:16"><name pos:start="30:16" pos:end="30:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="31:1" pos:end="31:16"><decl pos:start="31:1" pos:end="31:15"><type pos:start="31:1" pos:end="31:8"><name pos:start="31:1" pos:end="31:8"><name pos:start="31:1" pos:end="31:3">set</name><argument_list type="generic" pos:start="31:4" pos:end="31:8">&lt;<argument pos:start="31:5" pos:end="31:7"><expr pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="31:10" pos:end="31:15"><name pos:start="31:10" pos:end="31:12">scc</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><name pos:start="31:14" pos:end="31:14">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="32:1" pos:end="32:13"><decl pos:start="32:1" pos:end="32:12"><type pos:start="32:1" pos:end="32:10"><name pos:start="32:1" pos:end="32:10"><name pos:start="32:1" pos:end="32:5">stack</name><argument_list type="generic" pos:start="32:6" pos:end="32:10">&lt;<argument pos:start="32:7" pos:end="32:9"><expr pos:start="32:7" pos:end="32:9"><name pos:start="32:7" pos:end="32:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="32:12" pos:end="32:12">S</name></decl>;</decl_stmt>
<decl_stmt pos:start="33:1" pos:end="33:13"><decl pos:start="33:1" pos:end="33:12"><type pos:start="33:1" pos:end="33:8"><name pos:start="33:1" pos:end="33:8"><name pos:start="33:1" pos:end="33:3">set</name><argument_list type="generic" pos:start="33:4" pos:end="33:8">&lt;<argument pos:start="33:5" pos:end="33:7"><expr pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">PII</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="33:10" pos:end="33:12">vis</name></decl>;</decl_stmt>
<decl_stmt pos:start="34:1" pos:end="34:14"><decl pos:start="34:1" pos:end="34:13"><type pos:start="34:1" pos:end="34:8"><name pos:start="34:1" pos:end="34:8"><name pos:start="34:1" pos:end="34:3">set</name><argument_list type="generic" pos:start="34:4" pos:end="34:8">&lt;<argument pos:start="34:5" pos:end="34:7"><expr pos:start="34:5" pos:end="34:7"><name pos:start="34:5" pos:end="34:7">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="34:10" pos:end="34:13">flag</name></decl>;</decl_stmt>
<decl_stmt pos:start="35:1" pos:end="35:9"><decl pos:start="35:1" pos:end="35:8"><type pos:start="35:1" pos:end="35:3"><name pos:start="35:1" pos:end="35:3">int</name></type> <name pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:5">f</name><index pos:start="35:6" pos:end="35:8">[<expr pos:start="35:7" pos:end="35:7"><name pos:start="35:7" pos:end="35:7">N</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="36:1" pos:end="40:1"><type pos:start="36:1" pos:end="36:11"><specifier pos:start="36:1" pos:end="36:6">inline</specifier> <name pos:start="36:8" pos:end="36:11">void</name></type> <name pos:start="36:13" pos:end="36:18">c_plus</name><parameter_list pos:start="36:19" pos:end="36:20">()</parameter_list><block pos:start="36:21" pos:end="40:1">{<block_content pos:start="37:5" pos:end="39:16">
    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><call pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:7">ios</name><operator pos:start="37:8" pos:end="37:9">::</operator><name pos:start="37:10" pos:end="37:24">sync_with_stdio</name></name><argument_list pos:start="37:25" pos:end="37:31">(<argument pos:start="37:26" pos:end="37:30"><expr pos:start="37:26" pos:end="37:30"><literal type="boolean" pos:start="37:26" pos:end="37:30">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:15"><expr pos:start="38:5" pos:end="38:14"><call pos:start="38:5" pos:end="38:14"><name pos:start="38:5" pos:end="38:11"><name pos:start="38:5" pos:end="38:7">cin</name><operator pos:start="38:8" pos:end="38:8">.</operator><name pos:start="38:9" pos:end="38:11">tie</name></name><argument_list pos:start="38:12" pos:end="38:14">(<argument pos:start="38:13" pos:end="38:13"><expr pos:start="38:13" pos:end="38:13"><literal type="number" pos:start="38:13" pos:end="38:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><call pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:8">cout</name><operator pos:start="39:9" pos:end="39:9">.</operator><name pos:start="39:10" pos:end="39:12">tie</name></name><argument_list pos:start="39:13" pos:end="39:15">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="41:1" pos:end="43:1"><type pos:start="41:1" pos:end="41:10"><specifier pos:start="41:1" pos:end="41:6">inline</specifier> <name pos:start="41:8" pos:end="41:10">int</name></type> <name pos:start="41:12" pos:end="41:12">c</name><parameter_list pos:start="41:13" pos:end="41:25">(<parameter pos:start="41:14" pos:end="41:18"><decl pos:start="41:14" pos:end="41:18"><type pos:start="41:14" pos:end="41:18"><name pos:start="41:14" pos:end="41:16">int</name></type> <name pos:start="41:18" pos:end="41:18">x</name></decl></parameter>,<parameter pos:start="41:20" pos:end="41:24"><decl pos:start="41:20" pos:end="41:24"><type pos:start="41:20" pos:end="41:24"><name pos:start="41:20" pos:end="41:22">int</name></type> <name pos:start="41:24" pos:end="41:24">y</name></decl></parameter>)</parameter_list><block pos:start="41:26" pos:end="43:1">{<block_content pos:start="42:5" pos:end="42:19">
    <return pos:start="42:5" pos:end="42:19">return <expr pos:start="42:12" pos:end="42:18"><name pos:start="42:12" pos:end="42:12">m</name><operator pos:start="42:13" pos:end="42:13">*</operator><name pos:start="42:14" pos:end="42:14">x</name><operator pos:start="42:15" pos:end="42:15">+</operator><name pos:start="42:16" pos:end="42:16">y</name><operator pos:start="42:17" pos:end="42:17">+</operator><literal type="number" pos:start="42:18" pos:end="42:18">1</literal></expr>;</return>
</block_content>}</block></function>
<function pos:start="44:1" pos:end="47:1"><type pos:start="44:1" pos:end="44:11"><specifier pos:start="44:1" pos:end="44:6">inline</specifier> <name pos:start="44:8" pos:end="44:11">void</name></type> <name pos:start="44:13" pos:end="44:16">init</name><parameter_list pos:start="44:17" pos:end="44:18">()</parameter_list><block pos:start="44:19" pos:end="47:1">{<block_content pos:start="45:5" pos:end="46:27">
    <expr_stmt pos:start="45:5" pos:end="45:10"><expr pos:start="45:5" pos:end="45:9"><name pos:start="45:5" pos:end="45:7">idx</name><operator pos:start="45:8" pos:end="45:8">=</operator><literal type="number" pos:start="45:9" pos:end="45:9">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:27"><expr pos:start="46:5" pos:end="46:26"><call pos:start="46:5" pos:end="46:26"><name pos:start="46:5" pos:end="46:10">memset</name><argument_list pos:start="46:11" pos:end="46:26">(<argument pos:start="46:12" pos:end="46:12"><expr pos:start="46:12" pos:end="46:12"><name pos:start="46:12" pos:end="46:12">h</name></expr></argument>,<argument pos:start="46:14" pos:end="46:15"><expr pos:start="46:14" pos:end="46:15"><operator pos:start="46:14" pos:end="46:14">-</operator><literal type="number" pos:start="46:15" pos:end="46:15">1</literal></expr></argument>,<argument pos:start="46:17" pos:end="46:25"><expr pos:start="46:17" pos:end="46:25"><sizeof pos:start="46:17" pos:end="46:25">sizeof<argument_list pos:start="46:23" pos:end="46:25">(<argument pos:start="46:24" pos:end="46:24"><expr pos:start="46:24" pos:end="46:24"><name pos:start="46:24" pos:end="46:24">h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="48:1" pos:end="52:1"><type pos:start="48:1" pos:end="48:11"><specifier pos:start="48:1" pos:end="48:6">inline</specifier> <name pos:start="48:8" pos:end="48:11">void</name></type> <name pos:start="48:13" pos:end="48:15">add</name><parameter_list pos:start="48:16" pos:end="48:28">(<parameter pos:start="48:17" pos:end="48:21"><decl pos:start="48:17" pos:end="48:21"><type pos:start="48:17" pos:end="48:21"><name pos:start="48:17" pos:end="48:19">int</name></type> <name pos:start="48:21" pos:end="48:21">a</name></decl></parameter>,<parameter pos:start="48:23" pos:end="48:27"><decl pos:start="48:23" pos:end="48:27"><type pos:start="48:23" pos:end="48:27"><name pos:start="48:23" pos:end="48:25">int</name></type> <name pos:start="48:27" pos:end="48:27">b</name></decl></parameter>)</parameter_list><block pos:start="48:29" pos:end="52:1">{<block_content pos:start="49:5" pos:end="51:15">
    <expr_stmt pos:start="49:5" pos:end="49:13"><expr pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:5">e</name><index pos:start="49:6" pos:end="49:10">[<expr pos:start="49:7" pos:end="49:9"><name pos:start="49:7" pos:end="49:9">idx</name></expr>]</index></name><operator pos:start="49:11" pos:end="49:11">=</operator><name pos:start="49:12" pos:end="49:12">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:17"><expr pos:start="50:5" pos:end="50:16"><name pos:start="50:5" pos:end="50:11"><name pos:start="50:5" pos:end="50:6">ne</name><index pos:start="50:7" pos:end="50:11">[<expr pos:start="50:8" pos:end="50:10"><name pos:start="50:8" pos:end="50:10">idx</name></expr>]</index></name><operator pos:start="50:12" pos:end="50:12">=</operator><name pos:start="50:13" pos:end="50:16"><name pos:start="50:13" pos:end="50:13">h</name><index pos:start="50:14" pos:end="50:16">[<expr pos:start="50:15" pos:end="50:15"><name pos:start="50:15" pos:end="50:15">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:8"><name pos:start="51:5" pos:end="51:5">h</name><index pos:start="51:6" pos:end="51:8">[<expr pos:start="51:7" pos:end="51:7"><name pos:start="51:7" pos:end="51:7">a</name></expr>]</index></name><operator pos:start="51:9" pos:end="51:9">=</operator><name pos:start="51:10" pos:end="51:12">idx</name><operator pos:start="51:13" pos:end="51:14">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="53:1" pos:end="56:1"><type pos:start="53:1" pos:end="53:11"><specifier pos:start="53:1" pos:end="53:6">inline</specifier> <name pos:start="53:8" pos:end="53:11">void</name></type> <name pos:start="53:13" pos:end="53:20">new_init</name><parameter_list pos:start="53:21" pos:end="53:22">()</parameter_list><block pos:start="53:23" pos:end="56:1">{<block_content pos:start="54:5" pos:end="55:35">
    <expr_stmt pos:start="54:5" pos:end="54:14"><expr pos:start="54:5" pos:end="54:13"><name pos:start="54:5" pos:end="54:11">new_idx</name><operator pos:start="54:12" pos:end="54:12">=</operator><literal type="number" pos:start="54:13" pos:end="54:13">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:35"><expr pos:start="55:5" pos:end="55:34"><call pos:start="55:5" pos:end="55:34"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:34">(<argument pos:start="55:12" pos:end="55:16"><expr pos:start="55:12" pos:end="55:16"><name pos:start="55:12" pos:end="55:16">new_h</name></expr></argument>,<argument pos:start="55:18" pos:end="55:19"><expr pos:start="55:18" pos:end="55:19"><operator pos:start="55:18" pos:end="55:18">-</operator><literal type="number" pos:start="55:19" pos:end="55:19">1</literal></expr></argument>,<argument pos:start="55:21" pos:end="55:33"><expr pos:start="55:21" pos:end="55:33"><sizeof pos:start="55:21" pos:end="55:33">sizeof<argument_list pos:start="55:27" pos:end="55:33">(<argument pos:start="55:28" pos:end="55:32"><expr pos:start="55:28" pos:end="55:32"><name pos:start="55:28" pos:end="55:32">new_h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="57:1" pos:end="61:1"><type pos:start="57:1" pos:end="57:11"><specifier pos:start="57:1" pos:end="57:6">inline</specifier> <name pos:start="57:8" pos:end="57:11">void</name></type> <name pos:start="57:13" pos:end="57:19">new_add</name><parameter_list pos:start="57:20" pos:end="57:32">(<parameter pos:start="57:21" pos:end="57:25"><decl pos:start="57:21" pos:end="57:25"><type pos:start="57:21" pos:end="57:25"><name pos:start="57:21" pos:end="57:23">int</name></type> <name pos:start="57:25" pos:end="57:25">a</name></decl></parameter>,<parameter pos:start="57:27" pos:end="57:31"><decl pos:start="57:27" pos:end="57:31"><type pos:start="57:27" pos:end="57:31"><name pos:start="57:27" pos:end="57:29">int</name></type> <name pos:start="57:31" pos:end="57:31">b</name></decl></parameter>)</parameter_list><block pos:start="57:33" pos:end="61:1">{<block_content pos:start="58:5" pos:end="60:23">
    <expr_stmt pos:start="58:5" pos:end="58:21"><expr pos:start="58:5" pos:end="58:20"><name pos:start="58:5" pos:end="58:18"><name pos:start="58:5" pos:end="58:9">new_e</name><index pos:start="58:10" pos:end="58:18">[<expr pos:start="58:11" pos:end="58:17"><name pos:start="58:11" pos:end="58:17">new_idx</name></expr>]</index></name><operator pos:start="58:19" pos:end="58:19">=</operator><name pos:start="58:20" pos:end="58:20">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:10">new_ne</name><index pos:start="59:11" pos:end="59:19">[<expr pos:start="59:12" pos:end="59:18"><name pos:start="59:12" pos:end="59:18">new_idx</name></expr>]</index></name><operator pos:start="59:20" pos:end="59:20">=</operator><name pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:25">new_h</name><index pos:start="59:26" pos:end="59:28">[<expr pos:start="59:27" pos:end="59:27"><name pos:start="59:27" pos:end="59:27">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:23"><expr pos:start="60:5" pos:end="60:22"><name pos:start="60:5" pos:end="60:12"><name pos:start="60:5" pos:end="60:9">new_h</name><index pos:start="60:10" pos:end="60:12">[<expr pos:start="60:11" pos:end="60:11"><name pos:start="60:11" pos:end="60:11">a</name></expr>]</index></name><operator pos:start="60:13" pos:end="60:13">=</operator><name pos:start="60:14" pos:end="60:20">new_idx</name><operator pos:start="60:21" pos:end="60:22">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="62:1" pos:end="87:1"><type pos:start="62:1" pos:end="62:4"><name pos:start="62:1" pos:end="62:4">void</name></type> <name pos:start="62:6" pos:end="62:11">tarjan</name><parameter_list pos:start="62:12" pos:end="62:18">(<parameter pos:start="62:13" pos:end="62:17"><decl pos:start="62:13" pos:end="62:17"><type pos:start="62:13" pos:end="62:15"><name pos:start="62:13" pos:end="62:15">int</name></type> <name pos:start="62:17" pos:end="62:17">u</name></decl></parameter>)</parameter_list><block pos:start="62:19" pos:end="87:1">{<block_content pos:start="63:5" pos:end="86:5">
    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:7">dfn</name><index pos:start="63:8" pos:end="63:10">[<expr pos:start="63:9" pos:end="63:9"><name pos:start="63:9" pos:end="63:9">u</name></expr>]</index></name><operator pos:start="63:11" pos:end="63:11">=</operator><name pos:start="63:12" pos:end="63:17"><name pos:start="63:12" pos:end="63:14">low</name><index pos:start="63:15" pos:end="63:17">[<expr pos:start="63:16" pos:end="63:16"><name pos:start="63:16" pos:end="63:16">u</name></expr>]</index></name><operator pos:start="63:18" pos:end="63:18">=</operator><operator pos:start="63:19" pos:end="63:20">++</operator><name pos:start="63:21" pos:end="63:25">times</name></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:14"><expr pos:start="64:5" pos:end="64:13"><call pos:start="64:5" pos:end="64:13"><name pos:start="64:5" pos:end="64:10"><name pos:start="64:5" pos:end="64:5">S</name><operator pos:start="64:6" pos:end="64:6">.</operator><name pos:start="64:7" pos:end="64:10">push</name></name><argument_list pos:start="64:11" pos:end="64:13">(<argument pos:start="64:12" pos:end="64:12"><expr pos:start="64:12" pos:end="64:12"><name pos:start="64:12" pos:end="64:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="65:5" pos:end="73:5">for <control pos:start="65:9" pos:end="65:31">(<init pos:start="65:10" pos:end="65:20"><decl pos:start="65:10" pos:end="65:19"><type pos:start="65:10" pos:end="65:12"><name pos:start="65:10" pos:end="65:12">int</name></type> <name pos:start="65:14" pos:end="65:14">i</name><init pos:start="65:15" pos:end="65:19">=<expr pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:16">h</name><index pos:start="65:17" pos:end="65:19">[<expr pos:start="65:18" pos:end="65:18"><name pos:start="65:18" pos:end="65:18">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="65:21" pos:end="65:23"><expr pos:start="65:21" pos:end="65:22"><operator pos:start="65:21" pos:end="65:21">~</operator><name pos:start="65:22" pos:end="65:22">i</name></expr>;</condition><incr pos:start="65:24" pos:end="65:30"><expr pos:start="65:24" pos:end="65:30"><name pos:start="65:24" pos:end="65:24">i</name><operator pos:start="65:25" pos:end="65:25">=</operator><name pos:start="65:26" pos:end="65:30"><name pos:start="65:26" pos:end="65:27">ne</name><index pos:start="65:28" pos:end="65:30">[<expr pos:start="65:29" pos:end="65:29"><name pos:start="65:29" pos:end="65:29">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="65:32" pos:end="73:5">{<block_content pos:start="66:9" pos:end="72:9">
        <decl_stmt pos:start="66:9" pos:end="66:19"><decl pos:start="66:9" pos:end="66:18"><type pos:start="66:9" pos:end="66:11"><name pos:start="66:9" pos:end="66:11">int</name></type> <name pos:start="66:13" pos:end="66:13">v</name><init pos:start="66:14" pos:end="66:18">=<expr pos:start="66:15" pos:end="66:18"><name pos:start="66:15" pos:end="66:18"><name pos:start="66:15" pos:end="66:15">e</name><index pos:start="66:16" pos:end="66:18">[<expr pos:start="66:17" pos:end="66:17"><name pos:start="66:17" pos:end="66:17">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="67:9" pos:end="72:9"><if pos:start="67:9" pos:end="70:9">if <condition pos:start="67:12" pos:end="67:22">(<expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:15">dfn</name><index pos:start="67:16" pos:end="67:18">[<expr pos:start="67:17" pos:end="67:17"><name pos:start="67:17" pos:end="67:17">v</name></expr>]</index></name><operator pos:start="67:19" pos:end="67:20">==</operator><literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>)</condition><block pos:start="67:23" pos:end="70:9">{<block_content pos:start="68:13" pos:end="69:38">
            <expr_stmt pos:start="68:13" pos:end="68:22"><expr pos:start="68:13" pos:end="68:21"><call pos:start="68:13" pos:end="68:21"><name pos:start="68:13" pos:end="68:18">tarjan</name><argument_list pos:start="68:19" pos:end="68:21">(<argument pos:start="68:20" pos:end="68:20"><expr pos:start="68:20" pos:end="68:20"><name pos:start="68:20" pos:end="68:20">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:18"><name pos:start="69:13" pos:end="69:15">low</name><index pos:start="69:16" pos:end="69:18">[<expr pos:start="69:17" pos:end="69:17"><name pos:start="69:17" pos:end="69:17">u</name></expr>]</index></name><operator pos:start="69:19" pos:end="69:19">=</operator><call pos:start="69:20" pos:end="69:37"><name pos:start="69:20" pos:end="69:22">min</name><argument_list pos:start="69:23" pos:end="69:37">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:26">low</name><index pos:start="69:27" pos:end="69:29">[<expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="69:31" pos:end="69:36"><expr pos:start="69:31" pos:end="69:36"><name pos:start="69:31" pos:end="69:36"><name pos:start="69:31" pos:end="69:33">low</name><index pos:start="69:34" pos:end="69:36">[<expr pos:start="69:35" pos:end="69:35"><name pos:start="69:35" pos:end="69:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="70:10" pos:end="72:9">else if <condition pos:start="70:18" pos:end="70:28">(<expr pos:start="70:19" pos:end="70:27"><operator pos:start="70:19" pos:end="70:19">!</operator><name pos:start="70:20" pos:end="70:27"><name pos:start="70:20" pos:end="70:24">sccno</name><index pos:start="70:25" pos:end="70:27">[<expr pos:start="70:26" pos:end="70:26"><name pos:start="70:26" pos:end="70:26">v</name></expr>]</index></name></expr>)</condition><block pos:start="70:29" pos:end="72:9">{<block_content pos:start="71:13" pos:end="71:38">
            <expr_stmt pos:start="71:13" pos:end="71:38"><expr pos:start="71:13" pos:end="71:37"><name pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:15">low</name><index pos:start="71:16" pos:end="71:18">[<expr pos:start="71:17" pos:end="71:17"><name pos:start="71:17" pos:end="71:17">u</name></expr>]</index></name><operator pos:start="71:19" pos:end="71:19">=</operator><call pos:start="71:20" pos:end="71:37"><name pos:start="71:20" pos:end="71:22">min</name><argument_list pos:start="71:23" pos:end="71:37">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:26">low</name><index pos:start="71:27" pos:end="71:29">[<expr pos:start="71:28" pos:end="71:28"><name pos:start="71:28" pos:end="71:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="71:31" pos:end="71:36"><expr pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:33">dfn</name><index pos:start="71:34" pos:end="71:36">[<expr pos:start="71:35" pos:end="71:35"><name pos:start="71:35" pos:end="71:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="74:5" pos:end="86:5"><if pos:start="74:5" pos:end="86:5">if <condition pos:start="74:8" pos:end="74:23">(<expr pos:start="74:9" pos:end="74:22"><name pos:start="74:9" pos:end="74:14"><name pos:start="74:9" pos:end="74:11">low</name><index pos:start="74:12" pos:end="74:14">[<expr pos:start="74:13" pos:end="74:13"><name pos:start="74:13" pos:end="74:13">u</name></expr>]</index></name><operator pos:start="74:15" pos:end="74:16">==</operator><name pos:start="74:17" pos:end="74:22"><name pos:start="74:17" pos:end="74:19">dfn</name><index pos:start="74:20" pos:end="74:22">[<expr pos:start="74:21" pos:end="74:21"><name pos:start="74:21" pos:end="74:21">u</name></expr>]</index></name></expr>)</condition><block pos:start="74:24" pos:end="86:5">{<block_content pos:start="75:9" pos:end="85:9">
        <expr_stmt pos:start="75:9" pos:end="75:18"><expr pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:15">scc_cnt</name><operator pos:start="75:16" pos:end="75:17">++</operator></expr>;</expr_stmt>
        <while pos:start="76:9" pos:end="85:9">while <condition pos:start="76:15" pos:end="76:20">(<expr pos:start="76:16" pos:end="76:19"><literal type="boolean" pos:start="76:16" pos:end="76:19">true</literal></expr>)</condition><block pos:start="76:21" pos:end="85:9">{<block_content pos:start="77:13" pos:end="84:13">
            <decl_stmt pos:start="77:13" pos:end="77:26"><decl pos:start="77:13" pos:end="77:25"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:17">x</name><init pos:start="77:18" pos:end="77:25">=<expr pos:start="77:19" pos:end="77:25"><call pos:start="77:19" pos:end="77:25"><name pos:start="77:19" pos:end="77:23"><name pos:start="77:19" pos:end="77:19">S</name><operator pos:start="77:20" pos:end="77:20">.</operator><name pos:start="77:21" pos:end="77:23">top</name></name><argument_list pos:start="77:24" pos:end="77:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="78:13" pos:end="78:20"><expr pos:start="78:13" pos:end="78:19"><call pos:start="78:13" pos:end="78:19"><name pos:start="78:13" pos:end="78:17"><name pos:start="78:13" pos:end="78:13">S</name><operator pos:start="78:14" pos:end="78:14">.</operator><name pos:start="78:15" pos:end="78:17">pop</name></name><argument_list pos:start="78:18" pos:end="78:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="79:13" pos:end="79:35"><expr pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:15">scc</name><index pos:start="79:16" pos:end="79:24">[<expr pos:start="79:17" pos:end="79:23"><name pos:start="79:17" pos:end="79:23">scc_cnt</name></expr>]</index></name><operator pos:start="79:25" pos:end="79:25">.</operator><call pos:start="79:26" pos:end="79:34"><name pos:start="79:26" pos:end="79:31">insert</name><argument_list pos:start="79:32" pos:end="79:34">(<argument pos:start="79:33" pos:end="79:33"><expr pos:start="79:33" pos:end="79:33"><name pos:start="79:33" pos:end="79:33">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="80:13" pos:end="80:29"><expr pos:start="80:13" pos:end="80:28"><name pos:start="80:13" pos:end="80:20"><name pos:start="80:13" pos:end="80:17">sccno</name><index pos:start="80:18" pos:end="80:20">[<expr pos:start="80:19" pos:end="80:19"><name pos:start="80:19" pos:end="80:19">x</name></expr>]</index></name><operator pos:start="80:21" pos:end="80:21">=</operator><name pos:start="80:22" pos:end="80:28">scc_cnt</name></expr>;</expr_stmt>
            <expr_stmt pos:start="81:13" pos:end="81:30"><expr pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:13">w</name><index pos:start="81:14" pos:end="81:22">[<expr pos:start="81:15" pos:end="81:21"><name pos:start="81:15" pos:end="81:21">scc_cnt</name></expr>]</index></name><operator pos:start="81:23" pos:end="81:24">+=</operator><name pos:start="81:25" pos:end="81:29"><name pos:start="81:25" pos:end="81:26">mp</name><index pos:start="81:27" pos:end="81:29">[<expr pos:start="81:28" pos:end="81:28"><name pos:start="81:28" pos:end="81:28">x</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="82:13" pos:end="84:13"><if pos:start="82:13" pos:end="84:13">if <condition pos:start="82:16" pos:end="82:21">(<expr pos:start="82:17" pos:end="82:20"><name pos:start="82:17" pos:end="82:17">x</name><operator pos:start="82:18" pos:end="82:19">==</operator><name pos:start="82:20" pos:end="82:20">u</name></expr>)</condition><block pos:start="82:22" pos:end="84:13">{<block_content pos:start="83:17" pos:end="83:22">
                <break pos:start="83:17" pos:end="83:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function pos:start="88:1" pos:end="98:1"><type pos:start="88:1" pos:end="88:3"><name pos:start="88:1" pos:end="88:3">int</name></type> <name pos:start="88:5" pos:end="88:7">dfs</name><parameter_list pos:start="88:8" pos:end="88:14">(<parameter pos:start="88:9" pos:end="88:13"><decl pos:start="88:9" pos:end="88:13"><type pos:start="88:9" pos:end="88:11"><name pos:start="88:9" pos:end="88:11">int</name></type> <name pos:start="88:13" pos:end="88:13">u</name></decl></parameter>)</parameter_list><block pos:start="88:15" pos:end="98:1">{<block_content pos:start="89:5" pos:end="97:29">
    <if_stmt pos:start="89:5" pos:end="91:5"><if pos:start="89:5" pos:end="91:5">if <condition pos:start="89:8" pos:end="89:17">(<expr pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:12"><name pos:start="89:9" pos:end="89:9">f</name><index pos:start="89:10" pos:end="89:12">[<expr pos:start="89:11" pos:end="89:11"><name pos:start="89:11" pos:end="89:11">u</name></expr>]</index></name><operator pos:start="89:13" pos:end="89:14">!=</operator><operator pos:start="89:15" pos:end="89:15">-</operator><literal type="number" pos:start="89:16" pos:end="89:16">1</literal></expr>)</condition><block pos:start="89:18" pos:end="91:5">{<block_content pos:start="90:9" pos:end="90:20">
        <return pos:start="90:9" pos:end="90:20">return <expr pos:start="90:16" pos:end="90:19"><name pos:start="90:16" pos:end="90:19"><name pos:start="90:16" pos:end="90:16">f</name><index pos:start="90:17" pos:end="90:19">[<expr pos:start="90:18" pos:end="90:18"><name pos:start="90:18" pos:end="90:18">u</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="92:5" pos:end="92:14"><decl pos:start="92:5" pos:end="92:13"><type pos:start="92:5" pos:end="92:7"><name pos:start="92:5" pos:end="92:7">int</name></type> <name pos:start="92:9" pos:end="92:11">res</name><init pos:start="92:12" pos:end="92:13">=<expr pos:start="92:13" pos:end="92:13"><literal type="number" pos:start="92:13" pos:end="92:13">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="93:5" pos:end="96:5">for <control pos:start="93:9" pos:end="93:39">(<init pos:start="93:10" pos:end="93:24"><decl pos:start="93:10" pos:end="93:23"><type pos:start="93:10" pos:end="93:12"><name pos:start="93:10" pos:end="93:12">int</name></type> <name pos:start="93:14" pos:end="93:14">i</name><init pos:start="93:15" pos:end="93:23">=<expr pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:20">new_h</name><index pos:start="93:21" pos:end="93:23">[<expr pos:start="93:22" pos:end="93:22"><name pos:start="93:22" pos:end="93:22">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:26"><operator pos:start="93:25" pos:end="93:25">~</operator><name pos:start="93:26" pos:end="93:26">i</name></expr>;</condition><incr pos:start="93:28" pos:end="93:38"><expr pos:start="93:28" pos:end="93:38"><name pos:start="93:28" pos:end="93:28">i</name><operator pos:start="93:29" pos:end="93:29">=</operator><name pos:start="93:30" pos:end="93:38"><name pos:start="93:30" pos:end="93:35">new_ne</name><index pos:start="93:36" pos:end="93:38">[<expr pos:start="93:37" pos:end="93:37"><name pos:start="93:37" pos:end="93:37">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="93:40" pos:end="96:5">{<block_content pos:start="94:9" pos:end="95:28">
        <decl_stmt pos:start="94:9" pos:end="94:23"><decl pos:start="94:9" pos:end="94:22"><type pos:start="94:9" pos:end="94:11"><name pos:start="94:9" pos:end="94:11">int</name></type> <name pos:start="94:13" pos:end="94:13">v</name><init pos:start="94:14" pos:end="94:22">=<expr pos:start="94:15" pos:end="94:22"><name pos:start="94:15" pos:end="94:22"><name pos:start="94:15" pos:end="94:19">new_e</name><index pos:start="94:20" pos:end="94:22">[<expr pos:start="94:21" pos:end="94:21"><name pos:start="94:21" pos:end="94:21">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:11">res</name><operator pos:start="95:12" pos:end="95:12">=</operator><call pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:15">max</name><argument_list pos:start="95:16" pos:end="95:27">(<argument pos:start="95:17" pos:end="95:19"><expr pos:start="95:17" pos:end="95:19"><name pos:start="95:17" pos:end="95:19">res</name></expr></argument>,<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><call pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:23">dfs</name><argument_list pos:start="95:24" pos:end="95:26">(<argument pos:start="95:25" pos:end="95:25"><expr pos:start="95:25" pos:end="95:25"><name pos:start="95:25" pos:end="95:25">v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="97:5" pos:end="97:29">return <expr pos:start="97:12" pos:end="97:28"><name pos:start="97:12" pos:end="97:15"><name pos:start="97:12" pos:end="97:12">f</name><index pos:start="97:13" pos:end="97:15">[<expr pos:start="97:14" pos:end="97:14"><name pos:start="97:14" pos:end="97:14">u</name></expr>]</index></name><operator pos:start="97:16" pos:end="97:16">=</operator><name pos:start="97:17" pos:end="97:19">res</name><operator pos:start="97:20" pos:end="97:20">+</operator><name pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:25">new_w</name><index pos:start="97:26" pos:end="97:28">[<expr pos:start="97:27" pos:end="97:27"><name pos:start="97:27" pos:end="97:27">u</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function pos:start="99:1" pos:end="172:1"><type pos:start="99:1" pos:end="99:3"><name pos:start="99:1" pos:end="99:3">int</name></type> <name pos:start="99:5" pos:end="99:8">main</name><parameter_list pos:start="99:9" pos:end="99:10">()</parameter_list><block pos:start="99:11" pos:end="172:1">{<block_content pos:start="100:5" pos:end="171:13">
    <expr_stmt pos:start="100:5" pos:end="100:13"><expr pos:start="100:5" pos:end="100:12"><call pos:start="100:5" pos:end="100:12"><name pos:start="100:5" pos:end="100:10">c_plus</name><argument_list pos:start="100:11" pos:end="100:12">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:11"><expr pos:start="101:5" pos:end="101:10"><call pos:start="101:5" pos:end="101:10"><name pos:start="101:5" pos:end="101:8">init</name><argument_list pos:start="101:9" pos:end="101:10">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="102:5" pos:end="102:14"><decl pos:start="102:5" pos:end="102:13"><type pos:start="102:5" pos:end="102:7"><name pos:start="102:5" pos:end="102:7">int</name></type> <name pos:start="102:9" pos:end="102:11">cnt</name><init pos:start="102:12" pos:end="102:13">=<expr pos:start="102:13" pos:end="102:13"><literal type="number" pos:start="102:13" pos:end="102:13">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:14"><expr pos:start="103:5" pos:end="103:13"><name pos:start="103:5" pos:end="103:7">cin</name><operator pos:start="103:8" pos:end="103:9">&gt;&gt;</operator><name pos:start="103:10" pos:end="103:10">n</name><operator pos:start="103:11" pos:end="103:12">&gt;&gt;</operator><name pos:start="103:13" pos:end="103:13">m</name></expr>;</expr_stmt>
    <macro pos:start="104:5" pos:end="104:15"><name pos:start="104:5" pos:end="104:8">_for</name><argument_list pos:start="104:9" pos:end="104:15">(<argument pos:start="104:10" pos:end="104:10">i</argument>,<argument pos:start="104:12" pos:end="104:12"><literal type="number" pos:start="104:12" pos:end="104:12">0</literal></argument>,<argument pos:start="104:14" pos:end="104:14">n</argument>)</argument_list></macro><block pos:start="104:16" pos:end="111:5">{<block_content pos:start="105:9" pos:end="110:9">
        <expr_stmt pos:start="105:9" pos:end="105:18"><expr pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:11">cin</name><operator pos:start="105:12" pos:end="105:13">&gt;&gt;</operator><name pos:start="105:14" pos:end="105:17"><name pos:start="105:14" pos:end="105:14">a</name><index pos:start="105:15" pos:end="105:17">[<expr pos:start="105:16" pos:end="105:16"><name pos:start="105:16" pos:end="105:16">i</name></expr>]</index></name></expr>;</expr_stmt>
        <for pos:start="106:9" pos:end="110:9">for <control pos:start="106:13" pos:end="106:25">(<init pos:start="106:14" pos:end="106:24"><decl pos:start="106:14" pos:end="106:24"><type pos:start="106:14" pos:end="106:17"><name pos:start="106:14" pos:end="106:17">auto</name></type> <name pos:start="106:19" pos:end="106:19">c</name><range pos:start="106:20" pos:end="106:24">:<expr pos:start="106:21" pos:end="106:24"><name pos:start="106:21" pos:end="106:24"><name pos:start="106:21" pos:end="106:21">a</name><index pos:start="106:22" pos:end="106:24">[<expr pos:start="106:23" pos:end="106:23"><name pos:start="106:23" pos:end="106:23">i</name></expr>]</index></name></expr></range></decl></init>)</control><block pos:start="106:26" pos:end="110:9">{<block_content pos:start="107:13" pos:end="109:13">
            <if_stmt pos:start="107:13" pos:end="109:13"><if pos:start="107:13" pos:end="109:13">if <condition pos:start="107:16" pos:end="107:23">(<expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:17">c</name><operator pos:start="107:18" pos:end="107:19">==</operator><literal type="char" pos:start="107:20" pos:end="107:22">'*'</literal></expr>)</condition><block pos:start="107:24" pos:end="109:13">{<block_content pos:start="108:17" pos:end="108:22">
                <expr_stmt pos:start="108:17" pos:end="108:22"><expr pos:start="108:17" pos:end="108:21"><name pos:start="108:17" pos:end="108:19">cnt</name><operator pos:start="108:20" pos:end="108:21">++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <macro pos:start="112:5" pos:end="112:17"><name pos:start="112:5" pos:end="112:8">_for</name><argument_list pos:start="112:9" pos:end="112:17">(<argument pos:start="112:10" pos:end="112:10">i</argument>,<argument pos:start="112:12" pos:end="112:12"><literal type="number" pos:start="112:12" pos:end="112:12">0</literal></argument>,<argument pos:start="112:14" pos:end="112:16">cnt</argument>)</argument_list></macro><block pos:start="112:18" pos:end="116:5">{<block_content pos:start="113:9" pos:end="115:28">
        <decl_stmt pos:start="113:9" pos:end="113:18"><decl pos:start="113:9" pos:end="113:14"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:14">ex</name></decl>,<decl pos:start="113:16" pos:end="113:17"><type ref="prev" pos:start="113:9" pos:end="113:11"/><name pos:start="113:16" pos:end="113:17">ey</name></decl>;</decl_stmt>
        <expr_stmt pos:start="114:9" pos:end="114:20"><expr pos:start="114:9" pos:end="114:19"><name pos:start="114:9" pos:end="114:11">cin</name><operator pos:start="114:12" pos:end="114:13">&gt;&gt;</operator><name pos:start="114:14" pos:end="114:15">ex</name><operator pos:start="114:16" pos:end="114:17">&gt;&gt;</operator><name pos:start="114:18" pos:end="114:19">ey</name></expr>;</expr_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><call pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:14"><name pos:start="115:9" pos:end="115:9">q</name><operator pos:start="115:10" pos:end="115:10">.</operator><name pos:start="115:11" pos:end="115:14">push</name></name><argument_list pos:start="115:15" pos:end="115:27">(<argument pos:start="115:16" pos:end="115:26"><expr pos:start="115:16" pos:end="115:26"><call pos:start="115:16" pos:end="115:26"><name pos:start="115:16" pos:end="115:19">node</name><argument_list pos:start="115:20" pos:end="115:26">(<argument pos:start="115:21" pos:end="115:22"><expr pos:start="115:21" pos:end="115:22"><name pos:start="115:21" pos:end="115:22">ex</name></expr></argument>,<argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><name pos:start="115:24" pos:end="115:25">ey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro pos:start="117:5" pos:end="117:15"><name pos:start="117:5" pos:end="117:8">_for</name><argument_list pos:start="117:9" pos:end="117:15">(<argument pos:start="117:10" pos:end="117:10">i</argument>,<argument pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></argument>,<argument pos:start="117:14" pos:end="117:14">n</argument>)</argument_list></macro><block pos:start="117:16" pos:end="142:5">{<block_content pos:start="118:9" pos:end="141:9">
        <macro pos:start="118:9" pos:end="118:19"><name pos:start="118:9" pos:end="118:12">_for</name><argument_list pos:start="118:13" pos:end="118:19">(<argument pos:start="118:14" pos:end="118:14">j</argument>,<argument pos:start="118:16" pos:end="118:16"><literal type="number" pos:start="118:16" pos:end="118:16">0</literal></argument>,<argument pos:start="118:18" pos:end="118:18">m</argument>)</argument_list></macro><block pos:start="118:20" pos:end="141:9">{<block_content pos:start="119:13" pos:end="140:13">
            <if_stmt pos:start="119:13" pos:end="122:13"><if pos:start="119:13" pos:end="122:13">if <condition pos:start="119:16" pos:end="119:29">(<expr pos:start="119:17" pos:end="119:28"><name pos:start="119:17" pos:end="119:23"><name pos:start="119:17" pos:end="119:17">a</name><index pos:start="119:18" pos:end="119:20">[<expr pos:start="119:19" pos:end="119:19"><name pos:start="119:19" pos:end="119:19">i</name></expr>]</index><index pos:start="119:21" pos:end="119:23">[<expr pos:start="119:22" pos:end="119:22"><name pos:start="119:22" pos:end="119:22">j</name></expr>]</index></name><operator pos:start="119:24" pos:end="119:25">==</operator><literal type="char" pos:start="119:26" pos:end="119:28">'#'</literal></expr>)</condition><block pos:start="119:30" pos:end="122:13">{<block_content pos:start="120:17" pos:end="121:25">
                <expr_stmt pos:start="120:17" pos:end="120:32"><expr pos:start="120:17" pos:end="120:31"><name pos:start="120:17" pos:end="120:26"><name pos:start="120:17" pos:end="120:18">mp</name><index pos:start="120:19" pos:end="120:26">[<expr pos:start="120:20" pos:end="120:25"><call pos:start="120:20" pos:end="120:25"><name pos:start="120:20" pos:end="120:20">c</name><argument_list pos:start="120:21" pos:end="120:25">(<argument pos:start="120:22" pos:end="120:22"><expr pos:start="120:22" pos:end="120:22"><name pos:start="120:22" pos:end="120:22">i</name></expr></argument>,<argument pos:start="120:24" pos:end="120:24"><expr pos:start="120:24" pos:end="120:24"><name pos:start="120:24" pos:end="120:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="120:27" pos:end="120:27">=</operator><operator pos:start="120:28" pos:end="120:28">-</operator><name pos:start="120:29" pos:end="120:31">INF</name></expr>;</expr_stmt>
                <continue pos:start="121:17" pos:end="121:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:29">(<expr pos:start="123:17" pos:end="123:28"><name pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:17">a</name><index pos:start="123:18" pos:end="123:20">[<expr pos:start="123:19" pos:end="123:19"><name pos:start="123:19" pos:end="123:19">i</name></expr>]</index><index pos:start="123:21" pos:end="123:23">[<expr pos:start="123:22" pos:end="123:22"><name pos:start="123:22" pos:end="123:22">j</name></expr>]</index></name><operator pos:start="123:24" pos:end="123:25">==</operator><literal type="char" pos:start="123:26" pos:end="123:28">'*'</literal></expr>)</condition><block pos:start="123:30" pos:end="127:13">{<block_content pos:start="124:17" pos:end="126:24">
                <expr_stmt pos:start="124:17" pos:end="124:55"><expr pos:start="124:17" pos:end="124:54"><call pos:start="124:17" pos:end="124:54"><name pos:start="124:17" pos:end="124:19">add</name><argument_list pos:start="124:20" pos:end="124:54">(<argument pos:start="124:21" pos:end="124:26"><expr pos:start="124:21" pos:end="124:26"><call pos:start="124:21" pos:end="124:26"><name pos:start="124:21" pos:end="124:21">c</name><argument_list pos:start="124:22" pos:end="124:26">(<argument pos:start="124:23" pos:end="124:23"><expr pos:start="124:23" pos:end="124:23"><name pos:start="124:23" pos:end="124:23">i</name></expr></argument>,<argument pos:start="124:25" pos:end="124:25"><expr pos:start="124:25" pos:end="124:25"><name pos:start="124:25" pos:end="124:25">j</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="124:28" pos:end="124:53"><expr pos:start="124:28" pos:end="124:53"><call pos:start="124:28" pos:end="124:53"><name pos:start="124:28" pos:end="124:28">c</name><argument_list pos:start="124:29" pos:end="124:53">(<argument pos:start="124:30" pos:end="124:40"><expr pos:start="124:30" pos:end="124:40"><call pos:start="124:30" pos:end="124:38"><name pos:start="124:30" pos:end="124:36"><name pos:start="124:30" pos:end="124:30">q</name><operator pos:start="124:31" pos:end="124:31">.</operator><name pos:start="124:32" pos:end="124:36">front</name></name><argument_list pos:start="124:37" pos:end="124:38">()</argument_list></call><operator pos:start="124:39" pos:end="124:39">.</operator><name pos:start="124:40" pos:end="124:40">x</name></expr></argument>,<argument pos:start="124:42" pos:end="124:52"><expr pos:start="124:42" pos:end="124:52"><call pos:start="124:42" pos:end="124:50"><name pos:start="124:42" pos:end="124:48"><name pos:start="124:42" pos:end="124:42">q</name><operator pos:start="124:43" pos:end="124:43">.</operator><name pos:start="124:44" pos:end="124:48">front</name></name><argument_list pos:start="124:49" pos:end="124:50">()</argument_list></call><operator pos:start="124:51" pos:end="124:51">.</operator><name pos:start="124:52" pos:end="124:52">y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="125:17" pos:end="125:29"><expr pos:start="125:17" pos:end="125:28"><name pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:18">mp</name><index pos:start="125:19" pos:end="125:26">[<expr pos:start="125:20" pos:end="125:25"><call pos:start="125:20" pos:end="125:25"><name pos:start="125:20" pos:end="125:20">c</name><argument_list pos:start="125:21" pos:end="125:25">(<argument pos:start="125:22" pos:end="125:22"><expr pos:start="125:22" pos:end="125:22"><name pos:start="125:22" pos:end="125:22">i</name></expr></argument>,<argument pos:start="125:24" pos:end="125:24"><expr pos:start="125:24" pos:end="125:24"><name pos:start="125:24" pos:end="125:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="125:27" pos:end="125:27">=</operator><literal type="number" pos:start="125:28" pos:end="125:28">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="126:17" pos:end="126:24"><expr pos:start="126:17" pos:end="126:23"><call pos:start="126:17" pos:end="126:23"><name pos:start="126:17" pos:end="126:21"><name pos:start="126:17" pos:end="126:17">q</name><operator pos:start="126:18" pos:end="126:18">.</operator><name pos:start="126:19" pos:end="126:21">pop</name></name><argument_list pos:start="126:22" pos:end="126:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="128:13" pos:end="132:13"><if pos:start="128:13" pos:end="132:13">if <condition pos:start="128:16" pos:end="128:21">(<expr pos:start="128:17" pos:end="128:20"><name pos:start="128:17" pos:end="128:17">i</name><operator pos:start="128:18" pos:end="128:19">!=</operator><literal type="number" pos:start="128:20" pos:end="128:20">0</literal></expr>)</condition><block pos:start="128:22" pos:end="132:13">{<block_content pos:start="129:17" pos:end="131:17">
                <if_stmt pos:start="129:17" pos:end="131:17"><if pos:start="129:17" pos:end="131:17">if <condition pos:start="129:20" pos:end="129:35">(<expr pos:start="129:21" pos:end="129:34"><name pos:start="129:21" pos:end="129:29"><name pos:start="129:21" pos:end="129:21">a</name><index pos:start="129:22" pos:end="129:26">[<expr pos:start="129:23" pos:end="129:25"><name pos:start="129:23" pos:end="129:23">i</name><operator pos:start="129:24" pos:end="129:24">-</operator><literal type="number" pos:start="129:25" pos:end="129:25">1</literal></expr>]</index><index pos:start="129:27" pos:end="129:29">[<expr pos:start="129:28" pos:end="129:28"><name pos:start="129:28" pos:end="129:28">j</name></expr>]</index></name><operator pos:start="129:30" pos:end="129:31">!=</operator><literal type="char" pos:start="129:32" pos:end="129:34">'#'</literal></expr>)</condition><block pos:start="129:36" pos:end="131:17">{<block_content pos:start="130:21" pos:end="130:41">
                    <expr_stmt pos:start="130:21" pos:end="130:41"><expr pos:start="130:21" pos:end="130:40"><call pos:start="130:21" pos:end="130:40"><name pos:start="130:21" pos:end="130:23">add</name><argument_list pos:start="130:24" pos:end="130:40">(<argument pos:start="130:25" pos:end="130:32"><expr pos:start="130:25" pos:end="130:32"><call pos:start="130:25" pos:end="130:32"><name pos:start="130:25" pos:end="130:25">c</name><argument_list pos:start="130:26" pos:end="130:32">(<argument pos:start="130:27" pos:end="130:29"><expr pos:start="130:27" pos:end="130:29"><name pos:start="130:27" pos:end="130:27">i</name><operator pos:start="130:28" pos:end="130:28">-</operator><literal type="number" pos:start="130:29" pos:end="130:29">1</literal></expr></argument>,<argument pos:start="130:31" pos:end="130:31"><expr pos:start="130:31" pos:end="130:31"><name pos:start="130:31" pos:end="130:31">j</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="130:34" pos:end="130:39"><expr pos:start="130:34" pos:end="130:39"><call pos:start="130:34" pos:end="130:39"><name pos:start="130:34" pos:end="130:34">c</name><argument_list pos:start="130:35" pos:end="130:39">(<argument pos:start="130:36" pos:end="130:36"><expr pos:start="130:36" pos:end="130:36"><name pos:start="130:36" pos:end="130:36">i</name></expr></argument>,<argument pos:start="130:38" pos:end="130:38"><expr pos:start="130:38" pos:end="130:38"><name pos:start="130:38" pos:end="130:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="133:13" pos:end="137:13"><if pos:start="133:13" pos:end="137:13">if <condition pos:start="133:16" pos:end="133:21">(<expr pos:start="133:17" pos:end="133:20"><name pos:start="133:17" pos:end="133:17">j</name><operator pos:start="133:18" pos:end="133:19">!=</operator><literal type="number" pos:start="133:20" pos:end="133:20">0</literal></expr>)</condition><block pos:start="133:22" pos:end="137:13">{<block_content pos:start="134:17" pos:end="136:17">
                <if_stmt pos:start="134:17" pos:end="136:17"><if pos:start="134:17" pos:end="136:17">if <condition pos:start="134:20" pos:end="134:35">(<expr pos:start="134:21" pos:end="134:34"><name pos:start="134:21" pos:end="134:29"><name pos:start="134:21" pos:end="134:21">a</name><index pos:start="134:22" pos:end="134:24">[<expr pos:start="134:23" pos:end="134:23"><name pos:start="134:23" pos:end="134:23">i</name></expr>]</index><index pos:start="134:25" pos:end="134:29">[<expr pos:start="134:26" pos:end="134:28"><name pos:start="134:26" pos:end="134:26">j</name><operator pos:start="134:27" pos:end="134:27">-</operator><literal type="number" pos:start="134:28" pos:end="134:28">1</literal></expr>]</index></name><operator pos:start="134:30" pos:end="134:31">!=</operator><literal type="char" pos:start="134:32" pos:end="134:34">'#'</literal></expr>)</condition><block pos:start="134:36" pos:end="136:17">{<block_content pos:start="135:21" pos:end="135:41">
                    <expr_stmt pos:start="135:21" pos:end="135:41"><expr pos:start="135:21" pos:end="135:40"><call pos:start="135:21" pos:end="135:40"><name pos:start="135:21" pos:end="135:23">add</name><argument_list pos:start="135:24" pos:end="135:40">(<argument pos:start="135:25" pos:end="135:32"><expr pos:start="135:25" pos:end="135:32"><call pos:start="135:25" pos:end="135:32"><name pos:start="135:25" pos:end="135:25">c</name><argument_list pos:start="135:26" pos:end="135:32">(<argument pos:start="135:27" pos:end="135:27"><expr pos:start="135:27" pos:end="135:27"><name pos:start="135:27" pos:end="135:27">i</name></expr></argument>,<argument pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:29">j</name><operator pos:start="135:30" pos:end="135:30">-</operator><literal type="number" pos:start="135:31" pos:end="135:31">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="135:34" pos:end="135:39"><expr pos:start="135:34" pos:end="135:39"><call pos:start="135:34" pos:end="135:39"><name pos:start="135:34" pos:end="135:34">c</name><argument_list pos:start="135:35" pos:end="135:39">(<argument pos:start="135:36" pos:end="135:36"><expr pos:start="135:36" pos:end="135:36"><name pos:start="135:36" pos:end="135:36">i</name></expr></argument>,<argument pos:start="135:38" pos:end="135:38"><expr pos:start="135:38" pos:end="135:38"><name pos:start="135:38" pos:end="135:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="138:13" pos:end="140:13"><if pos:start="138:13" pos:end="140:13">if <condition pos:start="138:16" pos:end="138:34">(<expr pos:start="138:17" pos:end="138:33"><operator pos:start="138:17" pos:end="138:17">!</operator><call pos:start="138:18" pos:end="138:33"><name pos:start="138:18" pos:end="138:25"><name pos:start="138:18" pos:end="138:19">mp</name><operator pos:start="138:20" pos:end="138:20">.</operator><name pos:start="138:21" pos:end="138:25">count</name></name><argument_list pos:start="138:26" pos:end="138:33">(<argument pos:start="138:27" pos:end="138:32"><expr pos:start="138:27" pos:end="138:32"><call pos:start="138:27" pos:end="138:32"><name pos:start="138:27" pos:end="138:27">c</name><argument_list pos:start="138:28" pos:end="138:32">(<argument pos:start="138:29" pos:end="138:29"><expr pos:start="138:29" pos:end="138:29"><name pos:start="138:29" pos:end="138:29">i</name></expr></argument>,<argument pos:start="138:31" pos:end="138:31"><expr pos:start="138:31" pos:end="138:31"><name pos:start="138:31" pos:end="138:31">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="138:35" pos:end="140:13">{<block_content pos:start="139:17" pos:end="139:39">
                <expr_stmt pos:start="139:17" pos:end="139:39"><expr pos:start="139:17" pos:end="139:38"><name pos:start="139:17" pos:end="139:26"><name pos:start="139:17" pos:end="139:18">mp</name><index pos:start="139:19" pos:end="139:26">[<expr pos:start="139:20" pos:end="139:25"><call pos:start="139:20" pos:end="139:25"><name pos:start="139:20" pos:end="139:20">c</name><argument_list pos:start="139:21" pos:end="139:25">(<argument pos:start="139:22" pos:end="139:22"><expr pos:start="139:22" pos:end="139:22"><name pos:start="139:22" pos:end="139:22">i</name></expr></argument>,<argument pos:start="139:24" pos:end="139:24"><expr pos:start="139:24" pos:end="139:24"><name pos:start="139:24" pos:end="139:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="139:27" pos:end="139:27">=</operator><name pos:start="139:28" pos:end="139:34"><name pos:start="139:28" pos:end="139:28">a</name><index pos:start="139:29" pos:end="139:31">[<expr pos:start="139:30" pos:end="139:30"><name pos:start="139:30" pos:end="139:30">i</name></expr>]</index><index pos:start="139:32" pos:end="139:34">[<expr pos:start="139:33" pos:end="139:33"><name pos:start="139:33" pos:end="139:33">j</name></expr>]</index></name><operator pos:start="139:35" pos:end="139:35">-</operator><literal type="char" pos:start="139:36" pos:end="139:38">'0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
    <decl_stmt pos:start="143:5" pos:end="143:17"><decl pos:start="143:5" pos:end="143:16"><type pos:start="143:5" pos:end="143:7"><name pos:start="143:5" pos:end="143:7">int</name></type> <name pos:start="143:9" pos:end="143:12">ncnt</name><init pos:start="143:13" pos:end="143:16">=<expr pos:start="143:14" pos:end="143:16"><name pos:start="143:14" pos:end="143:14">n</name><operator pos:start="143:15" pos:end="143:15">*</operator><name pos:start="143:16" pos:end="143:16">m</name></expr></init></decl>;</decl_stmt>
    <macro pos:start="144:5" pos:end="144:20"><name pos:start="144:5" pos:end="144:8">_for</name><argument_list pos:start="144:9" pos:end="144:20">(<argument pos:start="144:10" pos:end="144:10">i</argument>,<argument pos:start="144:12" pos:end="144:12"><literal type="number" pos:start="144:12" pos:end="144:12">1</literal></argument>,<argument pos:start="144:14" pos:end="144:19">ncnt+<literal type="number" pos:start="144:19" pos:end="144:19">1</literal></argument>)</argument_list></macro><block pos:start="144:21" pos:end="148:5">{<block_content pos:start="145:9" pos:end="147:9">
        <if_stmt pos:start="145:9" pos:end="147:9"><if pos:start="145:9" pos:end="147:9">if <condition pos:start="145:12" pos:end="145:35">(<expr pos:start="145:13" pos:end="145:34"><operator pos:start="145:13" pos:end="145:13">!</operator><name pos:start="145:14" pos:end="145:19"><name pos:start="145:14" pos:end="145:16">dfn</name><index pos:start="145:17" pos:end="145:19">[<expr pos:start="145:18" pos:end="145:18"><name pos:start="145:18" pos:end="145:18">i</name></expr>]</index></name> <operator pos:start="145:21" pos:end="145:22">&amp;&amp;</operator> <name pos:start="145:24" pos:end="145:28"><name pos:start="145:24" pos:end="145:25">mp</name><index pos:start="145:26" pos:end="145:28">[<expr pos:start="145:27" pos:end="145:27"><name pos:start="145:27" pos:end="145:27">i</name></expr>]</index></name><operator pos:start="145:29" pos:end="145:30">!=</operator><operator pos:start="145:31" pos:end="145:31">-</operator><name pos:start="145:32" pos:end="145:34">INF</name></expr>)</condition><block pos:start="145:36" pos:end="147:9">{<block_content pos:start="146:13" pos:end="146:22">
            <expr_stmt pos:start="146:13" pos:end="146:22"><expr pos:start="146:13" pos:end="146:21"><call pos:start="146:13" pos:end="146:21"><name pos:start="146:13" pos:end="146:18">tarjan</name><argument_list pos:start="146:19" pos:end="146:21">(<argument pos:start="146:20" pos:end="146:20"><expr pos:start="146:20" pos:end="146:20"><name pos:start="146:20" pos:end="146:20">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt pos:start="149:5" pos:end="149:15"><expr pos:start="149:5" pos:end="149:14"><call pos:start="149:5" pos:end="149:14"><name pos:start="149:5" pos:end="149:12">new_init</name><argument_list pos:start="149:13" pos:end="149:14">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="150:5" pos:end="150:26"><decl pos:start="150:5" pos:end="150:25"><type pos:start="150:5" pos:end="150:7"><name pos:start="150:5" pos:end="150:7">int</name></type> <name pos:start="150:9" pos:end="150:16">first_id</name><init pos:start="150:17" pos:end="150:25">=<expr pos:start="150:18" pos:end="150:25"><name pos:start="150:18" pos:end="150:25"><name pos:start="150:18" pos:end="150:22">sccno</name><index pos:start="150:23" pos:end="150:25">[<expr pos:start="150:24" pos:end="150:24"><literal type="number" pos:start="150:24" pos:end="150:24">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro pos:start="151:5" pos:end="151:20"><name pos:start="151:5" pos:end="151:8">_for</name><argument_list pos:start="151:9" pos:end="151:20">(<argument pos:start="151:10" pos:end="151:10">u</argument>,<argument pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">1</literal></argument>,<argument pos:start="151:14" pos:end="151:19">ncnt+<literal type="number" pos:start="151:19" pos:end="151:19">1</literal></argument>)</argument_list></macro><block pos:start="151:21" pos:end="167:5">{<block_content pos:start="152:9" pos:end="166:9">
        <for pos:start="152:9" pos:end="166:9">for <control pos:start="152:13" pos:end="152:35">(<init pos:start="152:14" pos:end="152:24"><decl pos:start="152:14" pos:end="152:23"><type pos:start="152:14" pos:end="152:16"><name pos:start="152:14" pos:end="152:16">int</name></type> <name pos:start="152:18" pos:end="152:18">i</name><init pos:start="152:19" pos:end="152:23">=<expr pos:start="152:20" pos:end="152:23"><name pos:start="152:20" pos:end="152:23"><name pos:start="152:20" pos:end="152:20">h</name><index pos:start="152:21" pos:end="152:23">[<expr pos:start="152:22" pos:end="152:22"><name pos:start="152:22" pos:end="152:22">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="152:25" pos:end="152:27"><expr pos:start="152:25" pos:end="152:26"><operator pos:start="152:25" pos:end="152:25">~</operator><name pos:start="152:26" pos:end="152:26">i</name></expr>;</condition><incr pos:start="152:28" pos:end="152:34"><expr pos:start="152:28" pos:end="152:34"><name pos:start="152:28" pos:end="152:28">i</name><operator pos:start="152:29" pos:end="152:29">=</operator><name pos:start="152:30" pos:end="152:34"><name pos:start="152:30" pos:end="152:31">ne</name><index pos:start="152:32" pos:end="152:34">[<expr pos:start="152:33" pos:end="152:33"><name pos:start="152:33" pos:end="152:33">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="152:36" pos:end="166:9">{<block_content pos:start="153:13" pos:end="165:13">
            <decl_stmt pos:start="153:13" pos:end="153:23"><decl pos:start="153:13" pos:end="153:22"><type pos:start="153:13" pos:end="153:15"><name pos:start="153:13" pos:end="153:15">int</name></type> <name pos:start="153:17" pos:end="153:17">v</name><init pos:start="153:18" pos:end="153:22">=<expr pos:start="153:19" pos:end="153:22"><name pos:start="153:19" pos:end="153:22"><name pos:start="153:19" pos:end="153:19">e</name><index pos:start="153:20" pos:end="153:22">[<expr pos:start="153:21" pos:end="153:21"><name pos:start="153:21" pos:end="153:21">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="154:13" pos:end="165:13"><if pos:start="154:13" pos:end="165:13">if <condition pos:start="154:16" pos:end="154:70">(<expr pos:start="154:17" pos:end="154:69"><name pos:start="154:17" pos:end="154:24"><name pos:start="154:17" pos:end="154:21">sccno</name><index pos:start="154:22" pos:end="154:24">[<expr pos:start="154:23" pos:end="154:23"><name pos:start="154:23" pos:end="154:23">u</name></expr>]</index></name><operator pos:start="154:25" pos:end="154:26">!=</operator><name pos:start="154:27" pos:end="154:34"><name pos:start="154:27" pos:end="154:31">sccno</name><index pos:start="154:32" pos:end="154:34">[<expr pos:start="154:33" pos:end="154:33"><name pos:start="154:33" pos:end="154:33">v</name></expr>]</index></name> <operator pos:start="154:36" pos:end="154:37">&amp;&amp;</operator> <operator pos:start="154:39" pos:end="154:39">!</operator><call pos:start="154:40" pos:end="154:69"><name pos:start="154:40" pos:end="154:48"><name pos:start="154:40" pos:end="154:42">vis</name><operator pos:start="154:43" pos:end="154:43">.</operator><name pos:start="154:44" pos:end="154:48">count</name></name><argument_list pos:start="154:49" pos:end="154:69">(<argument pos:start="154:50" pos:end="154:68"><expr pos:start="154:50" pos:end="154:68"><block pos:start="154:50" pos:end="154:68">{<expr pos:start="154:51" pos:end="154:58"><name pos:start="154:51" pos:end="154:58"><name pos:start="154:51" pos:end="154:55">sccno</name><index pos:start="154:56" pos:end="154:58">[<expr pos:start="154:57" pos:end="154:57"><name pos:start="154:57" pos:end="154:57">u</name></expr>]</index></name></expr>,<expr pos:start="154:60" pos:end="154:67"><name pos:start="154:60" pos:end="154:67"><name pos:start="154:60" pos:end="154:64">sccno</name><index pos:start="154:65" pos:end="154:67">[<expr pos:start="154:66" pos:end="154:66"><name pos:start="154:66" pos:end="154:66">v</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="154:71" pos:end="165:13">{<block_content pos:start="155:17" pos:end="164:17">
                <expr_stmt pos:start="155:17" pos:end="155:48"><expr pos:start="155:17" pos:end="155:47"><call pos:start="155:17" pos:end="155:47"><name pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:19">vis</name><operator pos:start="155:20" pos:end="155:20">.</operator><name pos:start="155:21" pos:end="155:26">insert</name></name><argument_list pos:start="155:27" pos:end="155:47">(<argument pos:start="155:28" pos:end="155:46"><expr pos:start="155:28" pos:end="155:46"><block pos:start="155:28" pos:end="155:46">{<expr pos:start="155:29" pos:end="155:36"><name pos:start="155:29" pos:end="155:36"><name pos:start="155:29" pos:end="155:33">sccno</name><index pos:start="155:34" pos:end="155:36">[<expr pos:start="155:35" pos:end="155:35"><name pos:start="155:35" pos:end="155:35">u</name></expr>]</index></name></expr>,<expr pos:start="155:38" pos:end="155:45"><name pos:start="155:38" pos:end="155:45"><name pos:start="155:38" pos:end="155:42">sccno</name><index pos:start="155:43" pos:end="155:45">[<expr pos:start="155:44" pos:end="155:44"><name pos:start="155:44" pos:end="155:44">v</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="156:17" pos:end="156:43"><expr pos:start="156:17" pos:end="156:42"><call pos:start="156:17" pos:end="156:42"><name pos:start="156:17" pos:end="156:23">new_add</name><argument_list pos:start="156:24" pos:end="156:42">(<argument pos:start="156:25" pos:end="156:32"><expr pos:start="156:25" pos:end="156:32"><name pos:start="156:25" pos:end="156:32"><name pos:start="156:25" pos:end="156:29">sccno</name><index pos:start="156:30" pos:end="156:32">[<expr pos:start="156:31" pos:end="156:31"><name pos:start="156:31" pos:end="156:31">u</name></expr>]</index></name></expr></argument>,<argument pos:start="156:34" pos:end="156:41"><expr pos:start="156:34" pos:end="156:41"><name pos:start="156:34" pos:end="156:41"><name pos:start="156:34" pos:end="156:38">sccno</name><index pos:start="156:39" pos:end="156:41">[<expr pos:start="156:40" pos:end="156:40"><name pos:start="156:40" pos:end="156:40">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="157:17" pos:end="160:17"><if pos:start="157:17" pos:end="160:17">if <condition pos:start="157:20" pos:end="157:35">(<expr pos:start="157:21" pos:end="157:34"><operator pos:start="157:21" pos:end="157:21">!</operator><call pos:start="157:22" pos:end="157:34"><name pos:start="157:22" pos:end="157:31"><name pos:start="157:22" pos:end="157:25">flag</name><operator pos:start="157:26" pos:end="157:26">.</operator><name pos:start="157:27" pos:end="157:31">count</name></name><argument_list pos:start="157:32" pos:end="157:34">(<argument pos:start="157:33" pos:end="157:33"><expr pos:start="157:33" pos:end="157:33"><name pos:start="157:33" pos:end="157:33">u</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="157:36" pos:end="160:17">{<block_content pos:start="158:21" pos:end="159:35">
                    <expr_stmt pos:start="158:21" pos:end="158:42"><expr pos:start="158:21" pos:end="158:41"><name pos:start="158:21" pos:end="158:35"><name pos:start="158:21" pos:end="158:25">new_w</name><index pos:start="158:26" pos:end="158:35">[<expr pos:start="158:27" pos:end="158:34"><name pos:start="158:27" pos:end="158:34"><name pos:start="158:27" pos:end="158:31">sccno</name><index pos:start="158:32" pos:end="158:34">[<expr pos:start="158:33" pos:end="158:33"><name pos:start="158:33" pos:end="158:33">u</name></expr>]</index></name></expr>]</index></name><operator pos:start="158:36" pos:end="158:37">+=</operator><name pos:start="158:38" pos:end="158:41"><name pos:start="158:38" pos:end="158:38">w</name><index pos:start="158:39" pos:end="158:41">[<expr pos:start="158:40" pos:end="158:40"><name pos:start="158:40" pos:end="158:40">u</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="159:21" pos:end="159:35"><expr pos:start="159:21" pos:end="159:34"><call pos:start="159:21" pos:end="159:34"><name pos:start="159:21" pos:end="159:31"><name pos:start="159:21" pos:end="159:24">flag</name><operator pos:start="159:25" pos:end="159:25">.</operator><name pos:start="159:26" pos:end="159:31">insert</name></name><argument_list pos:start="159:32" pos:end="159:34">(<argument pos:start="159:33" pos:end="159:33"><expr pos:start="159:33" pos:end="159:33"><name pos:start="159:33" pos:end="159:33">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="161:17" pos:end="164:17"><if pos:start="161:17" pos:end="164:17">if <condition pos:start="161:20" pos:end="161:35">(<expr pos:start="161:21" pos:end="161:34"><operator pos:start="161:21" pos:end="161:21">!</operator><call pos:start="161:22" pos:end="161:34"><name pos:start="161:22" pos:end="161:31"><name pos:start="161:22" pos:end="161:25">flag</name><operator pos:start="161:26" pos:end="161:26">.</operator><name pos:start="161:27" pos:end="161:31">count</name></name><argument_list pos:start="161:32" pos:end="161:34">(<argument pos:start="161:33" pos:end="161:33"><expr pos:start="161:33" pos:end="161:33"><name pos:start="161:33" pos:end="161:33">v</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="161:36" pos:end="164:17">{<block_content pos:start="162:21" pos:end="163:35">
                    <expr_stmt pos:start="162:21" pos:end="162:42"><expr pos:start="162:21" pos:end="162:41"><name pos:start="162:21" pos:end="162:35"><name pos:start="162:21" pos:end="162:25">new_w</name><index pos:start="162:26" pos:end="162:35">[<expr pos:start="162:27" pos:end="162:34"><name pos:start="162:27" pos:end="162:34"><name pos:start="162:27" pos:end="162:31">sccno</name><index pos:start="162:32" pos:end="162:34">[<expr pos:start="162:33" pos:end="162:33"><name pos:start="162:33" pos:end="162:33">v</name></expr>]</index></name></expr>]</index></name><operator pos:start="162:36" pos:end="162:37">+=</operator><name pos:start="162:38" pos:end="162:41"><name pos:start="162:38" pos:end="162:38">w</name><index pos:start="162:39" pos:end="162:41">[<expr pos:start="162:40" pos:end="162:40"><name pos:start="162:40" pos:end="162:40">v</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="163:21" pos:end="163:35"><expr pos:start="163:21" pos:end="163:34"><call pos:start="163:21" pos:end="163:34"><name pos:start="163:21" pos:end="163:31"><name pos:start="163:21" pos:end="163:24">flag</name><operator pos:start="163:25" pos:end="163:25">.</operator><name pos:start="163:26" pos:end="163:31">insert</name></name><argument_list pos:start="163:32" pos:end="163:34">(<argument pos:start="163:33" pos:end="163:33"><expr pos:start="163:33" pos:end="163:33"><name pos:start="163:33" pos:end="163:33">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt pos:start="168:5" pos:end="168:27"><expr pos:start="168:5" pos:end="168:26"><call pos:start="168:5" pos:end="168:26"><name pos:start="168:5" pos:end="168:10">memset</name><argument_list pos:start="168:11" pos:end="168:26">(<argument pos:start="168:12" pos:end="168:12"><expr pos:start="168:12" pos:end="168:12"><name pos:start="168:12" pos:end="168:12">f</name></expr></argument>,<argument pos:start="168:14" pos:end="168:15"><expr pos:start="168:14" pos:end="168:15"><operator pos:start="168:14" pos:end="168:14">-</operator><literal type="number" pos:start="168:15" pos:end="168:15">1</literal></expr></argument>,<argument pos:start="168:17" pos:end="168:25"><expr pos:start="168:17" pos:end="168:25"><sizeof pos:start="168:17" pos:end="168:25">sizeof<argument_list pos:start="168:23" pos:end="168:25">(<argument pos:start="168:24" pos:end="168:24"><expr pos:start="168:24" pos:end="168:24"><name pos:start="168:24" pos:end="168:24">f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="169:5" pos:end="169:26"><decl pos:start="169:5" pos:end="169:25"><type pos:start="169:5" pos:end="169:7"><name pos:start="169:5" pos:end="169:7">int</name></type> <name pos:start="169:9" pos:end="169:11">ans</name><init pos:start="169:12" pos:end="169:25">=<expr pos:start="169:13" pos:end="169:25"><call pos:start="169:13" pos:end="169:25"><name pos:start="169:13" pos:end="169:15">dfs</name><argument_list pos:start="169:16" pos:end="169:25">(<argument pos:start="169:17" pos:end="169:24"><expr pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:24">first_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="170:5" pos:end="170:20"><expr pos:start="170:5" pos:end="170:19"><name pos:start="170:5" pos:end="170:8">cout</name><operator pos:start="170:9" pos:end="170:10">&lt;&lt;</operator><name pos:start="170:11" pos:end="170:13">ans</name><operator pos:start="170:14" pos:end="170:15">&lt;&lt;</operator><name pos:start="170:16" pos:end="170:19">endl</name></expr>;</expr_stmt>
    <return pos:start="171:5" pos:end="171:13">return <expr pos:start="171:12" pos:end="171:12"><literal type="number" pos:start="171:12" pos:end="171:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
