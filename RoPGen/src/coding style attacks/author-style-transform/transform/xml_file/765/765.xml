<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/765/765.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:21"><decl pos:start="3:1" pos:end="3:20"><type pos:start="3:1" pos:end="3:9"><specifier pos:start="3:1" pos:end="3:5">const</specifier> <name pos:start="3:7" pos:end="3:9">int</name></type> <name pos:start="3:11" pos:end="3:14">MAXN</name><init pos:start="3:15" pos:end="3:20">=<expr pos:start="3:16" pos:end="3:20"><literal type="number" pos:start="3:16" pos:end="3:19">2e5</literal><operator pos:start="3:19" pos:end="3:19">+</operator><literal type="number" pos:start="3:20" pos:end="3:20">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:6"><decl pos:start="4:1" pos:end="4:5"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:5">n</name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:13"><decl pos:start="5:1" pos:end="5:12"><type pos:start="5:1" pos:end="5:4"><name pos:start="5:1" pos:end="5:4">char</name></type> <name pos:start="5:6" pos:end="5:12"><name pos:start="5:6" pos:end="5:6">s</name><index pos:start="5:7" pos:end="5:12">[<expr pos:start="5:8" pos:end="5:11"><name pos:start="5:8" pos:end="5:11">MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="6:1" pos:end="29:1"><type pos:start="6:1" pos:end="6:4"><name pos:start="6:1" pos:end="6:4">bool</name></type> <name pos:start="6:6" pos:end="6:10">judge</name><parameter_list pos:start="6:11" pos:end="6:12">()</parameter_list><block pos:start="6:13" pos:end="29:1">{<block_content pos:start="7:5" pos:end="28:16">
    <if_stmt pos:start="7:5" pos:end="7:27"><if pos:start="7:5" pos:end="7:27">if<condition pos:start="7:7" pos:end="7:14">(<expr pos:start="7:8" pos:end="7:13"><name pos:start="7:8" pos:end="7:8">n</name><operator pos:start="7:9" pos:end="7:9">%</operator><literal type="number" pos:start="7:10" pos:end="7:10">8</literal><operator pos:start="7:11" pos:end="7:12">!=</operator><literal type="number" pos:start="7:13" pos:end="7:13">0</literal></expr>)</condition><block type="pseudo" pos:start="7:15" pos:end="7:27"><block_content pos:start="7:15" pos:end="7:27"><return pos:start="7:15" pos:end="7:27">return <expr pos:start="7:22" pos:end="7:26"><literal type="boolean" pos:start="7:22" pos:end="7:26">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <for pos:start="8:5" pos:end="12:5">for<control pos:start="8:8" pos:end="8:25">(<init pos:start="8:9" pos:end="8:16"><decl pos:start="8:9" pos:end="8:15"><type pos:start="8:9" pos:end="8:11"><name pos:start="8:9" pos:end="8:11">int</name></type> <name pos:start="8:13" pos:end="8:13">i</name><init pos:start="8:14" pos:end="8:15">=<expr pos:start="8:15" pos:end="8:15"><literal type="number" pos:start="8:15" pos:end="8:15">1</literal></expr></init></decl>;</init><condition pos:start="8:17" pos:end="8:21"><expr pos:start="8:17" pos:end="8:20"><name pos:start="8:17" pos:end="8:17">i</name><operator pos:start="8:18" pos:end="8:19">&lt;=</operator><name pos:start="8:20" pos:end="8:20">n</name></expr>;</condition><incr pos:start="8:22" pos:end="8:24"><expr pos:start="8:22" pos:end="8:24"><operator pos:start="8:22" pos:end="8:23">++</operator><name pos:start="8:24" pos:end="8:24">i</name></expr></incr>)</control><block pos:start="8:26" pos:end="12:5">{<block_content pos:start="9:9" pos:end="11:9">
        <if_stmt pos:start="9:9" pos:end="11:9"><if pos:start="9:9" pos:end="11:9">if<condition pos:start="9:11" pos:end="9:32">(<expr pos:start="9:12" pos:end="9:31"><name pos:start="9:12" pos:end="9:15"><name pos:start="9:12" pos:end="9:12">s</name><index pos:start="9:13" pos:end="9:15">[<expr pos:start="9:14" pos:end="9:14"><name pos:start="9:14" pos:end="9:14">i</name></expr>]</index></name><operator pos:start="9:16" pos:end="9:17">!=</operator><literal type="char" pos:start="9:18" pos:end="9:20">'0'</literal><operator pos:start="9:21" pos:end="9:22">&amp;&amp;</operator><name pos:start="9:23" pos:end="9:26"><name pos:start="9:23" pos:end="9:23">s</name><index pos:start="9:24" pos:end="9:26">[<expr pos:start="9:25" pos:end="9:25"><name pos:start="9:25" pos:end="9:25">i</name></expr>]</index></name><operator pos:start="9:27" pos:end="9:28">!=</operator><literal type="char" pos:start="9:29" pos:end="9:31">'1'</literal></expr>)</condition><block pos:start="9:33" pos:end="11:9">{<block_content pos:start="10:13" pos:end="10:25">
            <return pos:start="10:13" pos:end="10:25">return <expr pos:start="10:20" pos:end="10:24"><literal type="boolean" pos:start="10:20" pos:end="10:24">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for pos:start="13:5" pos:end="27:5">for<control pos:start="13:8" pos:end="13:26">(<init pos:start="13:9" pos:end="13:16"><decl pos:start="13:9" pos:end="13:15"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:13">i</name><init pos:start="13:14" pos:end="13:15">=<expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">1</literal></expr></init></decl>;</init><condition pos:start="13:17" pos:end="13:21"><expr pos:start="13:17" pos:end="13:20"><name pos:start="13:17" pos:end="13:17">i</name><operator pos:start="13:18" pos:end="13:19">&lt;=</operator><name pos:start="13:20" pos:end="13:20">n</name></expr>;</condition><incr pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:22">i</name><operator pos:start="13:23" pos:end="13:24">+=</operator><literal type="number" pos:start="13:25" pos:end="13:25">8</literal></expr></incr>)</control><block pos:start="13:27" pos:end="27:5">{<block_content pos:start="14:9" pos:end="26:9">
        <if_stmt pos:start="14:9" pos:end="15:25"><if pos:start="14:9" pos:end="15:25">if<condition pos:start="14:11" pos:end="14:60">(<expr pos:start="14:12" pos:end="14:59"><call pos:start="14:12" pos:end="14:31"><name pos:start="14:12" pos:end="14:18">strncmp</name><argument_list pos:start="14:19" pos:end="14:31">(<argument pos:start="14:20" pos:end="14:22"><expr pos:start="14:20" pos:end="14:22"><name pos:start="14:20" pos:end="14:20">s</name><operator pos:start="14:21" pos:end="14:21">+</operator><name pos:start="14:22" pos:end="14:22">i</name></expr></argument>,<argument pos:start="14:24" pos:end="14:28"><expr pos:start="14:24" pos:end="14:28"><literal type="string" pos:start="14:24" pos:end="14:28">"100"</literal></expr></argument>,<argument pos:start="14:30" pos:end="14:30"><expr pos:start="14:30" pos:end="14:30"><literal type="number" pos:start="14:30" pos:end="14:30">3</literal></expr></argument>)</argument_list></call><operator pos:start="14:32" pos:end="14:33">==</operator><literal type="number" pos:start="14:34" pos:end="14:34">0</literal><operator pos:start="14:35" pos:end="14:36">||</operator><call pos:start="14:37" pos:end="14:56"><name pos:start="14:37" pos:end="14:43">strncmp</name><argument_list pos:start="14:44" pos:end="14:56">(<argument pos:start="14:45" pos:end="14:47"><expr pos:start="14:45" pos:end="14:47"><name pos:start="14:45" pos:end="14:45">s</name><operator pos:start="14:46" pos:end="14:46">+</operator><name pos:start="14:47" pos:end="14:47">i</name></expr></argument>,<argument pos:start="14:49" pos:end="14:53"><expr pos:start="14:49" pos:end="14:53"><literal type="string" pos:start="14:49" pos:end="14:53">"110"</literal></expr></argument>,<argument pos:start="14:55" pos:end="14:55"><expr pos:start="14:55" pos:end="14:55"><literal type="number" pos:start="14:55" pos:end="14:55">3</literal></expr></argument>)</argument_list></call><operator pos:start="14:57" pos:end="14:58">==</operator><literal type="number" pos:start="14:59" pos:end="14:59">0</literal></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:25"><block_content pos:start="15:13" pos:end="15:25">
            <return pos:start="15:13" pos:end="15:25">return <expr pos:start="15:20" pos:end="15:24"><literal type="boolean" pos:start="15:20" pos:end="15:24">false</literal></expr>;</return></block_content></block></if></if_stmt>       
        <if_stmt pos:start="16:9" pos:end="19:9"><if pos:start="16:9" pos:end="19:9">if<condition pos:start="16:11" pos:end="16:21">(<expr pos:start="16:12" pos:end="16:20"><name pos:start="16:12" pos:end="16:15"><name pos:start="16:12" pos:end="16:12">s</name><index pos:start="16:13" pos:end="16:15">[<expr pos:start="16:14" pos:end="16:14"><name pos:start="16:14" pos:end="16:14">i</name></expr>]</index></name><operator pos:start="16:16" pos:end="16:17">==</operator><literal type="char" pos:start="16:18" pos:end="16:20">'0'</literal></expr>)</condition><block pos:start="16:22" pos:end="19:9">{<block_content pos:start="17:13" pos:end="18:17">
            <if_stmt pos:start="17:13" pos:end="17:47"><if pos:start="17:13" pos:end="17:47">if<condition pos:start="17:15" pos:end="17:34">(<expr pos:start="17:16" pos:end="17:33"><name pos:start="17:16" pos:end="17:16">i</name><operator pos:start="17:17" pos:end="17:17">+</operator><literal type="number" pos:start="17:18" pos:end="17:18">8</literal><operator pos:start="17:19" pos:end="17:19">&gt;</operator><name pos:start="17:20" pos:end="17:20">n</name><operator pos:start="17:21" pos:end="17:22">||</operator><name pos:start="17:23" pos:end="17:28"><name pos:start="17:23" pos:end="17:23">s</name><index pos:start="17:24" pos:end="17:28">[<expr pos:start="17:25" pos:end="17:27"><name pos:start="17:25" pos:end="17:25">i</name><operator pos:start="17:26" pos:end="17:26">+</operator><literal type="number" pos:start="17:27" pos:end="17:27">8</literal></expr>]</index></name><operator pos:start="17:29" pos:end="17:30">!=</operator><literal type="char" pos:start="17:31" pos:end="17:33">'0'</literal></expr>)</condition><block type="pseudo" pos:start="17:35" pos:end="17:47"><block_content pos:start="17:35" pos:end="17:47"><return pos:start="17:35" pos:end="17:47">return <expr pos:start="17:42" pos:end="17:46"><literal type="boolean" pos:start="17:42" pos:end="17:46">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="18:13" pos:end="18:17"><expr pos:start="18:13" pos:end="18:16"><name pos:start="18:13" pos:end="18:13">i</name><operator pos:start="18:14" pos:end="18:15">+=</operator><literal type="number" pos:start="18:16" pos:end="18:16">8</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>   
        <if_stmt pos:start="20:9" pos:end="26:9"><if pos:start="20:9" pos:end="26:9">if<condition pos:start="20:11" pos:end="20:35">(<expr pos:start="20:12" pos:end="20:34"><call pos:start="20:12" pos:end="20:31"><name pos:start="20:12" pos:end="20:18">strncmp</name><argument_list pos:start="20:19" pos:end="20:31">(<argument pos:start="20:20" pos:end="20:22"><expr pos:start="20:20" pos:end="20:22"><name pos:start="20:20" pos:end="20:20">s</name><operator pos:start="20:21" pos:end="20:21">+</operator><name pos:start="20:22" pos:end="20:22">i</name></expr></argument>,<argument pos:start="20:24" pos:end="20:28"><expr pos:start="20:24" pos:end="20:28"><literal type="string" pos:start="20:24" pos:end="20:28">"101"</literal></expr></argument>,<argument pos:start="20:30" pos:end="20:30"><expr pos:start="20:30" pos:end="20:30"><literal type="number" pos:start="20:30" pos:end="20:30">3</literal></expr></argument>)</argument_list></call><operator pos:start="20:32" pos:end="20:33">==</operator><literal type="number" pos:start="20:34" pos:end="20:34">0</literal></expr>)</condition><block pos:start="20:36" pos:end="26:9">{<block_content pos:start="21:13" pos:end="25:36">
            <decl_stmt pos:start="21:13" pos:end="21:22"><decl pos:start="21:13" pos:end="21:21"><type pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:15">int</name></type> <name pos:start="21:17" pos:end="21:19">cmp</name><init pos:start="21:20" pos:end="21:21">=<expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr></init></decl>;</decl_stmt>
            <for pos:start="22:13" pos:end="24:13">for<control pos:start="22:16" pos:end="22:36">(<init pos:start="22:17" pos:end="22:26"><decl pos:start="22:17" pos:end="22:25"><type pos:start="22:17" pos:end="22:19"><name pos:start="22:17" pos:end="22:19">int</name></type> <name pos:start="22:21" pos:end="22:21">j</name><init pos:start="22:22" pos:end="22:25">=<expr pos:start="22:23" pos:end="22:25"><name pos:start="22:23" pos:end="22:23">i</name><operator pos:start="22:24" pos:end="22:24">+</operator><literal type="number" pos:start="22:25" pos:end="22:25">3</literal></expr></init></decl>;</init><condition pos:start="22:27" pos:end="22:32"><expr pos:start="22:27" pos:end="22:31"><name pos:start="22:27" pos:end="22:27">i</name><operator pos:start="22:28" pos:end="22:28">&lt;</operator><name pos:start="22:29" pos:end="22:29">i</name><operator pos:start="22:30" pos:end="22:30">+</operator><literal type="number" pos:start="22:31" pos:end="22:31">8</literal></expr>;</condition><incr pos:start="22:33" pos:end="22:35"><expr pos:start="22:33" pos:end="22:35"><operator pos:start="22:33" pos:end="22:34">++</operator><name pos:start="22:35" pos:end="22:35">j</name></expr></incr>)</control><block pos:start="22:37" pos:end="24:13">{<block_content pos:start="23:17" pos:end="23:37">
                <expr_stmt pos:start="23:17" pos:end="23:37"><expr pos:start="23:17" pos:end="23:36"><name pos:start="23:17" pos:end="23:19">cmp</name><operator pos:start="23:20" pos:end="23:20">=</operator><name pos:start="23:21" pos:end="23:23">cmp</name><operator pos:start="23:24" pos:end="23:24">*</operator><literal type="number" pos:start="23:25" pos:end="23:26">2</literal><operator pos:start="23:26" pos:end="23:26">+</operator><operator pos:start="23:27" pos:end="23:27">(</operator><name pos:start="23:28" pos:end="23:31"><name pos:start="23:28" pos:end="23:28">s</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">j</name></expr>]</index></name><operator pos:start="23:32" pos:end="23:32">-</operator><literal type="char" pos:start="23:33" pos:end="23:35">'0'</literal><operator pos:start="23:36" pos:end="23:36">)</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="25:13" pos:end="25:36"><if pos:start="25:13" pos:end="25:36">if<condition pos:start="25:15" pos:end="25:23">(<expr pos:start="25:16" pos:end="25:22"><name pos:start="25:16" pos:end="25:18">cmp</name><operator pos:start="25:19" pos:end="25:20">&gt;=</operator><literal type="number" pos:start="25:21" pos:end="25:22">26</literal></expr>)</condition><block type="pseudo" pos:start="25:24" pos:end="25:36"><block_content pos:start="25:24" pos:end="25:36"><return pos:start="25:24" pos:end="25:36">return <expr pos:start="25:31" pos:end="25:35"><literal type="boolean" pos:start="25:31" pos:end="25:35">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="28:5" pos:end="28:16">return <expr pos:start="28:12" pos:end="28:15"><literal type="boolean" pos:start="28:12" pos:end="28:15">true</literal></expr>;</return>
</block_content>}</block></function>
<function pos:start="30:1" pos:end="61:1"><type pos:start="30:1" pos:end="30:3"><name pos:start="30:1" pos:end="30:3">int</name></type> <name pos:start="30:5" pos:end="30:8">main</name><parameter_list pos:start="30:9" pos:end="30:10">()</parameter_list><block pos:start="30:11" pos:end="61:1">{<block_content pos:start="31:5" pos:end="60:13">
    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><call pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:11">freopen</name><argument_list pos:start="31:12" pos:end="31:41">(<argument pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:28"><literal type="string" pos:start="31:13" pos:end="31:28">"information.in"</literal></expr></argument>, <argument pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><literal type="string" pos:start="31:31" pos:end="31:33">"r"</literal></expr></argument>, <argument pos:start="31:36" pos:end="31:40"><expr pos:start="31:36" pos:end="31:40"><name pos:start="31:36" pos:end="31:40">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:44"><expr pos:start="32:5" pos:end="32:43"><call pos:start="32:5" pos:end="32:43"><name pos:start="32:5" pos:end="32:11">freopen</name><argument_list pos:start="32:12" pos:end="32:43">(<argument pos:start="32:13" pos:end="32:29"><expr pos:start="32:13" pos:end="32:29"><literal type="string" pos:start="32:13" pos:end="32:29">"information.out"</literal></expr></argument>, <argument pos:start="32:32" pos:end="32:34"><expr pos:start="32:32" pos:end="32:34"><literal type="string" pos:start="32:32" pos:end="32:34">"w"</literal></expr></argument>, <argument pos:start="32:37" pos:end="32:42"><expr pos:start="32:37" pos:end="32:42"><name pos:start="32:37" pos:end="32:42">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:20"><expr pos:start="33:5" pos:end="33:19"><call pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:9">scanf</name><argument_list pos:start="33:10" pos:end="33:19">(<argument pos:start="33:11" pos:end="33:14"><expr pos:start="33:11" pos:end="33:14"><literal type="string" pos:start="33:11" pos:end="33:14">"%s"</literal></expr></argument>,<argument pos:start="33:16" pos:end="33:18"><expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:17">+</operator><literal type="number" pos:start="33:18" pos:end="33:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:18"><expr pos:start="34:5" pos:end="34:17"><name pos:start="34:5" pos:end="34:5">n</name><operator pos:start="34:6" pos:end="34:6">=</operator><call pos:start="34:7" pos:end="34:17"><name pos:start="34:7" pos:end="34:12">strlen</name><argument_list pos:start="34:13" pos:end="34:17">(<argument pos:start="34:14" pos:end="34:16"><expr pos:start="34:14" pos:end="34:16"><name pos:start="34:14" pos:end="34:14">s</name><operator pos:start="34:15" pos:end="34:15">+</operator><literal type="number" pos:start="34:16" pos:end="34:16">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="35:5" pos:end="59:5"><if pos:start="35:5" pos:end="37:5">if<condition pos:start="35:7" pos:end="35:16">(<expr pos:start="35:8" pos:end="35:15"><operator pos:start="35:8" pos:end="35:8">!</operator><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:13">judge</name><argument_list pos:start="35:14" pos:end="35:15">()</argument_list></call></expr>)</condition><block pos:start="35:17" pos:end="37:5">{<block_content pos:start="36:9" pos:end="36:26">
        <expr_stmt pos:start="36:9" pos:end="36:26"><expr pos:start="36:9" pos:end="36:25"><call pos:start="36:9" pos:end="36:25"><name pos:start="36:9" pos:end="36:14">printf</name><argument_list pos:start="36:15" pos:end="36:25">(<argument pos:start="36:16" pos:end="36:24"><expr pos:start="36:16" pos:end="36:24"><literal type="string" pos:start="36:16" pos:end="36:24">"Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else pos:start="37:6" pos:end="59:5">else<block pos:start="37:10" pos:end="59:5">{<block_content pos:start="38:9" pos:end="58:9">
        <for pos:start="38:9" pos:end="58:9">for<control pos:start="38:12" pos:end="38:30">(<init pos:start="38:13" pos:end="38:20"><decl pos:start="38:13" pos:end="38:19"><type pos:start="38:13" pos:end="38:15"><name pos:start="38:13" pos:end="38:15">int</name></type> <name pos:start="38:17" pos:end="38:17">i</name><init pos:start="38:18" pos:end="38:19">=<expr pos:start="38:19" pos:end="38:19"><literal type="number" pos:start="38:19" pos:end="38:19">1</literal></expr></init></decl>;</init><condition pos:start="38:21" pos:end="38:25"><expr pos:start="38:21" pos:end="38:24"><name pos:start="38:21" pos:end="38:21">i</name><operator pos:start="38:22" pos:end="38:23">&lt;=</operator><name pos:start="38:24" pos:end="38:24">n</name></expr>;</condition><incr pos:start="38:26" pos:end="38:29"><expr pos:start="38:26" pos:end="38:29"><name pos:start="38:26" pos:end="38:26">i</name><operator pos:start="38:27" pos:end="38:28">+=</operator><literal type="number" pos:start="38:29" pos:end="38:29">8</literal></expr></incr>)</control><block pos:start="38:31" pos:end="58:9">{<block_content pos:start="39:13" pos:end="57:13">
            <if_stmt pos:start="39:13" pos:end="57:13"><if pos:start="39:13" pos:end="45:13">if<condition pos:start="39:15" pos:end="39:39">(<expr pos:start="39:16" pos:end="39:38"><call pos:start="39:16" pos:end="39:35"><name pos:start="39:16" pos:end="39:22">strncmp</name><argument_list pos:start="39:23" pos:end="39:35">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:24">s</name><operator pos:start="39:25" pos:end="39:25">+</operator><name pos:start="39:26" pos:end="39:26">i</name></expr></argument>,<argument pos:start="39:28" pos:end="39:32"><expr pos:start="39:28" pos:end="39:32"><literal type="string" pos:start="39:28" pos:end="39:32">"101"</literal></expr></argument>,<argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">3</literal></expr></argument>)</argument_list></call><operator pos:start="39:36" pos:end="39:37">==</operator><literal type="number" pos:start="39:38" pos:end="39:38">0</literal></expr>)</condition><block pos:start="39:40" pos:end="45:13">{<block_content pos:start="40:17" pos:end="44:37">
                <decl_stmt pos:start="40:17" pos:end="40:26"><decl pos:start="40:17" pos:end="40:25"><type pos:start="40:17" pos:end="40:19"><name pos:start="40:17" pos:end="40:19">int</name></type> <name pos:start="40:21" pos:end="40:23">tmp</name><init pos:start="40:24" pos:end="40:25">=<expr pos:start="40:25" pos:end="40:25"><literal type="number" pos:start="40:25" pos:end="40:25">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="41:17" pos:end="43:17">for<control pos:start="41:20" pos:end="41:40">(<init pos:start="41:21" pos:end="41:30"><decl pos:start="41:21" pos:end="41:29"><type pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">int</name></type> <name pos:start="41:25" pos:end="41:25">j</name><init pos:start="41:26" pos:end="41:29">=<expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:27">i</name><operator pos:start="41:28" pos:end="41:28">+</operator><literal type="number" pos:start="41:29" pos:end="41:29">3</literal></expr></init></decl>;</init><condition pos:start="41:31" pos:end="41:36"><expr pos:start="41:31" pos:end="41:35"><name pos:start="41:31" pos:end="41:31">j</name><operator pos:start="41:32" pos:end="41:32">&lt;</operator><name pos:start="41:33" pos:end="41:33">i</name><operator pos:start="41:34" pos:end="41:34">+</operator><literal type="number" pos:start="41:35" pos:end="41:35">8</literal></expr>;</condition><incr pos:start="41:37" pos:end="41:39"><expr pos:start="41:37" pos:end="41:39"><operator pos:start="41:37" pos:end="41:38">++</operator><name pos:start="41:39" pos:end="41:39">j</name></expr></incr>)</control><block pos:start="41:41" pos:end="43:17">{<block_content pos:start="42:21" pos:end="42:41">
                    <expr_stmt pos:start="42:21" pos:end="42:41"><expr pos:start="42:21" pos:end="42:40"><name pos:start="42:21" pos:end="42:23">tmp</name><operator pos:start="42:24" pos:end="42:24">=</operator><name pos:start="42:25" pos:end="42:27">tmp</name><operator pos:start="42:28" pos:end="42:28">*</operator><literal type="number" pos:start="42:29" pos:end="42:30">2</literal><operator pos:start="42:30" pos:end="42:30">+</operator><operator pos:start="42:31" pos:end="42:31">(</operator><name pos:start="42:32" pos:end="42:35"><name pos:start="42:32" pos:end="42:32">s</name><index pos:start="42:33" pos:end="42:35">[<expr pos:start="42:34" pos:end="42:34"><name pos:start="42:34" pos:end="42:34">j</name></expr>]</index></name><operator pos:start="42:36" pos:end="42:36">-</operator><literal type="char" pos:start="42:37" pos:end="42:39">'0'</literal><operator pos:start="42:40" pos:end="42:40">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="44:17" pos:end="44:37"><expr pos:start="44:17" pos:end="44:36"><call pos:start="44:17" pos:end="44:36"><name pos:start="44:17" pos:end="44:22">printf</name><argument_list pos:start="44:23" pos:end="44:36">(<argument pos:start="44:24" pos:end="44:27"><expr pos:start="44:24" pos:end="44:27"><literal type="string" pos:start="44:24" pos:end="44:27">"%c"</literal></expr></argument>,<argument pos:start="44:29" pos:end="44:35"><expr pos:start="44:29" pos:end="44:35"><literal type="char" pos:start="44:29" pos:end="44:31">'A'</literal><operator pos:start="44:32" pos:end="44:32">+</operator><name pos:start="44:33" pos:end="44:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><if type="elseif" pos:start="45:14" pos:end="47:13">else if<condition pos:start="45:21" pos:end="45:45">(<expr pos:start="45:22" pos:end="45:44"><call pos:start="45:22" pos:end="45:41"><name pos:start="45:22" pos:end="45:28">strncmp</name><argument_list pos:start="45:29" pos:end="45:41">(<argument pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:30">s</name><operator pos:start="45:31" pos:end="45:31">+</operator><name pos:start="45:32" pos:end="45:32">i</name></expr></argument>,<argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><literal type="string" pos:start="45:34" pos:end="45:38">"111"</literal></expr></argument>,<argument pos:start="45:40" pos:end="45:40"><expr pos:start="45:40" pos:end="45:40"><literal type="number" pos:start="45:40" pos:end="45:40">3</literal></expr></argument>)</argument_list></call><operator pos:start="45:42" pos:end="45:43">==</operator><literal type="number" pos:start="45:44" pos:end="45:44">0</literal></expr>)</condition><block pos:start="45:46" pos:end="47:13">{<block_content pos:start="46:17" pos:end="46:28">
                <expr_stmt pos:start="46:17" pos:end="46:28"><expr pos:start="46:17" pos:end="46:27"><call pos:start="46:17" pos:end="46:27"><name pos:start="46:17" pos:end="46:22">printf</name><argument_list pos:start="46:23" pos:end="46:27">(<argument pos:start="46:24" pos:end="46:26"><expr pos:start="46:24" pos:end="46:26"><literal type="string" pos:start="46:24" pos:end="46:26">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else pos:start="47:14" pos:end="57:13">else<block pos:start="47:18" pos:end="57:13">{<block_content pos:start="48:17" pos:end="56:49">
                <decl_stmt pos:start="48:17" pos:end="48:34"><decl pos:start="48:17" pos:end="48:26"><type pos:start="48:17" pos:end="48:19"><name pos:start="48:17" pos:end="48:19">int</name></type> <name pos:start="48:21" pos:end="48:24">tmp1</name><init pos:start="48:25" pos:end="48:26">=<expr pos:start="48:26" pos:end="48:26"><literal type="number" pos:start="48:26" pos:end="48:26">0</literal></expr></init></decl>,<decl pos:start="48:28" pos:end="48:33"><type ref="prev" pos:start="48:17" pos:end="48:19"/><name pos:start="48:28" pos:end="48:31">tmp2</name><init pos:start="48:32" pos:end="48:33">=<expr pos:start="48:33" pos:end="48:33"><literal type="number" pos:start="48:33" pos:end="48:33">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="49:17" pos:end="51:17">for<control pos:start="49:20" pos:end="49:40">(<init pos:start="49:21" pos:end="49:30"><decl pos:start="49:21" pos:end="49:29"><type pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:23">int</name></type> <name pos:start="49:25" pos:end="49:25">j</name><init pos:start="49:26" pos:end="49:29">=<expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:27">i</name><operator pos:start="49:28" pos:end="49:28">+</operator><literal type="number" pos:start="49:29" pos:end="49:29">1</literal></expr></init></decl>;</init><condition pos:start="49:31" pos:end="49:36"><expr pos:start="49:31" pos:end="49:35"><name pos:start="49:31" pos:end="49:31">j</name><operator pos:start="49:32" pos:end="49:32">&lt;</operator><name pos:start="49:33" pos:end="49:33">i</name><operator pos:start="49:34" pos:end="49:34">+</operator><literal type="number" pos:start="49:35" pos:end="49:35">8</literal></expr>;</condition><incr pos:start="49:37" pos:end="49:39"><expr pos:start="49:37" pos:end="49:39"><operator pos:start="49:37" pos:end="49:38">++</operator><name pos:start="49:39" pos:end="49:39">j</name></expr></incr>)</control><block pos:start="49:41" pos:end="51:17">{<block_content pos:start="50:21" pos:end="50:43">
                    <expr_stmt pos:start="50:21" pos:end="50:43"><expr pos:start="50:21" pos:end="50:42"><name pos:start="50:21" pos:end="50:24">tmp1</name><operator pos:start="50:25" pos:end="50:25">=</operator><name pos:start="50:26" pos:end="50:29">tmp1</name><operator pos:start="50:30" pos:end="50:30">*</operator><literal type="number" pos:start="50:31" pos:end="50:32">2</literal><operator pos:start="50:32" pos:end="50:32">+</operator><operator pos:start="50:33" pos:end="50:33">(</operator><name pos:start="50:34" pos:end="50:37"><name pos:start="50:34" pos:end="50:34">s</name><index pos:start="50:35" pos:end="50:37">[<expr pos:start="50:36" pos:end="50:36"><name pos:start="50:36" pos:end="50:36">j</name></expr>]</index></name><operator pos:start="50:38" pos:end="50:38">-</operator><literal type="char" pos:start="50:39" pos:end="50:41">'0'</literal><operator pos:start="50:42" pos:end="50:42">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="52:17" pos:end="52:21"><expr pos:start="52:17" pos:end="52:20"><name pos:start="52:17" pos:end="52:17">i</name><operator pos:start="52:18" pos:end="52:19">+=</operator><literal type="number" pos:start="52:20" pos:end="52:20">8</literal></expr>;</expr_stmt>
                <for pos:start="53:17" pos:end="55:17">for<control pos:start="53:20" pos:end="53:40">(<init pos:start="53:21" pos:end="53:30"><decl pos:start="53:21" pos:end="53:29"><type pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">int</name></type> <name pos:start="53:25" pos:end="53:25">j</name><init pos:start="53:26" pos:end="53:29">=<expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:27">i</name><operator pos:start="53:28" pos:end="53:28">+</operator><literal type="number" pos:start="53:29" pos:end="53:29">1</literal></expr></init></decl>;</init><condition pos:start="53:31" pos:end="53:36"><expr pos:start="53:31" pos:end="53:35"><name pos:start="53:31" pos:end="53:31">j</name><operator pos:start="53:32" pos:end="53:32">&lt;</operator><name pos:start="53:33" pos:end="53:33">i</name><operator pos:start="53:34" pos:end="53:34">+</operator><literal type="number" pos:start="53:35" pos:end="53:35">8</literal></expr>;</condition><incr pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><operator pos:start="53:37" pos:end="53:38">++</operator><name pos:start="53:39" pos:end="53:39">j</name></expr></incr>)</control><block pos:start="53:41" pos:end="55:17">{<block_content pos:start="54:21" pos:end="54:43">
                    <expr_stmt pos:start="54:21" pos:end="54:43"><expr pos:start="54:21" pos:end="54:42"><name pos:start="54:21" pos:end="54:24">tmp2</name><operator pos:start="54:25" pos:end="54:25">=</operator><name pos:start="54:26" pos:end="54:29">tmp2</name><operator pos:start="54:30" pos:end="54:30">*</operator><literal type="number" pos:start="54:31" pos:end="54:32">2</literal><operator pos:start="54:32" pos:end="54:32">+</operator><operator pos:start="54:33" pos:end="54:33">(</operator><name pos:start="54:34" pos:end="54:37"><name pos:start="54:34" pos:end="54:34">s</name><index pos:start="54:35" pos:end="54:37">[<expr pos:start="54:36" pos:end="54:36"><name pos:start="54:36" pos:end="54:36">j</name></expr>]</index></name><operator pos:start="54:38" pos:end="54:38">-</operator><literal type="char" pos:start="54:39" pos:end="54:41">'0'</literal><operator pos:start="54:42" pos:end="54:42">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="56:17" pos:end="56:49"><expr pos:start="56:17" pos:end="56:48"><call pos:start="56:17" pos:end="56:48"><name pos:start="56:17" pos:end="56:22">printf</name><argument_list pos:start="56:23" pos:end="56:48">(<argument pos:start="56:24" pos:end="56:27"><expr pos:start="56:24" pos:end="56:27"><literal type="string" pos:start="56:24" pos:end="56:27">"%d"</literal></expr></argument>,<argument pos:start="56:29" pos:end="56:47"><expr pos:start="56:29" pos:end="56:47"><operator pos:start="56:29" pos:end="56:29">(</operator><name pos:start="56:30" pos:end="56:33">tmp1</name><operator pos:start="56:34" pos:end="56:35">&gt;&gt;</operator><literal type="number" pos:start="56:36" pos:end="56:36">1</literal><operator pos:start="56:37" pos:end="56:37">)</operator><operator pos:start="56:38" pos:end="56:38">+</operator><operator pos:start="56:39" pos:end="56:39">(</operator><name pos:start="56:40" pos:end="56:43">tmp2</name><operator pos:start="56:44" pos:end="56:45">&gt;&gt;</operator><literal type="number" pos:start="56:46" pos:end="56:46">1</literal><operator pos:start="56:47" pos:end="56:47">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <return pos:start="60:5" pos:end="60:13">return <expr pos:start="60:12" pos:end="60:12"><literal type="number" pos:start="60:12" pos:end="60:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
