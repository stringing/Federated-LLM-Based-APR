<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/371/371.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:16">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:16">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:15">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:15">&lt;cmath&gt;</cpp:file></cpp:include>
<decl_stmt pos:start="3:1" pos:end="3:44"><decl pos:start="3:1" pos:end="3:14"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:9">ANGRY</name><index pos:start="3:10" pos:end="3:14">[<expr pos:start="3:11" pos:end="3:13"><literal type="number" pos:start="3:11" pos:end="3:13">120</literal></expr>]</index></name></decl>,<decl pos:start="3:16" pos:end="3:26"><type ref="prev" pos:start="3:1" pos:end="3:3"/><name pos:start="3:16" pos:end="3:26"><name pos:start="3:16" pos:end="3:21">GRUMPY</name><index pos:start="3:22" pos:end="3:26">[<expr pos:start="3:23" pos:end="3:25"><literal type="number" pos:start="3:23" pos:end="3:25">120</literal></expr>]</index></name></decl>,<decl pos:start="3:28" pos:end="3:28"><type ref="prev" pos:start="3:1" pos:end="3:3"/><name pos:start="3:28" pos:end="3:28">n</name></decl>,<decl pos:start="3:30" pos:end="3:43"><type ref="prev" pos:start="3:1" pos:end="3:3"/><name pos:start="3:30" pos:end="3:32">ans</name><init pos:start="3:33" pos:end="3:43">=<expr pos:start="3:34" pos:end="3:43"><literal type="number" pos:start="3:34" pos:end="3:43">2147483647</literal></expr></init></decl>;</decl_stmt>
<function pos:start="4:1" pos:end="12:1"><type pos:start="4:1" pos:end="4:4"><name pos:start="4:1" pos:end="4:4">void</name></type> <name pos:start="4:6" pos:end="4:8">dfs</name><parameter_list pos:start="4:9" pos:end="4:38">(<parameter pos:start="4:10" pos:end="4:16"><decl pos:start="4:10" pos:end="4:16"><type pos:start="4:10" pos:end="4:16"><name pos:start="4:10" pos:end="4:12">int</name></type> <name pos:start="4:14" pos:end="4:16">cur</name></decl></parameter>,<parameter pos:start="4:18" pos:end="4:26"><decl pos:start="4:18" pos:end="4:26"><type pos:start="4:18" pos:end="4:26"><name pos:start="4:18" pos:end="4:20">int</name></type> <name pos:start="4:22" pos:end="4:26">angry</name></decl></parameter>,<parameter pos:start="4:28" pos:end="4:37"><decl pos:start="4:28" pos:end="4:37"><type pos:start="4:28" pos:end="4:37"><name pos:start="4:28" pos:end="4:30">int</name></type> <name pos:start="4:32" pos:end="4:37">grumpy</name></decl></parameter>)</parameter_list><block pos:start="4:39" pos:end="12:1">{<block_content pos:start="5:5" pos:end="11:26">
    <if_stmt pos:start="5:5" pos:end="9:5"><if pos:start="5:5" pos:end="9:5">if<condition pos:start="5:7" pos:end="5:14">(<expr pos:start="5:8" pos:end="5:13"><name pos:start="5:8" pos:end="5:10">cur</name><operator pos:start="5:11" pos:end="5:12">==</operator><name pos:start="5:13" pos:end="5:13">n</name></expr>)</condition><block pos:start="5:15" pos:end="9:5">{<block_content pos:start="6:9" pos:end="8:30">
        <if_stmt pos:start="6:9" pos:end="6:27"><if pos:start="6:9" pos:end="6:27">if<condition pos:start="6:11" pos:end="6:19">(<expr pos:start="6:12" pos:end="6:18"><operator pos:start="6:12" pos:end="6:12">!</operator><name pos:start="6:13" pos:end="6:18">grumpy</name></expr>)</condition><block type="pseudo" pos:start="6:21" pos:end="6:27"><block_content pos:start="6:21" pos:end="6:27"> <return pos:start="6:21" pos:end="6:27">return;</return></block_content></block></if></if_stmt>
        <decl_stmt pos:start="7:9" pos:end="7:35"><decl pos:start="7:9" pos:end="7:34"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:16">rslt</name><init pos:start="7:17" pos:end="7:34">=<expr pos:start="7:18" pos:end="7:34"><call pos:start="7:18" pos:end="7:34"><name pos:start="7:18" pos:end="7:20">abs</name><argument_list pos:start="7:21" pos:end="7:34">(<argument pos:start="7:22" pos:end="7:33"><expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:26">angry</name><operator pos:start="7:27" pos:end="7:27">-</operator><name pos:start="7:28" pos:end="7:33">grumpy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="8:9" pos:end="8:30"><if pos:start="8:9" pos:end="8:30">if<condition pos:start="8:11" pos:end="8:20">(<expr pos:start="8:12" pos:end="8:19"><name pos:start="8:12" pos:end="8:15">rslt</name><operator pos:start="8:16" pos:end="8:16">&lt;</operator><name pos:start="8:17" pos:end="8:19">ans</name></expr>)</condition><block type="pseudo" pos:start="8:22" pos:end="8:30"><block_content pos:start="8:22" pos:end="8:30"> <expr_stmt pos:start="8:22" pos:end="8:30"><expr pos:start="8:22" pos:end="8:29"><name pos:start="8:22" pos:end="8:25">rslt</name><operator pos:start="8:26" pos:end="8:26">=</operator><name pos:start="8:27" pos:end="8:29">ans</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:51"><expr pos:start="10:5" pos:end="10:50"><call pos:start="10:5" pos:end="10:50"><name pos:start="10:5" pos:end="10:7">dfs</name><argument_list pos:start="10:8" pos:end="10:50">(<argument pos:start="10:9" pos:end="10:13"><expr pos:start="10:9" pos:end="10:13"><name pos:start="10:9" pos:end="10:11">cur</name><operator pos:start="10:12" pos:end="10:12">+</operator><literal type="number" pos:start="10:13" pos:end="10:13">1</literal></expr></argument>,<argument pos:start="10:15" pos:end="10:30"><expr pos:start="10:15" pos:end="10:30"><name pos:start="10:15" pos:end="10:19">angry</name><operator pos:start="10:20" pos:end="10:20">*</operator><name pos:start="10:21" pos:end="10:30"><name pos:start="10:21" pos:end="10:25">ANGRY</name><index pos:start="10:26" pos:end="10:30">[<expr pos:start="10:27" pos:end="10:29"><name pos:start="10:27" pos:end="10:29">cur</name></expr>]</index></name></expr></argument>,<argument pos:start="10:32" pos:end="10:49"><expr pos:start="10:32" pos:end="10:49"><name pos:start="10:32" pos:end="10:37">grumpy</name><operator pos:start="10:38" pos:end="10:38">+</operator><name pos:start="10:39" pos:end="10:49"><name pos:start="10:39" pos:end="10:44">GRUMPY</name><index pos:start="10:45" pos:end="10:49">[<expr pos:start="10:46" pos:end="10:48"><name pos:start="10:46" pos:end="10:48">cur</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:26"><expr pos:start="11:5" pos:end="11:25"><call pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:7">dfs</name><argument_list pos:start="11:8" pos:end="11:25">(<argument pos:start="11:9" pos:end="11:11"><expr pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">cur</name></expr></argument>,<argument pos:start="11:13" pos:end="11:17"><expr pos:start="11:13" pos:end="11:17"><name pos:start="11:13" pos:end="11:17">angry</name></expr></argument>,<argument pos:start="11:19" pos:end="11:24"><expr pos:start="11:19" pos:end="11:24"><name pos:start="11:19" pos:end="11:24">grumpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="13:1" pos:end="25:1"><type pos:start="13:1" pos:end="13:4"><name pos:start="13:1" pos:end="13:4">void</name></type> <name pos:start="13:6" pos:end="13:10">solve</name><parameter_list pos:start="13:11" pos:end="13:12">()</parameter_list>
<block pos:start="14:1" pos:end="25:1">{<block_content pos:start="15:5" pos:end="24:19">
    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:11">freopen</name><argument_list pos:start="15:12" pos:end="15:33">(<argument pos:start="15:13" pos:end="15:22"><expr pos:start="15:13" pos:end="15:22"><literal type="string" pos:start="15:13" pos:end="15:22">"stone.in"</literal></expr></argument>,<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><literal type="string" pos:start="15:24" pos:end="15:26">"r"</literal></expr></argument>,<argument pos:start="15:28" pos:end="15:32"><expr pos:start="15:28" pos:end="15:32"><name pos:start="15:28" pos:end="15:32">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:36"><expr pos:start="16:5" pos:end="16:35"><call pos:start="16:5" pos:end="16:35"><name pos:start="16:5" pos:end="16:11">freopen</name><argument_list pos:start="16:12" pos:end="16:35">(<argument pos:start="16:13" pos:end="16:23"><expr pos:start="16:13" pos:end="16:23"><literal type="string" pos:start="16:13" pos:end="16:23">"stone.out"</literal></expr></argument>,<argument pos:start="16:25" pos:end="16:27"><expr pos:start="16:25" pos:end="16:27"><literal type="string" pos:start="16:25" pos:end="16:27">"w"</literal></expr></argument>,<argument pos:start="16:29" pos:end="16:34"><expr pos:start="16:29" pos:end="16:34"><name pos:start="16:29" pos:end="16:34">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><call pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:9">scanf</name><argument_list pos:start="17:10" pos:end="17:18">(<argument pos:start="17:11" pos:end="17:14"><expr pos:start="17:11" pos:end="17:14"><literal type="string" pos:start="17:11" pos:end="17:14">"%d"</literal></expr></argument>,<argument pos:start="17:16" pos:end="17:17"><expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:17">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="18:5" pos:end="20:5">for<control pos:start="18:8" pos:end="18:24">(<init pos:start="18:9" pos:end="18:16"><decl pos:start="18:9" pos:end="18:15"><type pos:start="18:9" pos:end="18:11"><name pos:start="18:9" pos:end="18:11">int</name></type> <name pos:start="18:13" pos:end="18:13">i</name><init pos:start="18:14" pos:end="18:15">=<expr pos:start="18:15" pos:end="18:15"><literal type="number" pos:start="18:15" pos:end="18:15">0</literal></expr></init></decl>;</init><condition pos:start="18:17" pos:end="18:20"><expr pos:start="18:17" pos:end="18:19"><name pos:start="18:17" pos:end="18:17">i</name><operator pos:start="18:18" pos:end="18:18">&lt;</operator><name pos:start="18:19" pos:end="18:19">n</name></expr>;</condition><incr pos:start="18:21" pos:end="18:23"><expr pos:start="18:21" pos:end="18:23"><name pos:start="18:21" pos:end="18:21">i</name><operator pos:start="18:22" pos:end="18:23">++</operator></expr></incr>)</control><block pos:start="18:25" pos:end="20:5">{<block_content pos:start="19:9" pos:end="19:42">
        <expr_stmt pos:start="19:9" pos:end="19:42"><expr pos:start="19:9" pos:end="19:41"><call pos:start="19:9" pos:end="19:41"><name pos:start="19:9" pos:end="19:13">scanf</name><argument_list pos:start="19:14" pos:end="19:41">(<argument pos:start="19:15" pos:end="19:20"><expr pos:start="19:15" pos:end="19:20"><literal type="string" pos:start="19:15" pos:end="19:20">"%d%d"</literal></expr></argument>,<argument pos:start="19:22" pos:end="19:30"><expr pos:start="19:22" pos:end="19:30"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:30"><name pos:start="19:23" pos:end="19:27">ANGRY</name><index pos:start="19:28" pos:end="19:30">[<expr pos:start="19:29" pos:end="19:29"><name pos:start="19:29" pos:end="19:29">i</name></expr>]</index></name></expr></argument>,<argument pos:start="19:32" pos:end="19:40"><expr pos:start="19:32" pos:end="19:40"><name pos:start="19:32" pos:end="19:40"><name pos:start="19:32" pos:end="19:37">GRUMPY</name><index pos:start="19:38" pos:end="19:40">[<expr pos:start="19:39" pos:end="19:39"><name pos:start="19:39" pos:end="19:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><call pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:7">dfs</name><argument_list pos:start="21:8" pos:end="21:14">(<argument pos:start="21:9" pos:end="21:9"><expr pos:start="21:9" pos:end="21:9"><literal type="number" pos:start="21:9" pos:end="21:9">0</literal></expr></argument>,<argument pos:start="21:11" pos:end="21:11"><expr pos:start="21:11" pos:end="21:11"><literal type="number" pos:start="21:11" pos:end="21:11">1</literal></expr></argument>,<argument pos:start="21:13" pos:end="21:13"><expr pos:start="21:13" pos:end="21:13"><literal type="number" pos:start="21:13" pos:end="21:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:21"><expr pos:start="22:5" pos:end="22:20"><call pos:start="22:5" pos:end="22:20"><name pos:start="22:5" pos:end="22:10">printf</name><argument_list pos:start="22:11" pos:end="22:20">(<argument pos:start="22:12" pos:end="22:15"><expr pos:start="22:12" pos:end="22:15"><literal type="string" pos:start="22:12" pos:end="22:15">"%d"</literal></expr></argument>,<argument pos:start="22:17" pos:end="22:19"><expr pos:start="22:17" pos:end="22:19"><name pos:start="22:17" pos:end="22:19">ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><call pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:10">fclose</name><argument_list pos:start="23:11" pos:end="23:17">(<argument pos:start="23:12" pos:end="23:16"><expr pos:start="23:12" pos:end="23:16"><name pos:start="23:12" pos:end="23:16">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:19"><expr pos:start="24:5" pos:end="24:18"><call pos:start="24:5" pos:end="24:18"><name pos:start="24:5" pos:end="24:10">fclose</name><argument_list pos:start="24:11" pos:end="24:18">(<argument pos:start="24:12" pos:end="24:17"><expr pos:start="24:12" pos:end="24:17"><name pos:start="24:12" pos:end="24:17">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
<function pos:start="26:1" pos:end="29:1"><type pos:start="26:1" pos:end="26:3"><name pos:start="26:1" pos:end="26:3">int</name></type> <name pos:start="26:5" pos:end="26:8">main</name><parameter_list pos:start="26:9" pos:end="26:10">()</parameter_list><block pos:start="26:11" pos:end="29:1">{<block_content pos:start="27:5" pos:end="28:13">
    <expr_stmt pos:start="27:5" pos:end="27:12"><expr pos:start="27:5" pos:end="27:11"><call pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">solve</name><argument_list pos:start="27:10" pos:end="27:11">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="28:5" pos:end="28:13">return <expr pos:start="28:12" pos:end="28:12"><literal type="number" pos:start="28:12" pos:end="28:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
