<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/927/927.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:16">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:16">&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:19">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:17">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:17">&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:18">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive> <cpp:file pos:start="5:10" pos:end="5:18">&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include pos:start="6:1" pos:end="6:19">#<cpp:directive pos:start="6:2" pos:end="6:8">include</cpp:directive> <cpp:file pos:start="6:10" pos:end="6:19">&lt;termio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="7:1" pos:end="7:16">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive> <cpp:file pos:start="7:10" pos:end="7:16">&lt;array&gt;</cpp:file></cpp:include>
<cpp:include pos:start="8:1" pos:end="8:17">#<cpp:directive pos:start="8:2" pos:end="8:8">include</cpp:directive> <cpp:file pos:start="8:10" pos:end="8:17">&lt;random&gt;</cpp:file></cpp:include>
<decl_stmt pos:start="9:1" pos:end="14:4"><decl pos:start="9:1" pos:end="14:3"><type pos:start="9:1" pos:end="9:17"><specifier pos:start="9:1" pos:end="9:6">static</specifier> <specifier pos:start="9:8" pos:end="9:12">const</specifier> <specifier pos:start="9:14" pos:end="9:17">auto</specifier></type> <name pos:start="9:19" pos:end="9:29">io_sync_off</name> <init pos:start="9:31" pos:end="14:3">= <expr pos:start="9:33" pos:end="14:3"><call pos:start="9:33" pos:end="14:3"><lambda pos:start="9:33" pos:end="14:1"><capture pos:start="9:33" pos:end="9:34">[]</capture><parameter_list pos:start="9:35" pos:end="9:36">()</parameter_list>
<block pos:start="10:1" pos:end="14:1">{<block_content pos:start="11:5" pos:end="13:19">
    <expr_stmt pos:start="11:5" pos:end="11:37"><expr pos:start="11:5" pos:end="11:36"><call pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:7">std</name><operator pos:start="11:8" pos:end="11:9">::</operator><name pos:start="11:10" pos:end="11:12">ios</name><operator pos:start="11:13" pos:end="11:14">::</operator><name pos:start="11:15" pos:end="11:29">sync_with_stdio</name></name><argument_list pos:start="11:30" pos:end="11:36">(<argument pos:start="11:31" pos:end="11:35"><expr pos:start="11:31" pos:end="11:35"><literal type="boolean" pos:start="11:31" pos:end="11:35">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:26"><expr pos:start="12:5" pos:end="12:25"><call pos:start="12:5" pos:end="12:25"><name pos:start="12:5" pos:end="12:16"><name pos:start="12:5" pos:end="12:7">std</name><operator pos:start="12:8" pos:end="12:9">::</operator><name pos:start="12:10" pos:end="12:12">cin</name><operator pos:start="12:13" pos:end="12:13">.</operator><name pos:start="12:14" pos:end="12:16">tie</name></name><argument_list pos:start="12:17" pos:end="12:25">(<argument pos:start="12:18" pos:end="12:24"><expr pos:start="12:18" pos:end="12:24"><literal type="null" pos:start="12:18" pos:end="12:24">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="13:5" pos:end="13:19">return <expr pos:start="13:12" pos:end="13:18"><literal type="null" pos:start="13:12" pos:end="13:18">nullptr</literal></expr>;</return>
</block_content>}</block></lambda><argument_list pos:start="14:2" pos:end="14:3">()</argument_list></call></expr></init></decl>;</decl_stmt>
<function pos:start="15:1" pos:end="33:1"><type pos:start="15:1" pos:end="15:10"><specifier pos:start="15:1" pos:end="15:6">inline</specifier> <name pos:start="15:8" pos:end="15:10">int</name></type> <name pos:start="15:12" pos:end="15:15">read</name><parameter_list pos:start="15:16" pos:end="15:17">()</parameter_list>
<block pos:start="16:1" pos:end="33:1">{<block_content pos:start="17:5" pos:end="32:15">
    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">s</name><init pos:start="17:10" pos:end="17:11">=<expr pos:start="17:11" pos:end="17:11"><literal type="number" pos:start="17:11" pos:end="17:11">0</literal></expr></init></decl>,<decl pos:start="17:13" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:13" pos:end="17:13">w</name><init pos:start="17:14" pos:end="17:15">=<expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:22"><decl pos:start="18:5" pos:end="18:21"><type pos:start="18:5" pos:end="18:8"><name pos:start="18:5" pos:end="18:8">char</name></type> <name pos:start="18:10" pos:end="18:11">ch</name><init pos:start="18:12" pos:end="18:21">=<expr pos:start="18:13" pos:end="18:21"><call pos:start="18:13" pos:end="18:21"><name pos:start="18:13" pos:end="18:19">getchar</name><argument_list pos:start="18:20" pos:end="18:21">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while pos:start="19:5" pos:end="26:5">while <condition pos:start="19:11" pos:end="19:31">(<expr pos:start="19:12" pos:end="19:30"><operator pos:start="19:12" pos:end="19:12">!</operator><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:15">ch</name><operator pos:start="19:16" pos:end="19:17">&gt;=</operator><literal type="char" pos:start="19:18" pos:end="19:20">'0'</literal><operator pos:start="19:21" pos:end="19:22">&amp;&amp;</operator><name pos:start="19:23" pos:end="19:24">ch</name><operator pos:start="19:25" pos:end="19:26">&lt;=</operator><literal type="char" pos:start="19:27" pos:end="19:29">'9'</literal><operator pos:start="19:30" pos:end="19:30">)</operator></expr>)</condition>
    <block pos:start="20:5" pos:end="26:5">{<block_content pos:start="21:9" pos:end="25:21">
        <if_stmt pos:start="21:9" pos:end="24:9"><if pos:start="21:9" pos:end="24:9">if<condition pos:start="21:11" pos:end="21:19">(<expr pos:start="21:12" pos:end="21:18"><name pos:start="21:12" pos:end="21:13">ch</name><operator pos:start="21:14" pos:end="21:15">==</operator><literal type="char" pos:start="21:16" pos:end="21:18">'-'</literal></expr>)</condition> 
        <block pos:start="22:9" pos:end="24:9">{<block_content pos:start="23:13" pos:end="23:17">
            <expr_stmt pos:start="23:13" pos:end="23:17"><expr pos:start="23:13" pos:end="23:16"><name pos:start="23:13" pos:end="23:13">w</name><operator pos:start="23:14" pos:end="23:14">=</operator><operator pos:start="23:15" pos:end="23:15">-</operator><literal type="number" pos:start="23:16" pos:end="23:16">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:10">ch</name><operator pos:start="25:11" pos:end="25:11">=</operator><call pos:start="25:12" pos:end="25:20"><name pos:start="25:12" pos:end="25:18">getchar</name><argument_list pos:start="25:19" pos:end="25:20">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while pos:start="27:5" pos:end="31:5">while<condition pos:start="27:10" pos:end="27:27">(<expr pos:start="27:11" pos:end="27:26"><name pos:start="27:11" pos:end="27:12">ch</name><operator pos:start="27:13" pos:end="27:14">&gt;=</operator><literal type="char" pos:start="27:15" pos:end="27:17">'0'</literal><operator pos:start="27:18" pos:end="27:19">&amp;&amp;</operator><name pos:start="27:20" pos:end="27:21">ch</name><operator pos:start="27:22" pos:end="27:23">&lt;=</operator><literal type="char" pos:start="27:24" pos:end="27:26">'9'</literal></expr>)</condition>
    <block pos:start="28:5" pos:end="31:5">{<block_content pos:start="29:9" pos:end="30:21">
        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:10">=</operator><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:12">*</operator><literal type="number" pos:start="29:13" pos:end="29:15">10</literal><operator pos:start="29:15" pos:end="29:15">+</operator><name pos:start="29:16" pos:end="29:17">ch</name><operator pos:start="29:18" pos:end="29:18">-</operator><literal type="char" pos:start="29:19" pos:end="29:21">'0'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:21"><expr pos:start="30:9" pos:end="30:20"><name pos:start="30:9" pos:end="30:10">ch</name><operator pos:start="30:11" pos:end="30:11">=</operator><call pos:start="30:12" pos:end="30:20"><name pos:start="30:12" pos:end="30:18">getchar</name><argument_list pos:start="30:19" pos:end="30:20">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return pos:start="32:5" pos:end="32:15">return <expr pos:start="32:12" pos:end="32:14"><name pos:start="32:12" pos:end="32:12">s</name><operator pos:start="32:13" pos:end="32:13">*</operator><name pos:start="32:14" pos:end="32:14">w</name></expr>;</return>
</block_content>}</block></function>

<struct pos:start="35:1" pos:end="40:3">struct <name pos:start="35:8" pos:end="35:12">Actor</name>
<block pos:start="36:1" pos:end="39:1">{<public type="default" pos:start="37:5" pos:end="38:13">
    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:7">std</name><operator pos:start="37:8" pos:end="37:9">::</operator><name pos:start="37:10" pos:end="37:15">string</name></name></type> <name pos:start="37:17" pos:end="37:20">name</name></decl>;</decl_stmt>
    <decl_stmt pos:start="38:5" pos:end="38:13"><decl pos:start="38:5" pos:end="38:12"><type pos:start="38:5" pos:end="38:7"><name pos:start="38:5" pos:end="38:7">int</name></type> <name pos:start="38:9" pos:end="38:12">time</name></decl>;</decl_stmt>
</public>}</block>
<decl pos:start="40:1" pos:end="40:2"><name pos:start="40:1" pos:end="40:2">ac</name></decl>;</struct>

<function pos:start="42:1" pos:end="80:1"><type pos:start="42:1" pos:end="42:3"><name pos:start="42:1" pos:end="42:3">int</name></type> <name pos:start="42:5" pos:end="42:8">main</name><parameter_list pos:start="42:9" pos:end="42:10">()</parameter_list>
<block pos:start="43:1" pos:end="80:1">{<block_content pos:start="44:5" pos:end="79:13">
    <decl_stmt pos:start="44:5" pos:end="44:10"><decl pos:start="44:5" pos:end="44:9"><type pos:start="44:5" pos:end="44:7"><name pos:start="44:5" pos:end="44:7">int</name></type> <name pos:start="44:9" pos:end="44:9">t</name></decl>;</decl_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:19"><expr pos:start="45:5" pos:end="45:18"><call pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:9">scanf</name><argument_list pos:start="45:10" pos:end="45:18">(<argument pos:start="45:11" pos:end="45:14"><expr pos:start="45:11" pos:end="45:14"><literal type="string" pos:start="45:11" pos:end="45:14">"%d"</literal></expr></argument>,<argument pos:start="45:16" pos:end="45:17"><expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">&amp;</operator><name pos:start="45:17" pos:end="45:17">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="46:5" pos:end="46:24"><decl pos:start="46:5" pos:end="46:23"><type pos:start="46:5" pos:end="46:22"><name pos:start="46:5" pos:end="46:22"><name pos:start="46:5" pos:end="46:7">std</name><operator pos:start="46:8" pos:end="46:9">::</operator><name pos:start="46:10" pos:end="46:15">vector</name><argument_list type="generic" pos:start="46:16" pos:end="46:22">&lt;<argument pos:start="46:17" pos:end="46:21"><expr pos:start="46:17" pos:end="46:21"><name pos:start="46:17" pos:end="46:21">Actor</name></expr></argument>&gt;</argument_list></name></type><name pos:start="46:23" pos:end="46:23">a</name></decl>;</decl_stmt>
    <while pos:start="47:5" pos:end="78:5">while<condition pos:start="47:10" pos:end="47:28">(<expr pos:start="47:11" pos:end="47:27"><name pos:start="47:11" pos:end="47:18"><name pos:start="47:11" pos:end="47:13">std</name><operator pos:start="47:14" pos:end="47:15">::</operator><name pos:start="47:16" pos:end="47:18">cin</name></name><operator pos:start="47:19" pos:end="47:20">&gt;&gt;</operator><name pos:start="47:21" pos:end="47:27"><name pos:start="47:21" pos:end="47:22">ac</name><operator pos:start="47:23" pos:end="47:23">.</operator><name pos:start="47:24" pos:end="47:27">name</name></name></expr>)</condition>
    <block pos:start="48:5" pos:end="78:5">{<block_content pos:start="49:9" pos:end="77:9">
        <if_stmt pos:start="49:9" pos:end="77:9"><if pos:start="49:9" pos:end="67:9">if<condition pos:start="49:11" pos:end="49:35">(<expr pos:start="49:12" pos:end="49:34"><name pos:start="49:12" pos:end="49:18"><name pos:start="49:12" pos:end="49:13">ac</name><operator pos:start="49:14" pos:end="49:14">.</operator><name pos:start="49:15" pos:end="49:18">name</name></name><operator pos:start="49:19" pos:end="49:20">!=</operator><literal type="string" pos:start="49:21" pos:end="49:34">"tingtingting"</literal></expr>)</condition>
        <block pos:start="50:9" pos:end="67:9">{<block_content pos:start="51:13" pos:end="66:28">
            <expr_stmt pos:start="51:13" pos:end="51:33"><expr pos:start="51:13" pos:end="51:32"><call pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:17">scanf</name><argument_list pos:start="51:18" pos:end="51:32">(<argument pos:start="51:19" pos:end="51:22"><expr pos:start="51:19" pos:end="51:22"><literal type="string" pos:start="51:19" pos:end="51:22">"%d"</literal></expr></argument>,<argument pos:start="51:24" pos:end="51:31"><expr pos:start="51:24" pos:end="51:31"><operator pos:start="51:24" pos:end="51:24">&amp;</operator><name pos:start="51:25" pos:end="51:31"><name pos:start="51:25" pos:end="51:26">ac</name><operator pos:start="51:27" pos:end="51:27">.</operator><name pos:start="51:28" pos:end="51:31">time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="52:13" pos:end="65:13"><if pos:start="52:13" pos:end="60:13">if<condition pos:start="52:15" pos:end="52:20">(<expr pos:start="52:16" pos:end="52:19"><name pos:start="52:16" pos:end="52:16">t</name><operator pos:start="52:17" pos:end="52:18">&gt;=</operator><literal type="number" pos:start="52:19" pos:end="52:19">0</literal></expr>)</condition>
            <block pos:start="53:13" pos:end="60:13">{<block_content pos:start="54:17" pos:end="59:17">
                <expr_stmt pos:start="54:17" pos:end="54:27"><expr pos:start="54:17" pos:end="54:26"><name pos:start="54:17" pos:end="54:17">t</name><operator pos:start="54:18" pos:end="54:19">-=</operator><name pos:start="54:20" pos:end="54:26"><name pos:start="54:20" pos:end="54:21">ac</name><operator pos:start="54:22" pos:end="54:22">.</operator><name pos:start="54:23" pos:end="54:26">time</name></name></expr>;</expr_stmt>
                <if_stmt pos:start="55:17" pos:end="59:17"><if pos:start="55:17" pos:end="59:17">if<condition pos:start="55:19" pos:end="55:41">(<expr pos:start="55:20" pos:end="55:40"><name pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:21">ac</name><operator pos:start="55:22" pos:end="55:22">.</operator><name pos:start="55:23" pos:end="55:26">name</name></name><operator pos:start="55:27" pos:end="55:28">==</operator><literal type="string" pos:start="55:29" pos:end="55:40">"kaomianjin"</literal></expr>)</condition>
                <block pos:start="56:17" pos:end="59:17">{<block_content pos:start="57:21" pos:end="58:29">
                    <expr_stmt pos:start="57:21" pos:end="57:47"><expr pos:start="57:21" pos:end="57:46"><call pos:start="57:21" pos:end="57:46"><name pos:start="57:21" pos:end="57:26">printf</name><argument_list pos:start="57:27" pos:end="57:46">(<argument pos:start="57:28" pos:end="57:45"><expr pos:start="57:28" pos:end="57:45"><literal type="string" pos:start="57:28" pos:end="57:45">"Congratulations!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="58:21" pos:end="58:29">return <expr pos:start="58:28" pos:end="58:28"><literal type="number" pos:start="58:28" pos:end="58:28">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else pos:start="61:13" pos:end="65:13">else
            <block pos:start="62:13" pos:end="65:13">{<block_content pos:start="63:17" pos:end="64:25">
                <expr_stmt pos:start="63:17" pos:end="63:41"><expr pos:start="63:17" pos:end="63:40"><call pos:start="63:17" pos:end="63:40"><name pos:start="63:17" pos:end="63:22">printf</name><argument_list pos:start="63:23" pos:end="63:40">(<argument pos:start="63:24" pos:end="63:39"><expr pos:start="63:24" pos:end="63:39"><literal type="string" pos:start="63:24" pos:end="63:39">"Unfortunately."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="64:17" pos:end="64:25">return <expr pos:start="64:24" pos:end="64:24"><literal type="number" pos:start="64:24" pos:end="64:24">0</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:28"><expr pos:start="66:13" pos:end="66:27"><call pos:start="66:13" pos:end="66:27"><name pos:start="66:13" pos:end="66:23"><name pos:start="66:13" pos:end="66:13">a</name><operator pos:start="66:14" pos:end="66:14">.</operator><name pos:start="66:15" pos:end="66:23">push_back</name></name><argument_list pos:start="66:24" pos:end="66:27">(<argument pos:start="66:25" pos:end="66:26"><expr pos:start="66:25" pos:end="66:26"><name pos:start="66:25" pos:end="66:26">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else pos:start="68:9" pos:end="77:9">else
        <block pos:start="69:9" pos:end="77:9">{<block_content pos:start="70:13" pos:end="76:25">
            <expr_stmt pos:start="70:13" pos:end="70:34"><expr pos:start="70:13" pos:end="70:33"><name pos:start="70:13" pos:end="70:13">t</name><operator pos:start="70:14" pos:end="70:15">+=</operator><name pos:start="70:16" pos:end="70:28"><name pos:start="70:16" pos:end="70:16">a</name><index pos:start="70:17" pos:end="70:28">[<expr pos:start="70:18" pos:end="70:27"><call pos:start="70:18" pos:end="70:25"><name pos:start="70:18" pos:end="70:23"><name pos:start="70:18" pos:end="70:18">a</name><operator pos:start="70:19" pos:end="70:19">.</operator><name pos:start="70:20" pos:end="70:23">size</name></name><argument_list pos:start="70:24" pos:end="70:25">()</argument_list></call><operator pos:start="70:26" pos:end="70:26">-</operator><literal type="number" pos:start="70:27" pos:end="70:27">1</literal></expr>]</index></name><operator pos:start="70:29" pos:end="70:29">.</operator><name pos:start="70:30" pos:end="70:33">time</name></expr>;</expr_stmt>
            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if<condition pos:start="71:15" pos:end="71:48">(<expr pos:start="71:16" pos:end="71:47"><name pos:start="71:16" pos:end="71:28"><name pos:start="71:16" pos:end="71:16">a</name><index pos:start="71:17" pos:end="71:28">[<expr pos:start="71:18" pos:end="71:27"><call pos:start="71:18" pos:end="71:25"><name pos:start="71:18" pos:end="71:23"><name pos:start="71:18" pos:end="71:18">a</name><operator pos:start="71:19" pos:end="71:19">.</operator><name pos:start="71:20" pos:end="71:23">size</name></name><argument_list pos:start="71:24" pos:end="71:25">()</argument_list></call><operator pos:start="71:26" pos:end="71:26">-</operator><literal type="number" pos:start="71:27" pos:end="71:27">1</literal></expr>]</index></name><operator pos:start="71:29" pos:end="71:29">.</operator><name pos:start="71:30" pos:end="71:33">name</name><operator pos:start="71:34" pos:end="71:35">==</operator><literal type="string" pos:start="71:36" pos:end="71:47">"kaomianjin"</literal></expr>)</condition>
            <block pos:start="72:13" pos:end="75:13">{<block_content pos:start="73:17" pos:end="74:25">
                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><call pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:22">printf</name><argument_list pos:start="73:23" pos:end="73:33">(<argument pos:start="73:24" pos:end="73:32"><expr pos:start="73:24" pos:end="73:32"><literal type="string" pos:start="73:24" pos:end="73:32">"Hahaha."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="74:17" pos:end="74:25">return <expr pos:start="74:24" pos:end="74:24"><literal type="number" pos:start="74:24" pos:end="74:24">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="76:13" pos:end="76:25"><expr pos:start="76:13" pos:end="76:24"><call pos:start="76:13" pos:end="76:24"><name pos:start="76:13" pos:end="76:22"><name pos:start="76:13" pos:end="76:13">a</name><operator pos:start="76:14" pos:end="76:14">.</operator><name pos:start="76:15" pos:end="76:22">pop_back</name></name><argument_list pos:start="76:23" pos:end="76:24">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
