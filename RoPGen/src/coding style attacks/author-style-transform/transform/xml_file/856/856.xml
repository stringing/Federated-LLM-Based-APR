<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/856/856.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:24">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:24">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:22"><decl pos:start="3:1" pos:end="3:21"><type pos:start="3:1" pos:end="3:4"><name pos:start="3:1" pos:end="3:4">char</name></type> <name pos:start="3:6" pos:end="3:15"><name pos:start="3:6" pos:end="3:8">str</name><index pos:start="3:9" pos:end="3:15">[<expr pos:start="3:10" pos:end="3:14"><literal type="number" pos:start="3:10" pos:end="3:14">40005</literal></expr>]</index></name> <init pos:start="3:17" pos:end="3:21">= <expr pos:start="3:19" pos:end="3:21"><block pos:start="3:19" pos:end="3:21">{<expr pos:start="3:20" pos:end="3:20"><literal type="number" pos:start="3:20" pos:end="3:20">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function pos:start="4:1" pos:end="22:1"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:8">main</name><parameter_list pos:start="4:9" pos:end="4:10">()</parameter_list> <block pos:start="4:12" pos:end="22:1">{<block_content pos:start="5:5" pos:end="21:13">
    <expr_stmt pos:start="5:5" pos:end="5:34"><expr pos:start="5:5" pos:end="5:33"><call pos:start="5:5" pos:end="5:33"><name pos:start="5:5" pos:end="5:11">freopen</name><argument_list pos:start="5:12" pos:end="5:33">(<argument pos:start="5:13" pos:end="5:20"><expr pos:start="5:13" pos:end="5:20"><literal type="string" pos:start="5:13" pos:end="5:20">"zip.in"</literal></expr></argument>, <argument pos:start="5:23" pos:end="5:25"><expr pos:start="5:23" pos:end="5:25"><literal type="string" pos:start="5:23" pos:end="5:25">"r"</literal></expr></argument>, <argument pos:start="5:28" pos:end="5:32"><expr pos:start="5:28" pos:end="5:32"><name pos:start="5:28" pos:end="5:32">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:36"><expr pos:start="6:5" pos:end="6:35"><call pos:start="6:5" pos:end="6:35"><name pos:start="6:5" pos:end="6:11">freopen</name><argument_list pos:start="6:12" pos:end="6:35">(<argument pos:start="6:13" pos:end="6:21"><expr pos:start="6:13" pos:end="6:21"><literal type="string" pos:start="6:13" pos:end="6:21">"zip.out"</literal></expr></argument>, <argument pos:start="6:24" pos:end="6:26"><expr pos:start="6:24" pos:end="6:26"><literal type="string" pos:start="6:24" pos:end="6:26">"w"</literal></expr></argument>, <argument pos:start="6:29" pos:end="6:34"><expr pos:start="6:29" pos:end="6:34"><name pos:start="6:29" pos:end="6:34">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>;</decl_stmt>
    <for pos:start="8:5" pos:end="8:42">for <control pos:start="8:9" pos:end="8:41">(<init pos:start="8:10" pos:end="8:17"><expr pos:start="8:10" pos:end="8:16"><name pos:start="8:10" pos:end="8:12">len</name> <operator pos:start="8:14" pos:end="8:14">=</operator> <literal type="number" pos:start="8:16" pos:end="8:16">0</literal></expr>;</init> <condition pos:start="8:19" pos:end="8:34"><expr pos:start="8:19" pos:end="8:33"><name pos:start="8:19" pos:end="8:21">cin</name> <operator pos:start="8:23" pos:end="8:24">&gt;&gt;</operator> <name pos:start="8:26" pos:end="8:33"><name pos:start="8:26" pos:end="8:28">str</name><index pos:start="8:29" pos:end="8:33">[<expr pos:start="8:30" pos:end="8:32"><name pos:start="8:30" pos:end="8:32">len</name></expr>]</index></name></expr>;</condition> <incr pos:start="8:36" pos:end="8:40"><expr pos:start="8:36" pos:end="8:40"><name pos:start="8:36" pos:end="8:38">len</name><operator pos:start="8:39" pos:end="8:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="8:42" pos:end="8:42"><block_content pos:start="8:42" pos:end="8:42"><empty_stmt pos:start="8:42" pos:end="8:42">;</empty_stmt></block_content></block></for> 
    <expr_stmt pos:start="9:5" pos:end="9:10"><expr pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:7">len</name><operator pos:start="9:8" pos:end="9:9">--</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:38"><expr pos:start="10:5" pos:end="10:37"><name pos:start="10:5" pos:end="10:8">cout</name> <operator pos:start="10:10" pos:end="10:11">&lt;&lt;</operator> <operator pos:start="10:13" pos:end="10:13">(</operator><name pos:start="10:14" pos:end="10:16">int</name><operator pos:start="10:17" pos:end="10:17">)</operator><call pos:start="10:18" pos:end="10:26"><name pos:start="10:18" pos:end="10:21">sqrt</name><argument_list pos:start="10:22" pos:end="10:26">(<argument pos:start="10:23" pos:end="10:25"><expr pos:start="10:23" pos:end="10:25"><name pos:start="10:23" pos:end="10:25">len</name></expr></argument>)</argument_list></call> <operator pos:start="10:28" pos:end="10:28">+</operator> <literal type="number" pos:start="10:30" pos:end="10:30">1</literal> <operator pos:start="10:32" pos:end="10:33">&lt;&lt;</operator> <literal type="string" pos:start="10:35" pos:end="10:37">" "</literal></expr>;</expr_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">tmp</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:17"><decl pos:start="12:5" pos:end="12:16"><type pos:start="12:5" pos:end="12:8"><name pos:start="12:5" pos:end="12:8">char</name></type> <name pos:start="12:10" pos:end="12:10">a</name> <init pos:start="12:12" pos:end="12:16">= <expr pos:start="12:14" pos:end="12:16"><literal type="char" pos:start="12:14" pos:end="12:16">'0'</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="13:5" pos:end="20:5">for <control pos:start="13:9" pos:end="13:33">(<init pos:start="13:10" pos:end="13:19"><decl pos:start="13:10" pos:end="13:18"><type pos:start="13:10" pos:end="13:12"><name pos:start="13:10" pos:end="13:12">int</name></type> <name pos:start="13:14" pos:end="13:14">i</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</init> <condition pos:start="13:21" pos:end="13:28"><expr pos:start="13:21" pos:end="13:27"><name pos:start="13:21" pos:end="13:21">i</name> <operator pos:start="13:23" pos:end="13:23">&lt;</operator> <name pos:start="13:25" pos:end="13:27">len</name></expr>;</condition> <incr pos:start="13:30" pos:end="13:32"><expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:30">i</name><operator pos:start="13:31" pos:end="13:32">++</operator></expr></incr>)</control> <block pos:start="13:35" pos:end="20:5">{<block_content pos:start="14:9" pos:end="19:9">
        <if_stmt pos:start="14:9" pos:end="19:9"><if pos:start="14:9" pos:end="14:31">if <condition pos:start="14:12" pos:end="14:24">(<expr pos:start="14:13" pos:end="14:23"><name pos:start="14:13" pos:end="14:18"><name pos:start="14:13" pos:end="14:15">str</name><index pos:start="14:16" pos:end="14:18">[<expr pos:start="14:17" pos:end="14:17"><name pos:start="14:17" pos:end="14:17">i</name></expr>]</index></name> <operator pos:start="14:20" pos:end="14:21">==</operator> <name pos:start="14:23" pos:end="14:23">a</name></expr>)</condition><block type="pseudo" pos:start="14:26" pos:end="14:31"><block_content pos:start="14:26" pos:end="14:31"> <expr_stmt pos:start="14:26" pos:end="14:31"><expr pos:start="14:26" pos:end="14:30"><name pos:start="14:26" pos:end="14:28">tmp</name><operator pos:start="14:29" pos:end="14:30">++</operator></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="15:9" pos:end="19:9">else <block pos:start="15:14" pos:end="19:9">{<block_content pos:start="16:13" pos:end="18:20">
            <expr_stmt pos:start="16:13" pos:end="16:31"><expr pos:start="16:13" pos:end="16:30"><name pos:start="16:13" pos:end="16:16">cout</name> <operator pos:start="16:18" pos:end="16:19">&lt;&lt;</operator> <name pos:start="16:21" pos:end="16:23">tmp</name> <operator pos:start="16:25" pos:end="16:26">&lt;&lt;</operator> <literal type="string" pos:start="16:28" pos:end="16:30">" "</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="17:13" pos:end="17:23"><expr pos:start="17:13" pos:end="17:22"><name pos:start="17:13" pos:end="17:13">a</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:19">str</name><index pos:start="17:20" pos:end="17:22">[<expr pos:start="17:21" pos:end="17:21"><name pos:start="17:21" pos:end="17:21">i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="18:13" pos:end="18:20"><expr pos:start="18:13" pos:end="18:19"><name pos:start="18:13" pos:end="18:15">tmp</name> <operator pos:start="18:17" pos:end="18:17">=</operator> <literal type="number" pos:start="18:19" pos:end="18:19">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return pos:start="21:5" pos:end="21:13">return <expr pos:start="21:12" pos:end="21:12"><literal type="number" pos:start="21:12" pos:end="21:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
