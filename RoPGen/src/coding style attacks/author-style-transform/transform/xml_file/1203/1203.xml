<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/1203/1203.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using pos:start="2:1" pos:end="2:20">using <namespace pos:start="2:7" pos:end="2:20">namespace <name pos:start="2:17" pos:end="2:19">std</name>;</namespace></using>
<decl_stmt pos:start="3:1" pos:end="3:6"><decl pos:start="3:1" pos:end="3:5"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:5">t</name></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:17"><decl pos:start="4:1" pos:end="4:16"><type pos:start="4:1" pos:end="4:6"><name pos:start="4:1" pos:end="4:6">string</name></type> <name pos:start="4:8" pos:end="4:16"><name pos:start="4:8" pos:end="4:11">maze</name><index pos:start="4:12" pos:end="4:16">[<expr pos:start="4:13" pos:end="4:15"><literal type="number" pos:start="4:13" pos:end="4:15">110</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:22"><decl pos:start="5:1" pos:end="5:5"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:5">m</name></decl>,<decl pos:start="5:7" pos:end="5:7"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:7" pos:end="5:7">n</name></decl>,<decl pos:start="5:9" pos:end="5:9"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:9" pos:end="5:9">k</name></decl>,<decl pos:start="5:11" pos:end="5:12"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:11" pos:end="5:12">x1</name></decl>,<decl pos:start="5:14" pos:end="5:15"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:14" pos:end="5:15">y1</name></decl>,<decl pos:start="5:17" pos:end="5:18"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:17" pos:end="5:18">x2</name></decl>,<decl pos:start="5:20" pos:end="5:21"><type ref="prev" pos:start="5:1" pos:end="5:3"/><name pos:start="5:20" pos:end="5:21">y2</name></decl>;</decl_stmt>
<decl_stmt pos:start="6:1" pos:end="6:19"><decl pos:start="6:1" pos:end="6:18"><type pos:start="6:1" pos:end="6:4"><name pos:start="6:1" pos:end="6:4">bool</name></type> <name pos:start="6:6" pos:end="6:18"><name pos:start="6:6" pos:end="6:8">vis</name><index pos:start="6:9" pos:end="6:13">[<expr pos:start="6:10" pos:end="6:12"><literal type="number" pos:start="6:10" pos:end="6:12">110</literal></expr>]</index><index pos:start="6:14" pos:end="6:18">[<expr pos:start="6:15" pos:end="6:17"><literal type="number" pos:start="6:15" pos:end="6:17">110</literal></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="7:1" pos:end="10:1"><type pos:start="7:1" pos:end="7:4"><name pos:start="7:1" pos:end="7:4">bool</name></type> <name pos:start="7:6" pos:end="7:7">in</name><parameter_list pos:start="7:8" pos:end="7:20">(<parameter pos:start="7:9" pos:end="7:13"><decl pos:start="7:9" pos:end="7:13"><type pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:13">x</name></decl></parameter>,<parameter pos:start="7:15" pos:end="7:19"><decl pos:start="7:15" pos:end="7:19"><type pos:start="7:15" pos:end="7:19"><name pos:start="7:15" pos:end="7:17">int</name></type> <name pos:start="7:19" pos:end="7:19">y</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="10:1">{<block_content pos:start="9:5" pos:end="9:32">
    <return pos:start="9:5" pos:end="9:32">return <expr pos:start="9:12" pos:end="9:31"><literal type="number" pos:start="9:12" pos:end="9:12">0</literal><operator pos:start="9:13" pos:end="9:14">&lt;=</operator><name pos:start="9:15" pos:end="9:15">x</name><operator pos:start="9:16" pos:end="9:17">&amp;&amp;</operator><name pos:start="9:18" pos:end="9:18">x</name><operator pos:start="9:19" pos:end="9:19">&lt;</operator><name pos:start="9:20" pos:end="9:20">m</name><operator pos:start="9:21" pos:end="9:22">&amp;&amp;</operator><literal type="number" pos:start="9:23" pos:end="9:23">0</literal><operator pos:start="9:24" pos:end="9:25">&lt;=</operator><name pos:start="9:26" pos:end="9:26">y</name><operator pos:start="9:27" pos:end="9:28">&amp;&amp;</operator><name pos:start="9:29" pos:end="9:29">y</name><operator pos:start="9:30" pos:end="9:30">&lt;</operator><name pos:start="9:31" pos:end="9:31">n</name></expr>;</return>
</block_content>}</block></function>
<struct pos:start="11:1" pos:end="21:2">struct <name pos:start="11:8" pos:end="11:11">node</name>
<block pos:start="12:1" pos:end="21:1">{<public type="default" pos:start="13:5" pos:end="20:5">
    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">x</name></decl>,<decl pos:start="13:11" pos:end="13:11"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:11" pos:end="13:11">y</name></decl>,<decl pos:start="13:13" pos:end="13:13"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:13">r</name></decl>,<decl pos:start="13:15" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:17">rot</name></decl>;</decl_stmt>
    <constructor pos:start="14:5" pos:end="20:5"><name pos:start="14:5" pos:end="14:8">node</name><parameter_list pos:start="14:9" pos:end="14:39">(<parameter pos:start="14:10" pos:end="14:15"><decl pos:start="14:10" pos:end="14:15"><type pos:start="14:10" pos:end="14:15"><name pos:start="14:10" pos:end="14:12">int</name></type> <name pos:start="14:14" pos:end="14:15">xx</name></decl></parameter>,<parameter pos:start="14:17" pos:end="14:22"><decl pos:start="14:17" pos:end="14:22"><type pos:start="14:17" pos:end="14:22"><name pos:start="14:17" pos:end="14:19">int</name></type> <name pos:start="14:21" pos:end="14:22">yy</name></decl></parameter>,<parameter pos:start="14:24" pos:end="14:29"><decl pos:start="14:24" pos:end="14:29"><type pos:start="14:24" pos:end="14:29"><name pos:start="14:24" pos:end="14:26">int</name></type> <name pos:start="14:28" pos:end="14:29">rr</name></decl></parameter>,<parameter pos:start="14:31" pos:end="14:38"><decl pos:start="14:31" pos:end="14:38"><type pos:start="14:31" pos:end="14:38"><name pos:start="14:31" pos:end="14:33">int</name></type> <name pos:start="14:35" pos:end="14:38">rott</name></decl></parameter>)</parameter_list>
    <block pos:start="15:5" pos:end="20:5">{<block_content pos:start="16:9" pos:end="19:17">
        <expr_stmt pos:start="16:9" pos:end="16:13"><expr pos:start="16:9" pos:end="16:12"><name pos:start="16:9" pos:end="16:9">x</name><operator pos:start="16:10" pos:end="16:10">=</operator><name pos:start="16:11" pos:end="16:12">xx</name></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:13"><expr pos:start="17:9" pos:end="17:12"><name pos:start="17:9" pos:end="17:9">y</name><operator pos:start="17:10" pos:end="17:10">=</operator><name pos:start="17:11" pos:end="17:12">yy</name></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:13"><expr pos:start="18:9" pos:end="18:12"><name pos:start="18:9" pos:end="18:9">r</name><operator pos:start="18:10" pos:end="18:10">=</operator><name pos:start="18:11" pos:end="18:12">rr</name></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:17"><expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:11">rot</name><operator pos:start="19:12" pos:end="19:12">=</operator><name pos:start="19:13" pos:end="19:16">rott</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</struct>
<function pos:start="22:1" pos:end="72:1"><type pos:start="22:1" pos:end="22:4"><name pos:start="22:1" pos:end="22:4">bool</name></type> <name pos:start="22:6" pos:end="22:8">bfs</name><parameter_list pos:start="22:9" pos:end="22:23">(<parameter pos:start="22:10" pos:end="22:15"><decl pos:start="22:10" pos:end="22:15"><type pos:start="22:10" pos:end="22:15"><name pos:start="22:10" pos:end="22:12">int</name></type> <name pos:start="22:14" pos:end="22:15">sx</name></decl></parameter>,<parameter pos:start="22:17" pos:end="22:22"><decl pos:start="22:17" pos:end="22:22"><type pos:start="22:17" pos:end="22:22"><name pos:start="22:17" pos:end="22:19">int</name></type> <name pos:start="22:21" pos:end="22:22">sy</name></decl></parameter>)</parameter_list>
<block pos:start="23:1" pos:end="72:1">{<block_content pos:start="24:5" pos:end="71:5">
    <decl_stmt pos:start="24:5" pos:end="24:17"><decl pos:start="24:5" pos:end="24:16"><type pos:start="24:5" pos:end="24:15"><name pos:start="24:5" pos:end="24:15"><name pos:start="24:5" pos:end="24:9">queue</name><argument_list type="generic" pos:start="24:10" pos:end="24:15">&lt;<argument pos:start="24:11" pos:end="24:14"><expr pos:start="24:11" pos:end="24:14"><name pos:start="24:11" pos:end="24:14">node</name></expr></argument>&gt;</argument_list></name></type><name pos:start="24:16" pos:end="24:16">q</name></decl>;</decl_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><call pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:5">q</name><operator pos:start="25:6" pos:end="25:6">.</operator><name pos:start="25:7" pos:end="25:10">push</name></name><argument_list pos:start="25:11" pos:end="25:28">(<argument pos:start="25:12" pos:end="25:27"><expr pos:start="25:12" pos:end="25:27"><call pos:start="25:12" pos:end="25:27"><name pos:start="25:12" pos:end="25:15">node</name><argument_list pos:start="25:16" pos:end="25:27">(<argument pos:start="25:17" pos:end="25:18"><expr pos:start="25:17" pos:end="25:18"><name pos:start="25:17" pos:end="25:18">sx</name></expr></argument>,<argument pos:start="25:20" pos:end="25:21"><expr pos:start="25:20" pos:end="25:21"><name pos:start="25:20" pos:end="25:21">sy</name></expr></argument>,<argument pos:start="25:23" pos:end="25:23"><expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr></argument>,<argument pos:start="25:25" pos:end="25:26"><expr pos:start="25:25" pos:end="25:26"><operator pos:start="25:25" pos:end="25:25">-</operator><literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:21"><expr pos:start="26:5" pos:end="26:20"><name pos:start="26:5" pos:end="26:15"><name pos:start="26:5" pos:end="26:7">vis</name><index pos:start="26:8" pos:end="26:11">[<expr pos:start="26:9" pos:end="26:10"><name pos:start="26:9" pos:end="26:10">sx</name></expr>]</index><index pos:start="26:12" pos:end="26:15">[<expr pos:start="26:13" pos:end="26:14"><name pos:start="26:13" pos:end="26:14">sy</name></expr>]</index></name><operator pos:start="26:16" pos:end="26:16">=</operator><literal type="boolean" pos:start="26:17" pos:end="26:20">true</literal></expr>;</expr_stmt>
    <while pos:start="27:5" pos:end="71:5">while<condition pos:start="27:10" pos:end="27:21">(<expr pos:start="27:11" pos:end="27:20"><operator pos:start="27:11" pos:end="27:11">!</operator><call pos:start="27:12" pos:end="27:20"><name pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:12">q</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:18">empty</name></name><argument_list pos:start="27:19" pos:end="27:20">()</argument_list></call></expr>)</condition>
    <block pos:start="28:5" pos:end="71:5">{<block_content pos:start="29:9" pos:end="70:9">
        <decl_stmt pos:start="29:9" pos:end="29:27"><decl pos:start="29:9" pos:end="29:26"><type pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:12">node</name></type> <name pos:start="29:14" pos:end="29:16">now</name><init pos:start="29:17" pos:end="29:26">=<expr pos:start="29:18" pos:end="29:26"><call pos:start="29:18" pos:end="29:26"><name pos:start="29:18" pos:end="29:24"><name pos:start="29:18" pos:end="29:18">q</name><operator pos:start="29:19" pos:end="29:19">.</operator><name pos:start="29:20" pos:end="29:24">front</name></name><argument_list pos:start="29:25" pos:end="29:26">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:16"><expr pos:start="30:9" pos:end="30:15"><call pos:start="30:9" pos:end="30:15"><name pos:start="30:9" pos:end="30:13"><name pos:start="30:9" pos:end="30:9">q</name><operator pos:start="30:10" pos:end="30:10">.</operator><name pos:start="30:11" pos:end="30:13">pop</name></name><argument_list pos:start="30:14" pos:end="30:15">()</argument_list></call></expr>;</expr_stmt>
        <for pos:start="31:9" pos:end="70:9">for<control pos:start="31:12" pos:end="31:28">(<init pos:start="31:13" pos:end="31:20"><decl pos:start="31:13" pos:end="31:19"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:17">i</name><init pos:start="31:18" pos:end="31:19">=<expr pos:start="31:19" pos:end="31:19"><literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr></init></decl>;</init><condition pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:21">i</name><operator pos:start="31:22" pos:end="31:22">&lt;</operator><literal type="number" pos:start="31:23" pos:end="31:23">4</literal></expr>;</condition><incr pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:25">i</name><operator pos:start="31:26" pos:end="31:27">++</operator></expr></incr>)</control>
        <block pos:start="32:9" pos:end="70:9">{<block_content pos:start="33:13" pos:end="69:13">
            <decl_stmt pos:start="33:13" pos:end="33:34"><decl pos:start="33:13" pos:end="33:24"><type pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">int</name></type> <name pos:start="33:17" pos:end="33:18">tx</name><init pos:start="33:19" pos:end="33:24">=<expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:22">now</name><operator pos:start="33:23" pos:end="33:23">.</operator><name pos:start="33:24" pos:end="33:24">x</name></name></expr></init></decl>,<decl pos:start="33:26" pos:end="33:33"><type ref="prev" pos:start="33:13" pos:end="33:15"/><name pos:start="33:26" pos:end="33:27">ty</name><init pos:start="33:28" pos:end="33:33">=<expr pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:33"><name pos:start="33:29" pos:end="33:31">now</name><operator pos:start="33:32" pos:end="33:32">.</operator><name pos:start="33:33" pos:end="33:33">y</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="34:13" pos:end="39:13"><if pos:start="34:13" pos:end="39:13">if<condition pos:start="34:15" pos:end="34:20">(<expr pos:start="34:16" pos:end="34:19"><name pos:start="34:16" pos:end="34:16">i</name><operator pos:start="34:17" pos:end="34:18">==</operator><literal type="number" pos:start="34:19" pos:end="34:19">0</literal></expr>)</condition>
            <block pos:start="35:13" pos:end="39:13">{<block_content pos:start="36:17" pos:end="38:28">
                <expr_stmt pos:start="36:17" pos:end="36:21"><expr pos:start="36:17" pos:end="36:20"><name pos:start="36:17" pos:end="36:18">tx</name><operator pos:start="36:19" pos:end="36:20">++</operator></expr>;</expr_stmt>
                <if_stmt pos:start="37:17" pos:end="38:28"><if pos:start="37:17" pos:end="38:28">if<condition pos:start="37:19" pos:end="37:30">(<expr pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:22">now</name><operator pos:start="37:23" pos:end="37:23">.</operator><name pos:start="37:24" pos:end="37:26">rot</name></name><operator pos:start="37:27" pos:end="37:28">!=</operator><literal type="number" pos:start="37:29" pos:end="37:29">0</literal></expr>)</condition><block type="pseudo" pos:start="38:21" pos:end="38:28"><block_content pos:start="38:21" pos:end="38:28">
                    <expr_stmt pos:start="38:21" pos:end="38:28"><expr pos:start="38:21" pos:end="38:27"><name pos:start="38:21" pos:end="38:25"><name pos:start="38:21" pos:end="38:23">now</name><operator pos:start="38:24" pos:end="38:24">.</operator><name pos:start="38:25" pos:end="38:25">r</name></name><operator pos:start="38:26" pos:end="38:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="40:13" pos:end="45:13"><if pos:start="40:13" pos:end="45:13">if<condition pos:start="40:15" pos:end="40:20">(<expr pos:start="40:16" pos:end="40:19"><name pos:start="40:16" pos:end="40:16">i</name><operator pos:start="40:17" pos:end="40:18">==</operator><literal type="number" pos:start="40:19" pos:end="40:19">1</literal></expr>)</condition>
            <block pos:start="41:13" pos:end="45:13">{<block_content pos:start="42:17" pos:end="44:28">
                <expr_stmt pos:start="42:17" pos:end="42:21"><expr pos:start="42:17" pos:end="42:20"><name pos:start="42:17" pos:end="42:18">tx</name><operator pos:start="42:19" pos:end="42:20">--</operator></expr>;</expr_stmt>
                <if_stmt pos:start="43:17" pos:end="44:28"><if pos:start="43:17" pos:end="44:28">if<condition pos:start="43:19" pos:end="43:30">(<expr pos:start="43:20" pos:end="43:29"><name pos:start="43:20" pos:end="43:26"><name pos:start="43:20" pos:end="43:22">now</name><operator pos:start="43:23" pos:end="43:23">.</operator><name pos:start="43:24" pos:end="43:26">rot</name></name><operator pos:start="43:27" pos:end="43:28">!=</operator><literal type="number" pos:start="43:29" pos:end="43:29">1</literal></expr>)</condition><block type="pseudo" pos:start="44:21" pos:end="44:28"><block_content pos:start="44:21" pos:end="44:28">
                    <expr_stmt pos:start="44:21" pos:end="44:28"><expr pos:start="44:21" pos:end="44:27"><name pos:start="44:21" pos:end="44:25"><name pos:start="44:21" pos:end="44:23">now</name><operator pos:start="44:24" pos:end="44:24">.</operator><name pos:start="44:25" pos:end="44:25">r</name></name><operator pos:start="44:26" pos:end="44:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="46:13" pos:end="51:13"><if pos:start="46:13" pos:end="51:13">if<condition pos:start="46:15" pos:end="46:20">(<expr pos:start="46:16" pos:end="46:19"><name pos:start="46:16" pos:end="46:16">i</name><operator pos:start="46:17" pos:end="46:18">==</operator><literal type="number" pos:start="46:19" pos:end="46:19">2</literal></expr>)</condition>
            <block pos:start="47:13" pos:end="51:13">{<block_content pos:start="48:17" pos:end="50:28">
                <expr_stmt pos:start="48:17" pos:end="48:21"><expr pos:start="48:17" pos:end="48:20"><name pos:start="48:17" pos:end="48:18">ty</name><operator pos:start="48:19" pos:end="48:20">++</operator></expr>;</expr_stmt>
                <if_stmt pos:start="49:17" pos:end="50:28"><if pos:start="49:17" pos:end="50:28">if<condition pos:start="49:19" pos:end="49:30">(<expr pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:26"><name pos:start="49:20" pos:end="49:22">now</name><operator pos:start="49:23" pos:end="49:23">.</operator><name pos:start="49:24" pos:end="49:26">rot</name></name><operator pos:start="49:27" pos:end="49:28">!=</operator><literal type="number" pos:start="49:29" pos:end="49:29">2</literal></expr>)</condition><block type="pseudo" pos:start="50:21" pos:end="50:28"><block_content pos:start="50:21" pos:end="50:28">
                    <expr_stmt pos:start="50:21" pos:end="50:28"><expr pos:start="50:21" pos:end="50:27"><name pos:start="50:21" pos:end="50:25"><name pos:start="50:21" pos:end="50:23">now</name><operator pos:start="50:24" pos:end="50:24">.</operator><name pos:start="50:25" pos:end="50:25">r</name></name><operator pos:start="50:26" pos:end="50:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="52:13" pos:end="57:13"><if pos:start="52:13" pos:end="57:13">if<condition pos:start="52:15" pos:end="52:20">(<expr pos:start="52:16" pos:end="52:19"><name pos:start="52:16" pos:end="52:16">i</name><operator pos:start="52:17" pos:end="52:18">==</operator><literal type="number" pos:start="52:19" pos:end="52:19">3</literal></expr>)</condition>
            <block pos:start="53:13" pos:end="57:13">{<block_content pos:start="54:17" pos:end="56:28">
                <expr_stmt pos:start="54:17" pos:end="54:21"><expr pos:start="54:17" pos:end="54:20"><name pos:start="54:17" pos:end="54:18">ty</name><operator pos:start="54:19" pos:end="54:20">--</operator></expr>;</expr_stmt>
                <if_stmt pos:start="55:17" pos:end="56:28"><if pos:start="55:17" pos:end="56:28">if<condition pos:start="55:19" pos:end="55:30">(<expr pos:start="55:20" pos:end="55:29"><name pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:22">now</name><operator pos:start="55:23" pos:end="55:23">.</operator><name pos:start="55:24" pos:end="55:26">rot</name></name><operator pos:start="55:27" pos:end="55:28">!=</operator><literal type="number" pos:start="55:29" pos:end="55:29">3</literal></expr>)</condition><block type="pseudo" pos:start="56:21" pos:end="56:28"><block_content pos:start="56:21" pos:end="56:28">
                    <expr_stmt pos:start="56:21" pos:end="56:28"><expr pos:start="56:21" pos:end="56:27"><name pos:start="56:21" pos:end="56:25"><name pos:start="56:21" pos:end="56:23">now</name><operator pos:start="56:24" pos:end="56:24">.</operator><name pos:start="56:25" pos:end="56:25">r</name></name><operator pos:start="56:26" pos:end="56:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="58:13" pos:end="69:13"><if pos:start="58:13" pos:end="69:13">if<condition pos:start="58:15" pos:end="58:58">(<expr pos:start="58:16" pos:end="58:57"><call pos:start="58:16" pos:end="58:24"><name pos:start="58:16" pos:end="58:17">in</name><argument_list pos:start="58:18" pos:end="58:24">(<argument pos:start="58:19" pos:end="58:20"><expr pos:start="58:19" pos:end="58:20"><name pos:start="58:19" pos:end="58:20">tx</name></expr></argument>,<argument pos:start="58:22" pos:end="58:23"><expr pos:start="58:22" pos:end="58:23"><name pos:start="58:22" pos:end="58:23">ty</name></expr></argument>)</argument_list></call><operator pos:start="58:25" pos:end="58:26">&amp;&amp;</operator><name pos:start="58:27" pos:end="58:38"><name pos:start="58:27" pos:end="58:30">maze</name><index pos:start="58:31" pos:end="58:34">[<expr pos:start="58:32" pos:end="58:33"><name pos:start="58:32" pos:end="58:33">tx</name></expr>]</index><index pos:start="58:35" pos:end="58:38">[<expr pos:start="58:36" pos:end="58:37"><name pos:start="58:36" pos:end="58:37">ty</name></expr>]</index></name><operator pos:start="58:39" pos:end="58:40">!=</operator><literal type="char" pos:start="58:41" pos:end="58:43">'*'</literal><operator pos:start="58:44" pos:end="58:45">&amp;&amp;</operator><operator pos:start="58:46" pos:end="58:46">!</operator><name pos:start="58:47" pos:end="58:57"><name pos:start="58:47" pos:end="58:49">vis</name><index pos:start="58:50" pos:end="58:53">[<expr pos:start="58:51" pos:end="58:52"><name pos:start="58:51" pos:end="58:52">tx</name></expr>]</index><index pos:start="58:54" pos:end="58:57">[<expr pos:start="58:55" pos:end="58:56"><name pos:start="58:55" pos:end="58:56">ty</name></expr>]</index></name></expr>)</condition>
            <block pos:start="59:13" pos:end="69:13">{<block_content pos:start="60:17" pos:end="68:17">
                <if_stmt pos:start="60:17" pos:end="68:17"><if pos:start="60:17" pos:end="63:17">if<condition pos:start="60:19" pos:end="60:44">(<expr pos:start="60:20" pos:end="60:43"><name pos:start="60:20" pos:end="60:21">tx</name><operator pos:start="60:22" pos:end="60:23">==</operator><name pos:start="60:24" pos:end="60:25">x2</name><operator pos:start="60:26" pos:end="60:27">&amp;&amp;</operator><name pos:start="60:28" pos:end="60:29">ty</name><operator pos:start="60:30" pos:end="60:31">==</operator><name pos:start="60:32" pos:end="60:33">y2</name><operator pos:start="60:34" pos:end="60:35">&amp;&amp;</operator><name pos:start="60:36" pos:end="60:40"><name pos:start="60:36" pos:end="60:38">now</name><operator pos:start="60:39" pos:end="60:39">.</operator><name pos:start="60:40" pos:end="60:40">r</name></name><operator pos:start="60:41" pos:end="60:42">&lt;=</operator><name pos:start="60:43" pos:end="60:43">k</name></expr>)</condition>
                <block pos:start="61:17" pos:end="63:17">{<block_content pos:start="62:21" pos:end="62:32">
                    <return pos:start="62:21" pos:end="62:32">return <expr pos:start="62:28" pos:end="62:31"><literal type="boolean" pos:start="62:28" pos:end="62:31">true</literal></expr>;</return>
                </block_content>}</block></if>
                <else pos:start="64:17" pos:end="68:17">else
                <block pos:start="65:17" pos:end="68:17">{<block_content pos:start="66:21" pos:end="67:48">
                    <expr_stmt pos:start="66:21" pos:end="66:37"><expr pos:start="66:21" pos:end="66:36"><name pos:start="66:21" pos:end="66:31"><name pos:start="66:21" pos:end="66:23">vis</name><index pos:start="66:24" pos:end="66:27">[<expr pos:start="66:25" pos:end="66:26"><name pos:start="66:25" pos:end="66:26">tx</name></expr>]</index><index pos:start="66:28" pos:end="66:31">[<expr pos:start="66:29" pos:end="66:30"><name pos:start="66:29" pos:end="66:30">ty</name></expr>]</index></name><operator pos:start="66:32" pos:end="66:32">=</operator><literal type="boolean" pos:start="66:33" pos:end="66:36">true</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="67:21" pos:end="67:48"><expr pos:start="67:21" pos:end="67:47"><call pos:start="67:21" pos:end="67:47"><name pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:21">q</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:26">push</name></name><argument_list pos:start="67:27" pos:end="67:47">(<argument pos:start="67:28" pos:end="67:46"><expr pos:start="67:28" pos:end="67:46"><call pos:start="67:28" pos:end="67:46"><name pos:start="67:28" pos:end="67:31">node</name><argument_list pos:start="67:32" pos:end="67:46">(<argument pos:start="67:33" pos:end="67:34"><expr pos:start="67:33" pos:end="67:34"><name pos:start="67:33" pos:end="67:34">tx</name></expr></argument>,<argument pos:start="67:36" pos:end="67:37"><expr pos:start="67:36" pos:end="67:37"><name pos:start="67:36" pos:end="67:37">ty</name></expr></argument>,<argument pos:start="67:39" pos:end="67:43"><expr pos:start="67:39" pos:end="67:43"><name pos:start="67:39" pos:end="67:43"><name pos:start="67:39" pos:end="67:41">now</name><operator pos:start="67:42" pos:end="67:42">.</operator><name pos:start="67:43" pos:end="67:43">r</name></name></expr></argument>,<argument pos:start="67:45" pos:end="67:45"><expr pos:start="67:45" pos:end="67:45"><name pos:start="67:45" pos:end="67:45">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></while>
</block_content>}</block></function>
<function pos:start="73:1" pos:end="90:1"><type pos:start="73:1" pos:end="73:3"><name pos:start="73:1" pos:end="73:3">int</name></type> <name pos:start="73:5" pos:end="73:8">main</name><parameter_list pos:start="73:9" pos:end="73:10">()</parameter_list>
<block pos:start="74:1" pos:end="90:1">{<block_content pos:start="75:5" pos:end="89:13">
    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><call pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:11">freopen</name><argument_list pos:start="75:12" pos:end="75:32">(<argument pos:start="75:13" pos:end="75:21"><expr pos:start="75:13" pos:end="75:21"><literal type="string" pos:start="75:13" pos:end="75:21">"maze.in"</literal></expr></argument>,<argument pos:start="75:23" pos:end="75:25"><expr pos:start="75:23" pos:end="75:25"><literal type="string" pos:start="75:23" pos:end="75:25">"r"</literal></expr></argument>,<argument pos:start="75:27" pos:end="75:31"><expr pos:start="75:27" pos:end="75:31"><name pos:start="75:27" pos:end="75:31">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:35"><expr pos:start="76:5" pos:end="76:34"><call pos:start="76:5" pos:end="76:34"><name pos:start="76:5" pos:end="76:11">freopen</name><argument_list pos:start="76:12" pos:end="76:34">(<argument pos:start="76:13" pos:end="76:22"><expr pos:start="76:13" pos:end="76:22"><literal type="string" pos:start="76:13" pos:end="76:22">"maze.out"</literal></expr></argument>,<argument pos:start="76:24" pos:end="76:26"><expr pos:start="76:24" pos:end="76:26"><literal type="string" pos:start="76:24" pos:end="76:26">"w"</literal></expr></argument>,<argument pos:start="76:28" pos:end="76:33"><expr pos:start="76:28" pos:end="76:33"><name pos:start="76:28" pos:end="76:33">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="77:11"><expr pos:start="77:5" pos:end="77:10"><name pos:start="77:5" pos:end="77:7">cin</name><operator pos:start="77:8" pos:end="77:9">&gt;&gt;</operator><name pos:start="77:10" pos:end="77:10">t</name></expr>;</expr_stmt>
    <for pos:start="78:5" pos:end="88:5">for<control pos:start="78:8" pos:end="78:24">(<init pos:start="78:9" pos:end="78:16"><decl pos:start="78:9" pos:end="78:15"><type pos:start="78:9" pos:end="78:11"><name pos:start="78:9" pos:end="78:11">int</name></type> <name pos:start="78:13" pos:end="78:13">i</name><init pos:start="78:14" pos:end="78:15">=<expr pos:start="78:15" pos:end="78:15"><literal type="number" pos:start="78:15" pos:end="78:15">0</literal></expr></init></decl>;</init><condition pos:start="78:17" pos:end="78:20"><expr pos:start="78:17" pos:end="78:19"><name pos:start="78:17" pos:end="78:17">i</name><operator pos:start="78:18" pos:end="78:18">&lt;</operator><name pos:start="78:19" pos:end="78:19">t</name></expr>;</condition><incr pos:start="78:21" pos:end="78:23"><expr pos:start="78:21" pos:end="78:23"><name pos:start="78:21" pos:end="78:21">i</name><operator pos:start="78:22" pos:end="78:23">++</operator></expr></incr>)</control>
    <block pos:start="79:5" pos:end="88:5">{<block_content pos:start="80:9" pos:end="87:30">
        <expr_stmt pos:start="80:9" pos:end="80:18"><expr pos:start="80:9" pos:end="80:17"><name pos:start="80:9" pos:end="80:11">cin</name><operator pos:start="80:12" pos:end="80:13">&gt;&gt;</operator><name pos:start="80:14" pos:end="80:14">m</name><operator pos:start="80:15" pos:end="80:16">&gt;&gt;</operator><name pos:start="80:17" pos:end="80:17">n</name></expr>;</expr_stmt>
        <for pos:start="81:9" pos:end="84:9">for<control pos:start="81:12" pos:end="81:28">(<init pos:start="81:13" pos:end="81:20"><decl pos:start="81:13" pos:end="81:19"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:17">j</name><init pos:start="81:18" pos:end="81:19">=<expr pos:start="81:19" pos:end="81:19"><literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr></init></decl>;</init><condition pos:start="81:21" pos:end="81:24"><expr pos:start="81:21" pos:end="81:23"><name pos:start="81:21" pos:end="81:21">j</name><operator pos:start="81:22" pos:end="81:22">&lt;</operator><name pos:start="81:23" pos:end="81:23">m</name></expr>;</condition><incr pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:25">j</name><operator pos:start="81:26" pos:end="81:27">++</operator></expr></incr>)</control>
        <block pos:start="82:9" pos:end="84:9">{<block_content pos:start="83:13" pos:end="83:25">
            <expr_stmt pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:15">cin</name><operator pos:start="83:16" pos:end="83:17">&gt;&gt;</operator><name pos:start="83:18" pos:end="83:24"><name pos:start="83:18" pos:end="83:21">maze</name><index pos:start="83:22" pos:end="83:24">[<expr pos:start="83:23" pos:end="83:23"><name pos:start="83:23" pos:end="83:23">j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:11">cin</name><operator pos:start="85:12" pos:end="85:13">&gt;&gt;</operator><name pos:start="85:14" pos:end="85:14">k</name><operator pos:start="85:15" pos:end="85:16">&gt;&gt;</operator><name pos:start="85:17" pos:end="85:18">x1</name><operator pos:start="85:19" pos:end="85:20">&gt;&gt;</operator><name pos:start="85:21" pos:end="85:22">y1</name><operator pos:start="85:23" pos:end="85:24">&gt;&gt;</operator><name pos:start="85:25" pos:end="85:26">x2</name><operator pos:start="85:27" pos:end="85:28">&gt;&gt;</operator><name pos:start="85:29" pos:end="85:30">y2</name></expr>;</expr_stmt>
        <if_stmt pos:start="86:9" pos:end="87:30"><if pos:start="86:9" pos:end="86:42">if<condition pos:start="86:11" pos:end="86:22">(<expr pos:start="86:12" pos:end="86:21"><call pos:start="86:12" pos:end="86:21"><name pos:start="86:12" pos:end="86:14">bfs</name><argument_list pos:start="86:15" pos:end="86:21">(<argument pos:start="86:16" pos:end="86:17"><expr pos:start="86:16" pos:end="86:17"><name pos:start="86:16" pos:end="86:17">x1</name></expr></argument>,<argument pos:start="86:19" pos:end="86:20"><expr pos:start="86:19" pos:end="86:20"><name pos:start="86:19" pos:end="86:20">x2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="86:25" pos:end="86:42"><block_content pos:start="86:25" pos:end="86:42">  <expr_stmt pos:start="86:25" pos:end="86:42"><expr pos:start="86:25" pos:end="86:41"><name pos:start="86:25" pos:end="86:28">cout</name><operator pos:start="86:29" pos:end="86:30">&lt;&lt;</operator><literal type="string" pos:start="86:31" pos:end="86:35">"yes"</literal><operator pos:start="86:36" pos:end="86:37">&lt;&lt;</operator><name pos:start="86:38" pos:end="86:41">endl</name></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="87:9" pos:end="87:30">else<block type="pseudo" pos:start="87:14" pos:end="87:30"><block_content pos:start="87:14" pos:end="87:30"> <expr_stmt pos:start="87:14" pos:end="87:30"><expr pos:start="87:14" pos:end="87:29"><name pos:start="87:14" pos:end="87:17">cout</name><operator pos:start="87:18" pos:end="87:19">&lt;&lt;</operator><literal type="string" pos:start="87:20" pos:end="87:23">"no"</literal><operator pos:start="87:24" pos:end="87:25">&lt;&lt;</operator><name pos:start="87:26" pos:end="87:29">endl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
