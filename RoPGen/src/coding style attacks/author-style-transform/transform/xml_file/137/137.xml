<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/137/137.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:18">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:16">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive><cpp:file pos:start="2:9" pos:end="2:16">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:17">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive><cpp:file pos:start="3:9" pos:end="3:17">&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:15">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive><cpp:file pos:start="4:9" pos:end="4:15">&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive><cpp:file pos:start="5:9" pos:end="5:13">&lt;set&gt;</cpp:file></cpp:include>
<cpp:include pos:start="6:1" pos:end="6:13">#<cpp:directive pos:start="6:2" pos:end="6:8">include</cpp:directive><cpp:file pos:start="6:9" pos:end="6:13">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:start="7:1" pos:end="7:19">#<cpp:directive pos:start="7:2" pos:end="7:8">include</cpp:directive><cpp:file pos:start="7:9" pos:end="7:19">&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include pos:start="8:1" pos:end="8:15">#<cpp:directive pos:start="8:2" pos:end="8:8">include</cpp:directive><cpp:file pos:start="8:9" pos:end="8:15">&lt;queue&gt;</cpp:file></cpp:include>
<cpp:define pos:start="9:1" pos:end="9:45">#<cpp:directive pos:start="9:2" pos:end="9:7">define</cpp:directive> <cpp:macro pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:12">_for</name><parameter_list pos:start="9:13" pos:end="9:19">(<parameter pos:start="9:14" pos:end="9:14"><type pos:start="9:14" pos:end="9:14"><name pos:start="9:14" pos:end="9:14">i</name></type></parameter>,<parameter pos:start="9:16" pos:end="9:16"><type pos:start="9:16" pos:end="9:16"><name pos:start="9:16" pos:end="9:16">a</name></type></parameter>,<parameter pos:start="9:18" pos:end="9:18"><type pos:start="9:18" pos:end="9:18"><name pos:start="9:18" pos:end="9:18">b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="9:21" pos:end="9:45">for (int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<using pos:start="10:1" pos:end="10:20">using <namespace pos:start="10:7" pos:end="10:20">namespace <name pos:start="10:17" pos:end="10:19">std</name>;</namespace></using>
<typedef pos:start="11:1" pos:end="11:26">typedef <type pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:12">pair</name><argument_list type="generic" pos:start="11:13" pos:end="11:21">&lt;<argument pos:start="11:14" pos:end="11:16"><expr pos:start="11:14" pos:end="11:16"><name pos:start="11:14" pos:end="11:16">int</name></expr></argument>,<argument pos:start="11:18" pos:end="11:20"><expr pos:start="11:18" pos:end="11:20"><name pos:start="11:18" pos:end="11:20">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="11:23" pos:end="11:25">PII</name>;</typedef>
<decl_stmt pos:start="12:1" pos:end="12:41"><decl pos:start="12:1" pos:end="12:17"><type pos:start="12:1" pos:end="12:9"><specifier pos:start="12:1" pos:end="12:5">const</specifier> <name pos:start="12:7" pos:end="12:9">int</name></type> <name pos:start="12:11" pos:end="12:11">N</name><init pos:start="12:12" pos:end="12:17">=<expr pos:start="12:13" pos:end="12:17"><literal type="number" pos:start="12:13" pos:end="12:17">10005</literal></expr></init></decl>,<decl pos:start="12:19" pos:end="12:25"><type ref="prev" pos:start="12:1" pos:end="12:9"/><name pos:start="12:19" pos:end="12:19">M</name><init pos:start="12:20" pos:end="12:25">=<expr pos:start="12:21" pos:end="12:25"><literal type="number" pos:start="12:21" pos:end="12:25">21000</literal></expr></init></decl>,<decl pos:start="12:27" pos:end="12:40"><type ref="prev" pos:start="12:1" pos:end="12:9"/><name pos:start="12:27" pos:end="12:29">INF</name><init pos:start="12:30" pos:end="12:40">=<expr pos:start="12:31" pos:end="12:40"><literal type="number" pos:start="12:31" pos:end="12:40">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="13:1" pos:end="13:8"><decl pos:start="13:1" pos:end="13:5"><type pos:start="13:1" pos:end="13:3"><name pos:start="13:1" pos:end="13:3">int</name></type> <name pos:start="13:5" pos:end="13:5">n</name></decl>,<decl pos:start="13:7" pos:end="13:7"><type ref="prev" pos:start="13:1" pos:end="13:3"/><name pos:start="13:7" pos:end="13:7">m</name></decl>;</decl_stmt>
<decl_stmt pos:start="14:1" pos:end="14:12"><decl pos:start="14:1" pos:end="14:11"><type pos:start="14:1" pos:end="14:6"><name pos:start="14:1" pos:end="14:6">string</name></type> <name pos:start="14:8" pos:end="14:11"><name pos:start="14:8" pos:end="14:8">a</name><index pos:start="14:9" pos:end="14:11">[<expr pos:start="14:10" pos:end="14:10"><name pos:start="14:10" pos:end="14:10">N</name></expr>]</index></name></decl>;</decl_stmt>
<struct pos:start="15:1" pos:end="22:2">struct <name pos:start="15:8" pos:end="15:11">node</name><block pos:start="15:12" pos:end="22:1">{<public type="default" pos:start="16:5" pos:end="21:5">
    <decl_stmt pos:start="16:5" pos:end="16:12"><decl pos:start="16:5" pos:end="16:9"><type pos:start="16:5" pos:end="16:7"><name pos:start="16:5" pos:end="16:7">int</name></type> <name pos:start="16:9" pos:end="16:9">x</name></decl>,<decl pos:start="16:11" pos:end="16:11"><type ref="prev" pos:start="16:5" pos:end="16:7"/><name pos:start="16:11" pos:end="16:11">y</name></decl>;</decl_stmt>
    <constructor pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:8">node</name> <parameter_list pos:start="17:10" pos:end="17:11">()</parameter_list><block pos:start="17:12" pos:end="17:13">{<block_content/>}</block></constructor>
    <constructor pos:start="18:5" pos:end="21:5"><name pos:start="18:5" pos:end="18:8">node</name> <parameter_list pos:start="18:10" pos:end="18:24">(<parameter pos:start="18:11" pos:end="18:16"><decl pos:start="18:11" pos:end="18:16"><type pos:start="18:11" pos:end="18:16"><name pos:start="18:11" pos:end="18:13">int</name></type> <name pos:start="18:15" pos:end="18:16">_x</name></decl></parameter>,<parameter pos:start="18:18" pos:end="18:23"><decl pos:start="18:18" pos:end="18:23"><type pos:start="18:18" pos:end="18:23"><name pos:start="18:18" pos:end="18:20">int</name></type> <name pos:start="18:22" pos:end="18:23">_y</name></decl></parameter>)</parameter_list><block pos:start="18:25" pos:end="21:5">{<block_content pos:start="19:9" pos:end="20:13">
        <expr_stmt pos:start="19:9" pos:end="19:13"><expr pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:9">x</name><operator pos:start="19:10" pos:end="19:10">=</operator><name pos:start="19:11" pos:end="19:12">_x</name></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:13"><expr pos:start="20:9" pos:end="20:12"><name pos:start="20:9" pos:end="20:9">y</name><operator pos:start="20:10" pos:end="20:10">=</operator><name pos:start="20:11" pos:end="20:12">_y</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</struct>
<decl_stmt pos:start="23:1" pos:end="23:14"><decl pos:start="23:1" pos:end="23:13"><type pos:start="23:1" pos:end="23:11"><name pos:start="23:1" pos:end="23:11"><name pos:start="23:1" pos:end="23:5">queue</name><argument_list type="generic" pos:start="23:6" pos:end="23:11">&lt;<argument pos:start="23:7" pos:end="23:10"><expr pos:start="23:7" pos:end="23:10"><name pos:start="23:7" pos:end="23:10">node</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="23:13" pos:end="23:13">q</name></decl>;</decl_stmt>
<decl_stmt pos:start="24:1" pos:end="24:24"><decl pos:start="24:1" pos:end="24:8"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:8"><name pos:start="24:5" pos:end="24:5">e</name><index pos:start="24:6" pos:end="24:8">[<expr pos:start="24:7" pos:end="24:7"><name pos:start="24:7" pos:end="24:7">M</name></expr>]</index></name></decl>,<decl pos:start="24:10" pos:end="24:14"><type ref="prev" pos:start="24:1" pos:end="24:3"/><name pos:start="24:10" pos:end="24:14"><name pos:start="24:10" pos:end="24:11">ne</name><index pos:start="24:12" pos:end="24:14">[<expr pos:start="24:13" pos:end="24:13"><name pos:start="24:13" pos:end="24:13">M</name></expr>]</index></name></decl>,<decl pos:start="24:16" pos:end="24:19"><type ref="prev" pos:start="24:1" pos:end="24:3"/><name pos:start="24:16" pos:end="24:19"><name pos:start="24:16" pos:end="24:16">h</name><index pos:start="24:17" pos:end="24:19">[<expr pos:start="24:18" pos:end="24:18"><name pos:start="24:18" pos:end="24:18">N</name></expr>]</index></name></decl>,<decl pos:start="24:21" pos:end="24:23"><type ref="prev" pos:start="24:1" pos:end="24:3"/><name pos:start="24:21" pos:end="24:23">idx</name></decl>;</decl_stmt>
<decl_stmt pos:start="25:1" pos:end="25:40"><decl pos:start="25:1" pos:end="25:12"><type pos:start="25:1" pos:end="25:3"><name pos:start="25:1" pos:end="25:3">int</name></type> <name pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:9">new_h</name><index pos:start="25:10" pos:end="25:12">[<expr pos:start="25:11" pos:end="25:11"><name pos:start="25:11" pos:end="25:11">N</name></expr>]</index></name></decl>,<decl pos:start="25:14" pos:end="25:21"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:14" pos:end="25:21"><name pos:start="25:14" pos:end="25:18">new_e</name><index pos:start="25:19" pos:end="25:21">[<expr pos:start="25:20" pos:end="25:20"><name pos:start="25:20" pos:end="25:20">M</name></expr>]</index></name></decl>,<decl pos:start="25:23" pos:end="25:31"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:23" pos:end="25:31"><name pos:start="25:23" pos:end="25:28">new_ne</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">M</name></expr>]</index></name></decl>,<decl pos:start="25:33" pos:end="25:39"><type ref="prev" pos:start="25:1" pos:end="25:3"/><name pos:start="25:33" pos:end="25:39">new_idx</name></decl>;</decl_stmt>
<decl_stmt pos:start="26:1" pos:end="26:16"><decl pos:start="26:1" pos:end="26:15"><type pos:start="26:1" pos:end="26:12"><name pos:start="26:1" pos:end="26:12"><name pos:start="26:1" pos:end="26:3">map</name><argument_list type="generic" pos:start="26:4" pos:end="26:12">&lt;<argument pos:start="26:5" pos:end="26:7"><expr pos:start="26:5" pos:end="26:7"><name pos:start="26:5" pos:end="26:7">int</name></expr></argument>,<argument pos:start="26:9" pos:end="26:11"><expr pos:start="26:9" pos:end="26:11"><name pos:start="26:9" pos:end="26:11">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="26:14" pos:end="26:15">mp</name></decl>;</decl_stmt>
<decl_stmt pos:start="27:1" pos:end="27:12"><decl pos:start="27:1" pos:end="27:11"><type pos:start="27:1" pos:end="27:3"><name pos:start="27:1" pos:end="27:3">int</name></type> <name pos:start="27:5" pos:end="27:9">times</name><init pos:start="27:10" pos:end="27:11">=<expr pos:start="27:11" pos:end="27:11"><literal type="number" pos:start="27:11" pos:end="27:11">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="28:18"><decl pos:start="28:1" pos:end="28:10"><type pos:start="28:1" pos:end="28:3"><name pos:start="28:1" pos:end="28:3">int</name></type> <name pos:start="28:5" pos:end="28:10"><name pos:start="28:5" pos:end="28:7">dfn</name><index pos:start="28:8" pos:end="28:10">[<expr pos:start="28:9" pos:end="28:9"><name pos:start="28:9" pos:end="28:9">N</name></expr>]</index></name></decl>,<decl pos:start="28:12" pos:end="28:17"><type ref="prev" pos:start="28:1" pos:end="28:3"/><name pos:start="28:12" pos:end="28:17"><name pos:start="28:12" pos:end="28:14">low</name><index pos:start="28:15" pos:end="28:17">[<expr pos:start="28:16" pos:end="28:16"><name pos:start="28:16" pos:end="28:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="29:1" pos:end="29:14"><decl pos:start="29:1" pos:end="29:13"><type pos:start="29:1" pos:end="29:3"><name pos:start="29:1" pos:end="29:3">int</name></type> <name pos:start="29:5" pos:end="29:11">scc_cnt</name><init pos:start="29:12" pos:end="29:13">=<expr pos:start="29:13" pos:end="29:13"><literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="30:1" pos:end="30:18"><decl pos:start="30:1" pos:end="30:12"><type pos:start="30:1" pos:end="30:3"><name pos:start="30:1" pos:end="30:3">int</name></type> <name pos:start="30:5" pos:end="30:12"><name pos:start="30:5" pos:end="30:9">sccno</name><index pos:start="30:10" pos:end="30:12">[<expr pos:start="30:11" pos:end="30:11"><name pos:start="30:11" pos:end="30:11">N</name></expr>]</index></name></decl>,<decl pos:start="30:14" pos:end="30:17"><type ref="prev" pos:start="30:1" pos:end="30:3"/><name pos:start="30:14" pos:end="30:17"><name pos:start="30:14" pos:end="30:14">w</name><index pos:start="30:15" pos:end="30:17">[<expr pos:start="30:16" pos:end="30:16"><name pos:start="30:16" pos:end="30:16">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="31:1" pos:end="31:16"><decl pos:start="31:1" pos:end="31:15"><type pos:start="31:1" pos:end="31:8"><name pos:start="31:1" pos:end="31:8"><name pos:start="31:1" pos:end="31:3">set</name><argument_list type="generic" pos:start="31:4" pos:end="31:8">&lt;<argument pos:start="31:5" pos:end="31:7"><expr pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="31:10" pos:end="31:15"><name pos:start="31:10" pos:end="31:12">scc</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><name pos:start="31:14" pos:end="31:14">N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="32:1" pos:end="32:13"><decl pos:start="32:1" pos:end="32:12"><type pos:start="32:1" pos:end="32:8"><name pos:start="32:1" pos:end="32:8"><name pos:start="32:1" pos:end="32:3">set</name><argument_list type="generic" pos:start="32:4" pos:end="32:8">&lt;<argument pos:start="32:5" pos:end="32:7"><expr pos:start="32:5" pos:end="32:7"><name pos:start="32:5" pos:end="32:7">PII</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="32:10" pos:end="32:12">vis</name></decl>;</decl_stmt>
<decl_stmt pos:start="33:1" pos:end="33:13"><decl pos:start="33:1" pos:end="33:12"><type pos:start="33:1" pos:end="33:10"><name pos:start="33:1" pos:end="33:10"><name pos:start="33:1" pos:end="33:5">stack</name><argument_list type="generic" pos:start="33:6" pos:end="33:10">&lt;<argument pos:start="33:7" pos:end="33:9"><expr pos:start="33:7" pos:end="33:9"><name pos:start="33:7" pos:end="33:9">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:start="33:12" pos:end="33:12">S</name></decl>;</decl_stmt>
<decl_stmt pos:start="34:1" pos:end="34:9"><decl pos:start="34:1" pos:end="34:8"><type pos:start="34:1" pos:end="34:3"><name pos:start="34:1" pos:end="34:3">int</name></type> <name pos:start="34:5" pos:end="34:8"><name pos:start="34:5" pos:end="34:5">f</name><index pos:start="34:6" pos:end="34:8">[<expr pos:start="34:7" pos:end="34:7"><name pos:start="34:7" pos:end="34:7">N</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="35:1" pos:end="39:1"><type pos:start="35:1" pos:end="35:11"><specifier pos:start="35:1" pos:end="35:6">inline</specifier> <name pos:start="35:8" pos:end="35:11">void</name></type> <name pos:start="35:13" pos:end="35:18">c_plus</name><parameter_list pos:start="35:19" pos:end="35:20">()</parameter_list><block pos:start="35:21" pos:end="39:1">{<block_content pos:start="36:5" pos:end="38:16">
    <expr_stmt pos:start="36:5" pos:end="36:32"><expr pos:start="36:5" pos:end="36:31"><call pos:start="36:5" pos:end="36:31"><name pos:start="36:5" pos:end="36:24"><name pos:start="36:5" pos:end="36:7">ios</name><operator pos:start="36:8" pos:end="36:9">::</operator><name pos:start="36:10" pos:end="36:24">sync_with_stdio</name></name><argument_list pos:start="36:25" pos:end="36:31">(<argument pos:start="36:26" pos:end="36:30"><expr pos:start="36:26" pos:end="36:30"><literal type="boolean" pos:start="36:26" pos:end="36:30">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:15"><expr pos:start="37:5" pos:end="37:14"><call pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:7">cin</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:11">tie</name></name><argument_list pos:start="37:12" pos:end="37:14">(<argument pos:start="37:13" pos:end="37:13"><expr pos:start="37:13" pos:end="37:13"><literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:16"><expr pos:start="38:5" pos:end="38:15"><call pos:start="38:5" pos:end="38:15"><name pos:start="38:5" pos:end="38:12"><name pos:start="38:5" pos:end="38:8">cout</name><operator pos:start="38:9" pos:end="38:9">.</operator><name pos:start="38:10" pos:end="38:12">tie</name></name><argument_list pos:start="38:13" pos:end="38:15">(<argument pos:start="38:14" pos:end="38:14"><expr pos:start="38:14" pos:end="38:14"><literal type="number" pos:start="38:14" pos:end="38:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="40:1" pos:end="42:1"><type pos:start="40:1" pos:end="40:10"><specifier pos:start="40:1" pos:end="40:6">inline</specifier> <name pos:start="40:8" pos:end="40:10">int</name></type> <name pos:start="40:12" pos:end="40:12">c</name><parameter_list pos:start="40:13" pos:end="40:25">(<parameter pos:start="40:14" pos:end="40:18"><decl pos:start="40:14" pos:end="40:18"><type pos:start="40:14" pos:end="40:18"><name pos:start="40:14" pos:end="40:16">int</name></type> <name pos:start="40:18" pos:end="40:18">x</name></decl></parameter>,<parameter pos:start="40:20" pos:end="40:24"><decl pos:start="40:20" pos:end="40:24"><type pos:start="40:20" pos:end="40:24"><name pos:start="40:20" pos:end="40:22">int</name></type> <name pos:start="40:24" pos:end="40:24">y</name></decl></parameter>)</parameter_list><block pos:start="40:26" pos:end="42:1">{<block_content pos:start="41:5" pos:end="41:19">
    <return pos:start="41:5" pos:end="41:19">return <expr pos:start="41:12" pos:end="41:18"><name pos:start="41:12" pos:end="41:12">m</name><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:14">x</name><operator pos:start="41:15" pos:end="41:15">+</operator><name pos:start="41:16" pos:end="41:16">y</name><operator pos:start="41:17" pos:end="41:17">+</operator><literal type="number" pos:start="41:18" pos:end="41:18">1</literal></expr>;</return>
</block_content>}</block></function>
<function pos:start="43:1" pos:end="46:1"><type pos:start="43:1" pos:end="43:11"><specifier pos:start="43:1" pos:end="43:6">inline</specifier> <name pos:start="43:8" pos:end="43:11">void</name></type> <name pos:start="43:13" pos:end="43:16">init</name><parameter_list pos:start="43:17" pos:end="43:18">()</parameter_list><block pos:start="43:19" pos:end="46:1">{<block_content pos:start="44:5" pos:end="45:27">
    <expr_stmt pos:start="44:5" pos:end="44:10"><expr pos:start="44:5" pos:end="44:9"><name pos:start="44:5" pos:end="44:7">idx</name><operator pos:start="44:8" pos:end="44:8">=</operator><literal type="number" pos:start="44:9" pos:end="44:9">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:27"><expr pos:start="45:5" pos:end="45:26"><call pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:10">memset</name><argument_list pos:start="45:11" pos:end="45:26">(<argument pos:start="45:12" pos:end="45:12"><expr pos:start="45:12" pos:end="45:12"><name pos:start="45:12" pos:end="45:12">h</name></expr></argument>,<argument pos:start="45:14" pos:end="45:15"><expr pos:start="45:14" pos:end="45:15"><operator pos:start="45:14" pos:end="45:14">-</operator><literal type="number" pos:start="45:15" pos:end="45:15">1</literal></expr></argument>,<argument pos:start="45:17" pos:end="45:25"><expr pos:start="45:17" pos:end="45:25"><sizeof pos:start="45:17" pos:end="45:25">sizeof<argument_list pos:start="45:23" pos:end="45:25">(<argument pos:start="45:24" pos:end="45:24"><expr pos:start="45:24" pos:end="45:24"><name pos:start="45:24" pos:end="45:24">h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="47:1" pos:end="51:1"><type pos:start="47:1" pos:end="47:11"><specifier pos:start="47:1" pos:end="47:6">inline</specifier> <name pos:start="47:8" pos:end="47:11">void</name></type> <name pos:start="47:13" pos:end="47:15">add</name><parameter_list pos:start="47:16" pos:end="47:28">(<parameter pos:start="47:17" pos:end="47:21"><decl pos:start="47:17" pos:end="47:21"><type pos:start="47:17" pos:end="47:21"><name pos:start="47:17" pos:end="47:19">int</name></type> <name pos:start="47:21" pos:end="47:21">a</name></decl></parameter>,<parameter pos:start="47:23" pos:end="47:27"><decl pos:start="47:23" pos:end="47:27"><type pos:start="47:23" pos:end="47:27"><name pos:start="47:23" pos:end="47:25">int</name></type> <name pos:start="47:27" pos:end="47:27">b</name></decl></parameter>)</parameter_list><block pos:start="47:29" pos:end="51:1">{<block_content pos:start="48:5" pos:end="50:15">
    <expr_stmt pos:start="48:5" pos:end="48:13"><expr pos:start="48:5" pos:end="48:12"><name pos:start="48:5" pos:end="48:10"><name pos:start="48:5" pos:end="48:5">e</name><index pos:start="48:6" pos:end="48:10">[<expr pos:start="48:7" pos:end="48:9"><name pos:start="48:7" pos:end="48:9">idx</name></expr>]</index></name><operator pos:start="48:11" pos:end="48:11">=</operator><name pos:start="48:12" pos:end="48:12">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:17"><expr pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:6">ne</name><index pos:start="49:7" pos:end="49:11">[<expr pos:start="49:8" pos:end="49:10"><name pos:start="49:8" pos:end="49:10">idx</name></expr>]</index></name><operator pos:start="49:12" pos:end="49:12">=</operator><name pos:start="49:13" pos:end="49:16"><name pos:start="49:13" pos:end="49:13">h</name><index pos:start="49:14" pos:end="49:16">[<expr pos:start="49:15" pos:end="49:15"><name pos:start="49:15" pos:end="49:15">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:15"><expr pos:start="50:5" pos:end="50:14"><name pos:start="50:5" pos:end="50:8"><name pos:start="50:5" pos:end="50:5">h</name><index pos:start="50:6" pos:end="50:8">[<expr pos:start="50:7" pos:end="50:7"><name pos:start="50:7" pos:end="50:7">a</name></expr>]</index></name><operator pos:start="50:9" pos:end="50:9">=</operator><name pos:start="50:10" pos:end="50:12">idx</name><operator pos:start="50:13" pos:end="50:14">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="52:1" pos:end="55:1"><type pos:start="52:1" pos:end="52:11"><specifier pos:start="52:1" pos:end="52:6">inline</specifier> <name pos:start="52:8" pos:end="52:11">void</name></type> <name pos:start="52:13" pos:end="52:20">new_init</name><parameter_list pos:start="52:21" pos:end="52:22">()</parameter_list><block pos:start="52:23" pos:end="55:1">{<block_content pos:start="53:5" pos:end="54:35">
    <expr_stmt pos:start="53:5" pos:end="53:14"><expr pos:start="53:5" pos:end="53:13"><name pos:start="53:5" pos:end="53:11">new_idx</name><operator pos:start="53:12" pos:end="53:12">=</operator><literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:35"><expr pos:start="54:5" pos:end="54:34"><call pos:start="54:5" pos:end="54:34"><name pos:start="54:5" pos:end="54:10">memset</name><argument_list pos:start="54:11" pos:end="54:34">(<argument pos:start="54:12" pos:end="54:16"><expr pos:start="54:12" pos:end="54:16"><name pos:start="54:12" pos:end="54:16">new_h</name></expr></argument>,<argument pos:start="54:18" pos:end="54:19"><expr pos:start="54:18" pos:end="54:19"><operator pos:start="54:18" pos:end="54:18">-</operator><literal type="number" pos:start="54:19" pos:end="54:19">1</literal></expr></argument>,<argument pos:start="54:21" pos:end="54:33"><expr pos:start="54:21" pos:end="54:33"><sizeof pos:start="54:21" pos:end="54:33">sizeof<argument_list pos:start="54:27" pos:end="54:33">(<argument pos:start="54:28" pos:end="54:32"><expr pos:start="54:28" pos:end="54:32"><name pos:start="54:28" pos:end="54:32">new_h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="56:1" pos:end="60:1"><type pos:start="56:1" pos:end="56:11"><specifier pos:start="56:1" pos:end="56:6">inline</specifier> <name pos:start="56:8" pos:end="56:11">void</name></type> <name pos:start="56:13" pos:end="56:19">new_add</name><parameter_list pos:start="56:20" pos:end="56:32">(<parameter pos:start="56:21" pos:end="56:25"><decl pos:start="56:21" pos:end="56:25"><type pos:start="56:21" pos:end="56:25"><name pos:start="56:21" pos:end="56:23">int</name></type> <name pos:start="56:25" pos:end="56:25">a</name></decl></parameter>,<parameter pos:start="56:27" pos:end="56:31"><decl pos:start="56:27" pos:end="56:31"><type pos:start="56:27" pos:end="56:31"><name pos:start="56:27" pos:end="56:29">int</name></type> <name pos:start="56:31" pos:end="56:31">b</name></decl></parameter>)</parameter_list><block pos:start="56:33" pos:end="60:1">{<block_content pos:start="57:5" pos:end="59:23">
    <expr_stmt pos:start="57:5" pos:end="57:21"><expr pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:9">new_e</name><index pos:start="57:10" pos:end="57:18">[<expr pos:start="57:11" pos:end="57:17"><name pos:start="57:11" pos:end="57:17">new_idx</name></expr>]</index></name><operator pos:start="57:19" pos:end="57:19">=</operator><name pos:start="57:20" pos:end="57:20">b</name></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:29"><expr pos:start="58:5" pos:end="58:28"><name pos:start="58:5" pos:end="58:19"><name pos:start="58:5" pos:end="58:10">new_ne</name><index pos:start="58:11" pos:end="58:19">[<expr pos:start="58:12" pos:end="58:18"><name pos:start="58:12" pos:end="58:18">new_idx</name></expr>]</index></name><operator pos:start="58:20" pos:end="58:20">=</operator><name pos:start="58:21" pos:end="58:28"><name pos:start="58:21" pos:end="58:25">new_h</name><index pos:start="58:26" pos:end="58:28">[<expr pos:start="58:27" pos:end="58:27"><name pos:start="58:27" pos:end="58:27">a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:9">new_h</name><index pos:start="59:10" pos:end="59:12">[<expr pos:start="59:11" pos:end="59:11"><name pos:start="59:11" pos:end="59:11">a</name></expr>]</index></name><operator pos:start="59:13" pos:end="59:13">=</operator><name pos:start="59:14" pos:end="59:20">new_idx</name><operator pos:start="59:21" pos:end="59:22">++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="61:1" pos:end="86:1"><type pos:start="61:1" pos:end="61:4"><name pos:start="61:1" pos:end="61:4">void</name></type> <name pos:start="61:6" pos:end="61:11">tarjan</name><parameter_list pos:start="61:12" pos:end="61:18">(<parameter pos:start="61:13" pos:end="61:17"><decl pos:start="61:13" pos:end="61:17"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:17">u</name></decl></parameter>)</parameter_list><block pos:start="61:19" pos:end="86:1">{<block_content pos:start="62:5" pos:end="85:5">
    <expr_stmt pos:start="62:5" pos:end="62:26"><expr pos:start="62:5" pos:end="62:25"><name pos:start="62:5" pos:end="62:10"><name pos:start="62:5" pos:end="62:7">dfn</name><index pos:start="62:8" pos:end="62:10">[<expr pos:start="62:9" pos:end="62:9"><name pos:start="62:9" pos:end="62:9">u</name></expr>]</index></name><operator pos:start="62:11" pos:end="62:11">=</operator><name pos:start="62:12" pos:end="62:17"><name pos:start="62:12" pos:end="62:14">low</name><index pos:start="62:15" pos:end="62:17">[<expr pos:start="62:16" pos:end="62:16"><name pos:start="62:16" pos:end="62:16">u</name></expr>]</index></name><operator pos:start="62:18" pos:end="62:18">=</operator><operator pos:start="62:19" pos:end="62:20">++</operator><name pos:start="62:21" pos:end="62:25">times</name></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:14"><expr pos:start="63:5" pos:end="63:13"><call pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:5">S</name><operator pos:start="63:6" pos:end="63:6">.</operator><name pos:start="63:7" pos:end="63:10">push</name></name><argument_list pos:start="63:11" pos:end="63:13">(<argument pos:start="63:12" pos:end="63:12"><expr pos:start="63:12" pos:end="63:12"><name pos:start="63:12" pos:end="63:12">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="64:5" pos:end="72:5">for <control pos:start="64:9" pos:end="64:31">(<init pos:start="64:10" pos:end="64:20"><decl pos:start="64:10" pos:end="64:19"><type pos:start="64:10" pos:end="64:12"><name pos:start="64:10" pos:end="64:12">int</name></type> <name pos:start="64:14" pos:end="64:14">i</name><init pos:start="64:15" pos:end="64:19">=<expr pos:start="64:16" pos:end="64:19"><name pos:start="64:16" pos:end="64:19"><name pos:start="64:16" pos:end="64:16">h</name><index pos:start="64:17" pos:end="64:19">[<expr pos:start="64:18" pos:end="64:18"><name pos:start="64:18" pos:end="64:18">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="64:21" pos:end="64:23"><expr pos:start="64:21" pos:end="64:22"><operator pos:start="64:21" pos:end="64:21">~</operator><name pos:start="64:22" pos:end="64:22">i</name></expr>;</condition><incr pos:start="64:24" pos:end="64:30"><expr pos:start="64:24" pos:end="64:30"><name pos:start="64:24" pos:end="64:24">i</name><operator pos:start="64:25" pos:end="64:25">=</operator><name pos:start="64:26" pos:end="64:30"><name pos:start="64:26" pos:end="64:27">ne</name><index pos:start="64:28" pos:end="64:30">[<expr pos:start="64:29" pos:end="64:29"><name pos:start="64:29" pos:end="64:29">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="64:32" pos:end="72:5">{<block_content pos:start="65:9" pos:end="71:9">
        <decl_stmt pos:start="65:9" pos:end="65:19"><decl pos:start="65:9" pos:end="65:18"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">v</name><init pos:start="65:14" pos:end="65:18">=<expr pos:start="65:15" pos:end="65:18"><name pos:start="65:15" pos:end="65:18"><name pos:start="65:15" pos:end="65:15">e</name><index pos:start="65:16" pos:end="65:18">[<expr pos:start="65:17" pos:end="65:17"><name pos:start="65:17" pos:end="65:17">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="66:9" pos:end="71:9"><if pos:start="66:9" pos:end="69:9">if <condition pos:start="66:12" pos:end="66:22">(<expr pos:start="66:13" pos:end="66:21"><name pos:start="66:13" pos:end="66:18"><name pos:start="66:13" pos:end="66:15">dfn</name><index pos:start="66:16" pos:end="66:18">[<expr pos:start="66:17" pos:end="66:17"><name pos:start="66:17" pos:end="66:17">v</name></expr>]</index></name><operator pos:start="66:19" pos:end="66:20">==</operator><literal type="number" pos:start="66:21" pos:end="66:21">0</literal></expr>)</condition><block pos:start="66:23" pos:end="69:9">{<block_content pos:start="67:13" pos:end="68:38">
            <expr_stmt pos:start="67:13" pos:end="67:22"><expr pos:start="67:13" pos:end="67:21"><call pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:18">tarjan</name><argument_list pos:start="67:19" pos:end="67:21">(<argument pos:start="67:20" pos:end="67:20"><expr pos:start="67:20" pos:end="67:20"><name pos:start="67:20" pos:end="67:20">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:38"><expr pos:start="68:13" pos:end="68:37"><name pos:start="68:13" pos:end="68:18"><name pos:start="68:13" pos:end="68:15">low</name><index pos:start="68:16" pos:end="68:18">[<expr pos:start="68:17" pos:end="68:17"><name pos:start="68:17" pos:end="68:17">u</name></expr>]</index></name><operator pos:start="68:19" pos:end="68:19">=</operator><call pos:start="68:20" pos:end="68:37"><name pos:start="68:20" pos:end="68:22">min</name><argument_list pos:start="68:23" pos:end="68:37">(<argument pos:start="68:24" pos:end="68:29"><expr pos:start="68:24" pos:end="68:29"><name pos:start="68:24" pos:end="68:29"><name pos:start="68:24" pos:end="68:26">low</name><index pos:start="68:27" pos:end="68:29">[<expr pos:start="68:28" pos:end="68:28"><name pos:start="68:28" pos:end="68:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="68:31" pos:end="68:36"><expr pos:start="68:31" pos:end="68:36"><name pos:start="68:31" pos:end="68:36"><name pos:start="68:31" pos:end="68:33">low</name><index pos:start="68:34" pos:end="68:36">[<expr pos:start="68:35" pos:end="68:35"><name pos:start="68:35" pos:end="68:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="69:10" pos:end="71:9">else if <condition pos:start="69:18" pos:end="69:28">(<expr pos:start="69:19" pos:end="69:27"><operator pos:start="69:19" pos:end="69:19">!</operator><name pos:start="69:20" pos:end="69:27"><name pos:start="69:20" pos:end="69:24">sccno</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">v</name></expr>]</index></name></expr>)</condition><block pos:start="69:29" pos:end="71:9">{<block_content pos:start="70:13" pos:end="70:38">
            <expr_stmt pos:start="70:13" pos:end="70:38"><expr pos:start="70:13" pos:end="70:37"><name pos:start="70:13" pos:end="70:18"><name pos:start="70:13" pos:end="70:15">low</name><index pos:start="70:16" pos:end="70:18">[<expr pos:start="70:17" pos:end="70:17"><name pos:start="70:17" pos:end="70:17">u</name></expr>]</index></name><operator pos:start="70:19" pos:end="70:19">=</operator><call pos:start="70:20" pos:end="70:37"><name pos:start="70:20" pos:end="70:22">min</name><argument_list pos:start="70:23" pos:end="70:37">(<argument pos:start="70:24" pos:end="70:29"><expr pos:start="70:24" pos:end="70:29"><name pos:start="70:24" pos:end="70:29"><name pos:start="70:24" pos:end="70:26">low</name><index pos:start="70:27" pos:end="70:29">[<expr pos:start="70:28" pos:end="70:28"><name pos:start="70:28" pos:end="70:28">u</name></expr>]</index></name></expr></argument>,<argument pos:start="70:31" pos:end="70:36"><expr pos:start="70:31" pos:end="70:36"><name pos:start="70:31" pos:end="70:36"><name pos:start="70:31" pos:end="70:33">dfn</name><index pos:start="70:34" pos:end="70:36">[<expr pos:start="70:35" pos:end="70:35"><name pos:start="70:35" pos:end="70:35">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:23">(<expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:11">low</name><index pos:start="73:12" pos:end="73:14">[<expr pos:start="73:13" pos:end="73:13"><name pos:start="73:13" pos:end="73:13">u</name></expr>]</index></name><operator pos:start="73:15" pos:end="73:16">==</operator><name pos:start="73:17" pos:end="73:22"><name pos:start="73:17" pos:end="73:19">dfn</name><index pos:start="73:20" pos:end="73:22">[<expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">u</name></expr>]</index></name></expr>)</condition><block pos:start="73:24" pos:end="85:5">{<block_content pos:start="74:9" pos:end="84:9">
        <expr_stmt pos:start="74:9" pos:end="74:18"><expr pos:start="74:9" pos:end="74:17"><name pos:start="74:9" pos:end="74:15">scc_cnt</name><operator pos:start="74:16" pos:end="74:17">++</operator></expr>;</expr_stmt>
        <while pos:start="75:9" pos:end="84:9">while <condition pos:start="75:15" pos:end="75:20">(<expr pos:start="75:16" pos:end="75:19"><literal type="boolean" pos:start="75:16" pos:end="75:19">true</literal></expr>)</condition><block pos:start="75:21" pos:end="84:9">{<block_content pos:start="76:13" pos:end="83:13">
            <decl_stmt pos:start="76:13" pos:end="76:26"><decl pos:start="76:13" pos:end="76:25"><type pos:start="76:13" pos:end="76:15"><name pos:start="76:13" pos:end="76:15">int</name></type> <name pos:start="76:17" pos:end="76:17">x</name><init pos:start="76:18" pos:end="76:25">=<expr pos:start="76:19" pos:end="76:25"><call pos:start="76:19" pos:end="76:25"><name pos:start="76:19" pos:end="76:23"><name pos:start="76:19" pos:end="76:19">S</name><operator pos:start="76:20" pos:end="76:20">.</operator><name pos:start="76:21" pos:end="76:23">top</name></name><argument_list pos:start="76:24" pos:end="76:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="77:13" pos:end="77:20"><expr pos:start="77:13" pos:end="77:19"><call pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:17"><name pos:start="77:13" pos:end="77:13">S</name><operator pos:start="77:14" pos:end="77:14">.</operator><name pos:start="77:15" pos:end="77:17">pop</name></name><argument_list pos:start="77:18" pos:end="77:19">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="78:13" pos:end="78:35"><expr pos:start="78:13" pos:end="78:34"><name pos:start="78:13" pos:end="78:24"><name pos:start="78:13" pos:end="78:15">scc</name><index pos:start="78:16" pos:end="78:24">[<expr pos:start="78:17" pos:end="78:23"><name pos:start="78:17" pos:end="78:23">scc_cnt</name></expr>]</index></name><operator pos:start="78:25" pos:end="78:25">.</operator><call pos:start="78:26" pos:end="78:34"><name pos:start="78:26" pos:end="78:31">insert</name><argument_list pos:start="78:32" pos:end="78:34">(<argument pos:start="78:33" pos:end="78:33"><expr pos:start="78:33" pos:end="78:33"><name pos:start="78:33" pos:end="78:33">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="79:13" pos:end="79:29"><expr pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:17">sccno</name><index pos:start="79:18" pos:end="79:20">[<expr pos:start="79:19" pos:end="79:19"><name pos:start="79:19" pos:end="79:19">x</name></expr>]</index></name><operator pos:start="79:21" pos:end="79:21">=</operator><name pos:start="79:22" pos:end="79:28">scc_cnt</name></expr>;</expr_stmt>
            <expr_stmt pos:start="80:13" pos:end="80:30"><expr pos:start="80:13" pos:end="80:29"><name pos:start="80:13" pos:end="80:22"><name pos:start="80:13" pos:end="80:13">w</name><index pos:start="80:14" pos:end="80:22">[<expr pos:start="80:15" pos:end="80:21"><name pos:start="80:15" pos:end="80:21">scc_cnt</name></expr>]</index></name><operator pos:start="80:23" pos:end="80:24">+=</operator><name pos:start="80:25" pos:end="80:29"><name pos:start="80:25" pos:end="80:26">mp</name><index pos:start="80:27" pos:end="80:29">[<expr pos:start="80:28" pos:end="80:28"><name pos:start="80:28" pos:end="80:28">x</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="81:13" pos:end="83:13"><if pos:start="81:13" pos:end="83:13">if <condition pos:start="81:16" pos:end="81:21">(<expr pos:start="81:17" pos:end="81:20"><name pos:start="81:17" pos:end="81:17">x</name><operator pos:start="81:18" pos:end="81:19">==</operator><name pos:start="81:20" pos:end="81:20">u</name></expr>)</condition><block pos:start="81:22" pos:end="83:13">{<block_content pos:start="82:17" pos:end="82:22">
                <break pos:start="82:17" pos:end="82:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function pos:start="87:1" pos:end="97:1"><type pos:start="87:1" pos:end="87:3"><name pos:start="87:1" pos:end="87:3">int</name></type> <name pos:start="87:5" pos:end="87:7">dfs</name><parameter_list pos:start="87:8" pos:end="87:14">(<parameter pos:start="87:9" pos:end="87:13"><decl pos:start="87:9" pos:end="87:13"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:13">u</name></decl></parameter>)</parameter_list><block pos:start="87:15" pos:end="97:1">{<block_content pos:start="88:5" pos:end="96:32">
    <if_stmt pos:start="88:5" pos:end="90:5"><if pos:start="88:5" pos:end="90:5">if <condition pos:start="88:8" pos:end="88:17">(<expr pos:start="88:9" pos:end="88:16"><name pos:start="88:9" pos:end="88:12"><name pos:start="88:9" pos:end="88:9">f</name><index pos:start="88:10" pos:end="88:12">[<expr pos:start="88:11" pos:end="88:11"><name pos:start="88:11" pos:end="88:11">u</name></expr>]</index></name><operator pos:start="88:13" pos:end="88:14">!=</operator><operator pos:start="88:15" pos:end="88:15">-</operator><literal type="number" pos:start="88:16" pos:end="88:16">1</literal></expr>)</condition><block pos:start="88:18" pos:end="90:5">{<block_content pos:start="89:9" pos:end="89:20">
        <return pos:start="89:9" pos:end="89:20">return <expr pos:start="89:16" pos:end="89:19"><name pos:start="89:16" pos:end="89:19"><name pos:start="89:16" pos:end="89:16">f</name><index pos:start="89:17" pos:end="89:19">[<expr pos:start="89:18" pos:end="89:18"><name pos:start="89:18" pos:end="89:18">u</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="91:5" pos:end="91:14"><decl pos:start="91:5" pos:end="91:13"><type pos:start="91:5" pos:end="91:7"><name pos:start="91:5" pos:end="91:7">int</name></type> <name pos:start="91:9" pos:end="91:11">res</name><init pos:start="91:12" pos:end="91:13">=<expr pos:start="91:13" pos:end="91:13"><literal type="number" pos:start="91:13" pos:end="91:13">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="92:5" pos:end="95:5">for <control pos:start="92:9" pos:end="92:39">(<init pos:start="92:10" pos:end="92:24"><decl pos:start="92:10" pos:end="92:23"><type pos:start="92:10" pos:end="92:12"><name pos:start="92:10" pos:end="92:12">int</name></type> <name pos:start="92:14" pos:end="92:14">i</name><init pos:start="92:15" pos:end="92:23">=<expr pos:start="92:16" pos:end="92:23"><name pos:start="92:16" pos:end="92:23"><name pos:start="92:16" pos:end="92:20">new_h</name><index pos:start="92:21" pos:end="92:23">[<expr pos:start="92:22" pos:end="92:22"><name pos:start="92:22" pos:end="92:22">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="92:25" pos:end="92:27"><expr pos:start="92:25" pos:end="92:26"><operator pos:start="92:25" pos:end="92:25">~</operator><name pos:start="92:26" pos:end="92:26">i</name></expr>;</condition><incr pos:start="92:28" pos:end="92:38"><expr pos:start="92:28" pos:end="92:38"><name pos:start="92:28" pos:end="92:28">i</name><operator pos:start="92:29" pos:end="92:29">=</operator><name pos:start="92:30" pos:end="92:38"><name pos:start="92:30" pos:end="92:35">new_ne</name><index pos:start="92:36" pos:end="92:38">[<expr pos:start="92:37" pos:end="92:37"><name pos:start="92:37" pos:end="92:37">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="92:40" pos:end="95:5">{<block_content pos:start="93:9" pos:end="94:28">
        <decl_stmt pos:start="93:9" pos:end="93:23"><decl pos:start="93:9" pos:end="93:22"><type pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">int</name></type> <name pos:start="93:13" pos:end="93:13">v</name><init pos:start="93:14" pos:end="93:22">=<expr pos:start="93:15" pos:end="93:22"><name pos:start="93:15" pos:end="93:22"><name pos:start="93:15" pos:end="93:19">new_e</name><index pos:start="93:20" pos:end="93:22">[<expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="94:9" pos:end="94:28"><expr pos:start="94:9" pos:end="94:27"><name pos:start="94:9" pos:end="94:11">res</name><operator pos:start="94:12" pos:end="94:12">=</operator><call pos:start="94:13" pos:end="94:27"><name pos:start="94:13" pos:end="94:15">max</name><argument_list pos:start="94:16" pos:end="94:27">(<argument pos:start="94:17" pos:end="94:19"><expr pos:start="94:17" pos:end="94:19"><name pos:start="94:17" pos:end="94:19">res</name></expr></argument>,<argument pos:start="94:21" pos:end="94:26"><expr pos:start="94:21" pos:end="94:26"><call pos:start="94:21" pos:end="94:26"><name pos:start="94:21" pos:end="94:23">dfs</name><argument_list pos:start="94:24" pos:end="94:26">(<argument pos:start="94:25" pos:end="94:25"><expr pos:start="94:25" pos:end="94:25"><name pos:start="94:25" pos:end="94:25">v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return pos:start="96:5" pos:end="96:32">return <expr pos:start="96:12" pos:end="96:31"><name pos:start="96:12" pos:end="96:15"><name pos:start="96:12" pos:end="96:12">f</name><index pos:start="96:13" pos:end="96:15">[<expr pos:start="96:14" pos:end="96:14"><name pos:start="96:14" pos:end="96:14">u</name></expr>]</index></name><operator pos:start="96:16" pos:end="96:16">=</operator><name pos:start="96:17" pos:end="96:19">res</name><operator pos:start="96:20" pos:end="96:20">+</operator><name pos:start="96:21" pos:end="96:31"><name pos:start="96:21" pos:end="96:21">w</name><index pos:start="96:22" pos:end="96:31">[<expr pos:start="96:23" pos:end="96:30"><name pos:start="96:23" pos:end="96:30"><name pos:start="96:23" pos:end="96:27">sccno</name><index pos:start="96:28" pos:end="96:30">[<expr pos:start="96:29" pos:end="96:29"><name pos:start="96:29" pos:end="96:29">u</name></expr>]</index></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function pos:start="98:1" pos:end="163:1"><type pos:start="98:1" pos:end="98:3"><name pos:start="98:1" pos:end="98:3">int</name></type> <name pos:start="98:5" pos:end="98:8">main</name><parameter_list pos:start="98:9" pos:end="98:10">()</parameter_list><block pos:start="98:11" pos:end="163:1">{<block_content pos:start="99:5" pos:end="162:13">
    <expr_stmt pos:start="99:5" pos:end="99:13"><expr pos:start="99:5" pos:end="99:12"><call pos:start="99:5" pos:end="99:12"><name pos:start="99:5" pos:end="99:10">c_plus</name><argument_list pos:start="99:11" pos:end="99:12">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:11"><expr pos:start="100:5" pos:end="100:10"><call pos:start="100:5" pos:end="100:10"><name pos:start="100:5" pos:end="100:8">init</name><argument_list pos:start="100:9" pos:end="100:10">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="101:5" pos:end="101:14"><decl pos:start="101:5" pos:end="101:13"><type pos:start="101:5" pos:end="101:7"><name pos:start="101:5" pos:end="101:7">int</name></type> <name pos:start="101:9" pos:end="101:11">cnt</name><init pos:start="101:12" pos:end="101:13">=<expr pos:start="101:13" pos:end="101:13"><literal type="number" pos:start="101:13" pos:end="101:13">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:14"><expr pos:start="102:5" pos:end="102:13"><name pos:start="102:5" pos:end="102:7">cin</name><operator pos:start="102:8" pos:end="102:9">&gt;&gt;</operator><name pos:start="102:10" pos:end="102:10">n</name><operator pos:start="102:11" pos:end="102:12">&gt;&gt;</operator><name pos:start="102:13" pos:end="102:13">m</name></expr>;</expr_stmt>
    <macro pos:start="103:5" pos:end="103:15"><name pos:start="103:5" pos:end="103:8">_for</name><argument_list pos:start="103:9" pos:end="103:15">(<argument pos:start="103:10" pos:end="103:10">i</argument>,<argument pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></argument>,<argument pos:start="103:14" pos:end="103:14">n</argument>)</argument_list></macro><block pos:start="103:16" pos:end="110:5">{<block_content pos:start="104:9" pos:end="109:9">
        <expr_stmt pos:start="104:9" pos:end="104:18"><expr pos:start="104:9" pos:end="104:17"><name pos:start="104:9" pos:end="104:11">cin</name><operator pos:start="104:12" pos:end="104:13">&gt;&gt;</operator><name pos:start="104:14" pos:end="104:17"><name pos:start="104:14" pos:end="104:14">a</name><index pos:start="104:15" pos:end="104:17">[<expr pos:start="104:16" pos:end="104:16"><name pos:start="104:16" pos:end="104:16">i</name></expr>]</index></name></expr>;</expr_stmt>
        <for pos:start="105:9" pos:end="109:9">for <control pos:start="105:13" pos:end="105:25">(<init pos:start="105:14" pos:end="105:24"><decl pos:start="105:14" pos:end="105:24"><type pos:start="105:14" pos:end="105:17"><name pos:start="105:14" pos:end="105:17">auto</name></type> <name pos:start="105:19" pos:end="105:19">c</name><range pos:start="105:20" pos:end="105:24">:<expr pos:start="105:21" pos:end="105:24"><name pos:start="105:21" pos:end="105:24"><name pos:start="105:21" pos:end="105:21">a</name><index pos:start="105:22" pos:end="105:24">[<expr pos:start="105:23" pos:end="105:23"><name pos:start="105:23" pos:end="105:23">i</name></expr>]</index></name></expr></range></decl></init>)</control><block pos:start="105:26" pos:end="109:9">{<block_content pos:start="106:13" pos:end="108:13">
            <if_stmt pos:start="106:13" pos:end="108:13"><if pos:start="106:13" pos:end="108:13">if <condition pos:start="106:16" pos:end="106:23">(<expr pos:start="106:17" pos:end="106:22"><name pos:start="106:17" pos:end="106:17">c</name><operator pos:start="106:18" pos:end="106:19">==</operator><literal type="char" pos:start="106:20" pos:end="106:22">'*'</literal></expr>)</condition><block pos:start="106:24" pos:end="108:13">{<block_content pos:start="107:17" pos:end="107:22">
                <expr_stmt pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:19">cnt</name><operator pos:start="107:20" pos:end="107:21">++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <macro pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:8">_for</name><argument_list pos:start="111:9" pos:end="111:17">(<argument pos:start="111:10" pos:end="111:10">i</argument>,<argument pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></argument>,<argument pos:start="111:14" pos:end="111:16">cnt</argument>)</argument_list></macro><block pos:start="111:18" pos:end="115:5">{<block_content pos:start="112:9" pos:end="114:28">
        <decl_stmt pos:start="112:9" pos:end="112:18"><decl pos:start="112:9" pos:end="112:14"><type pos:start="112:9" pos:end="112:11"><name pos:start="112:9" pos:end="112:11">int</name></type> <name pos:start="112:13" pos:end="112:14">ex</name></decl>,<decl pos:start="112:16" pos:end="112:17"><type ref="prev" pos:start="112:9" pos:end="112:11"/><name pos:start="112:16" pos:end="112:17">ey</name></decl>;</decl_stmt>
        <expr_stmt pos:start="113:9" pos:end="113:20"><expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:11">cin</name><operator pos:start="113:12" pos:end="113:13">&gt;&gt;</operator><name pos:start="113:14" pos:end="113:15">ex</name><operator pos:start="113:16" pos:end="113:17">&gt;&gt;</operator><name pos:start="113:18" pos:end="113:19">ey</name></expr>;</expr_stmt>
        <expr_stmt pos:start="114:9" pos:end="114:28"><expr pos:start="114:9" pos:end="114:27"><call pos:start="114:9" pos:end="114:27"><name pos:start="114:9" pos:end="114:14"><name pos:start="114:9" pos:end="114:9">q</name><operator pos:start="114:10" pos:end="114:10">.</operator><name pos:start="114:11" pos:end="114:14">push</name></name><argument_list pos:start="114:15" pos:end="114:27">(<argument pos:start="114:16" pos:end="114:26"><expr pos:start="114:16" pos:end="114:26"><call pos:start="114:16" pos:end="114:26"><name pos:start="114:16" pos:end="114:19">node</name><argument_list pos:start="114:20" pos:end="114:26">(<argument pos:start="114:21" pos:end="114:22"><expr pos:start="114:21" pos:end="114:22"><name pos:start="114:21" pos:end="114:22">ex</name></expr></argument>,<argument pos:start="114:24" pos:end="114:25"><expr pos:start="114:24" pos:end="114:25"><name pos:start="114:24" pos:end="114:25">ey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro pos:start="116:5" pos:end="116:15"><name pos:start="116:5" pos:end="116:8">_for</name><argument_list pos:start="116:9" pos:end="116:15">(<argument pos:start="116:10" pos:end="116:10">i</argument>,<argument pos:start="116:12" pos:end="116:12"><literal type="number" pos:start="116:12" pos:end="116:12">0</literal></argument>,<argument pos:start="116:14" pos:end="116:14">n</argument>)</argument_list></macro><block pos:start="116:16" pos:end="141:5">{<block_content pos:start="117:9" pos:end="140:9">
        <macro pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:12">_for</name><argument_list pos:start="117:13" pos:end="117:19">(<argument pos:start="117:14" pos:end="117:14">j</argument>,<argument pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></argument>,<argument pos:start="117:18" pos:end="117:18">m</argument>)</argument_list></macro><block pos:start="117:20" pos:end="140:9">{<block_content pos:start="118:13" pos:end="139:13">
            <if_stmt pos:start="118:13" pos:end="121:13"><if pos:start="118:13" pos:end="121:13">if <condition pos:start="118:16" pos:end="118:29">(<expr pos:start="118:17" pos:end="118:28"><name pos:start="118:17" pos:end="118:23"><name pos:start="118:17" pos:end="118:17">a</name><index pos:start="118:18" pos:end="118:20">[<expr pos:start="118:19" pos:end="118:19"><name pos:start="118:19" pos:end="118:19">i</name></expr>]</index><index pos:start="118:21" pos:end="118:23">[<expr pos:start="118:22" pos:end="118:22"><name pos:start="118:22" pos:end="118:22">j</name></expr>]</index></name><operator pos:start="118:24" pos:end="118:25">==</operator><literal type="char" pos:start="118:26" pos:end="118:28">'#'</literal></expr>)</condition><block pos:start="118:30" pos:end="121:13">{<block_content pos:start="119:17" pos:end="120:25">
                <expr_stmt pos:start="119:17" pos:end="119:32"><expr pos:start="119:17" pos:end="119:31"><name pos:start="119:17" pos:end="119:26"><name pos:start="119:17" pos:end="119:18">mp</name><index pos:start="119:19" pos:end="119:26">[<expr pos:start="119:20" pos:end="119:25"><call pos:start="119:20" pos:end="119:25"><name pos:start="119:20" pos:end="119:20">c</name><argument_list pos:start="119:21" pos:end="119:25">(<argument pos:start="119:22" pos:end="119:22"><expr pos:start="119:22" pos:end="119:22"><name pos:start="119:22" pos:end="119:22">i</name></expr></argument>,<argument pos:start="119:24" pos:end="119:24"><expr pos:start="119:24" pos:end="119:24"><name pos:start="119:24" pos:end="119:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="119:27" pos:end="119:27">=</operator><operator pos:start="119:28" pos:end="119:28">-</operator><name pos:start="119:29" pos:end="119:31">INF</name></expr>;</expr_stmt>
                <continue pos:start="120:17" pos:end="120:25">continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="122:13" pos:end="126:13"><if pos:start="122:13" pos:end="126:13">if <condition pos:start="122:16" pos:end="122:29">(<expr pos:start="122:17" pos:end="122:28"><name pos:start="122:17" pos:end="122:23"><name pos:start="122:17" pos:end="122:17">a</name><index pos:start="122:18" pos:end="122:20">[<expr pos:start="122:19" pos:end="122:19"><name pos:start="122:19" pos:end="122:19">i</name></expr>]</index><index pos:start="122:21" pos:end="122:23">[<expr pos:start="122:22" pos:end="122:22"><name pos:start="122:22" pos:end="122:22">j</name></expr>]</index></name><operator pos:start="122:24" pos:end="122:25">==</operator><literal type="char" pos:start="122:26" pos:end="122:28">'*'</literal></expr>)</condition><block pos:start="122:30" pos:end="126:13">{<block_content pos:start="123:17" pos:end="125:24">
                <expr_stmt pos:start="123:17" pos:end="123:55"><expr pos:start="123:17" pos:end="123:54"><call pos:start="123:17" pos:end="123:54"><name pos:start="123:17" pos:end="123:19">add</name><argument_list pos:start="123:20" pos:end="123:54">(<argument pos:start="123:21" pos:end="123:26"><expr pos:start="123:21" pos:end="123:26"><call pos:start="123:21" pos:end="123:26"><name pos:start="123:21" pos:end="123:21">c</name><argument_list pos:start="123:22" pos:end="123:26">(<argument pos:start="123:23" pos:end="123:23"><expr pos:start="123:23" pos:end="123:23"><name pos:start="123:23" pos:end="123:23">i</name></expr></argument>,<argument pos:start="123:25" pos:end="123:25"><expr pos:start="123:25" pos:end="123:25"><name pos:start="123:25" pos:end="123:25">j</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="123:28" pos:end="123:53"><expr pos:start="123:28" pos:end="123:53"><call pos:start="123:28" pos:end="123:53"><name pos:start="123:28" pos:end="123:28">c</name><argument_list pos:start="123:29" pos:end="123:53">(<argument pos:start="123:30" pos:end="123:40"><expr pos:start="123:30" pos:end="123:40"><call pos:start="123:30" pos:end="123:38"><name pos:start="123:30" pos:end="123:36"><name pos:start="123:30" pos:end="123:30">q</name><operator pos:start="123:31" pos:end="123:31">.</operator><name pos:start="123:32" pos:end="123:36">front</name></name><argument_list pos:start="123:37" pos:end="123:38">()</argument_list></call><operator pos:start="123:39" pos:end="123:39">.</operator><name pos:start="123:40" pos:end="123:40">x</name></expr></argument>,<argument pos:start="123:42" pos:end="123:52"><expr pos:start="123:42" pos:end="123:52"><call pos:start="123:42" pos:end="123:50"><name pos:start="123:42" pos:end="123:48"><name pos:start="123:42" pos:end="123:42">q</name><operator pos:start="123:43" pos:end="123:43">.</operator><name pos:start="123:44" pos:end="123:48">front</name></name><argument_list pos:start="123:49" pos:end="123:50">()</argument_list></call><operator pos:start="123:51" pos:end="123:51">.</operator><name pos:start="123:52" pos:end="123:52">y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="124:17" pos:end="124:29"><expr pos:start="124:17" pos:end="124:28"><name pos:start="124:17" pos:end="124:26"><name pos:start="124:17" pos:end="124:18">mp</name><index pos:start="124:19" pos:end="124:26">[<expr pos:start="124:20" pos:end="124:25"><call pos:start="124:20" pos:end="124:25"><name pos:start="124:20" pos:end="124:20">c</name><argument_list pos:start="124:21" pos:end="124:25">(<argument pos:start="124:22" pos:end="124:22"><expr pos:start="124:22" pos:end="124:22"><name pos:start="124:22" pos:end="124:22">i</name></expr></argument>,<argument pos:start="124:24" pos:end="124:24"><expr pos:start="124:24" pos:end="124:24"><name pos:start="124:24" pos:end="124:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="124:27" pos:end="124:27">=</operator><literal type="number" pos:start="124:28" pos:end="124:28">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="125:17" pos:end="125:24"><expr pos:start="125:17" pos:end="125:23"><call pos:start="125:17" pos:end="125:23"><name pos:start="125:17" pos:end="125:21"><name pos:start="125:17" pos:end="125:17">q</name><operator pos:start="125:18" pos:end="125:18">.</operator><name pos:start="125:19" pos:end="125:21">pop</name></name><argument_list pos:start="125:22" pos:end="125:23">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="127:13" pos:end="131:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:21">(<expr pos:start="127:17" pos:end="127:20"><name pos:start="127:17" pos:end="127:17">i</name><operator pos:start="127:18" pos:end="127:19">!=</operator><literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>)</condition><block pos:start="127:22" pos:end="131:13">{<block_content pos:start="128:17" pos:end="130:17">
                <if_stmt pos:start="128:17" pos:end="130:17"><if pos:start="128:17" pos:end="130:17">if <condition pos:start="128:20" pos:end="128:35">(<expr pos:start="128:21" pos:end="128:34"><name pos:start="128:21" pos:end="128:29"><name pos:start="128:21" pos:end="128:21">a</name><index pos:start="128:22" pos:end="128:26">[<expr pos:start="128:23" pos:end="128:25"><name pos:start="128:23" pos:end="128:23">i</name><operator pos:start="128:24" pos:end="128:24">-</operator><literal type="number" pos:start="128:25" pos:end="128:25">1</literal></expr>]</index><index pos:start="128:27" pos:end="128:29">[<expr pos:start="128:28" pos:end="128:28"><name pos:start="128:28" pos:end="128:28">j</name></expr>]</index></name><operator pos:start="128:30" pos:end="128:31">!=</operator><literal type="char" pos:start="128:32" pos:end="128:34">'#'</literal></expr>)</condition><block pos:start="128:36" pos:end="130:17">{<block_content pos:start="129:21" pos:end="129:41">
                    <expr_stmt pos:start="129:21" pos:end="129:41"><expr pos:start="129:21" pos:end="129:40"><call pos:start="129:21" pos:end="129:40"><name pos:start="129:21" pos:end="129:23">add</name><argument_list pos:start="129:24" pos:end="129:40">(<argument pos:start="129:25" pos:end="129:32"><expr pos:start="129:25" pos:end="129:32"><call pos:start="129:25" pos:end="129:32"><name pos:start="129:25" pos:end="129:25">c</name><argument_list pos:start="129:26" pos:end="129:32">(<argument pos:start="129:27" pos:end="129:29"><expr pos:start="129:27" pos:end="129:29"><name pos:start="129:27" pos:end="129:27">i</name><operator pos:start="129:28" pos:end="129:28">-</operator><literal type="number" pos:start="129:29" pos:end="129:29">1</literal></expr></argument>,<argument pos:start="129:31" pos:end="129:31"><expr pos:start="129:31" pos:end="129:31"><name pos:start="129:31" pos:end="129:31">j</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="129:34" pos:end="129:39"><expr pos:start="129:34" pos:end="129:39"><call pos:start="129:34" pos:end="129:39"><name pos:start="129:34" pos:end="129:34">c</name><argument_list pos:start="129:35" pos:end="129:39">(<argument pos:start="129:36" pos:end="129:36"><expr pos:start="129:36" pos:end="129:36"><name pos:start="129:36" pos:end="129:36">i</name></expr></argument>,<argument pos:start="129:38" pos:end="129:38"><expr pos:start="129:38" pos:end="129:38"><name pos:start="129:38" pos:end="129:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="132:13" pos:end="136:13"><if pos:start="132:13" pos:end="136:13">if <condition pos:start="132:16" pos:end="132:21">(<expr pos:start="132:17" pos:end="132:20"><name pos:start="132:17" pos:end="132:17">j</name><operator pos:start="132:18" pos:end="132:19">!=</operator><literal type="number" pos:start="132:20" pos:end="132:20">0</literal></expr>)</condition><block pos:start="132:22" pos:end="136:13">{<block_content pos:start="133:17" pos:end="135:17">
                <if_stmt pos:start="133:17" pos:end="135:17"><if pos:start="133:17" pos:end="135:17">if <condition pos:start="133:20" pos:end="133:35">(<expr pos:start="133:21" pos:end="133:34"><name pos:start="133:21" pos:end="133:29"><name pos:start="133:21" pos:end="133:21">a</name><index pos:start="133:22" pos:end="133:24">[<expr pos:start="133:23" pos:end="133:23"><name pos:start="133:23" pos:end="133:23">i</name></expr>]</index><index pos:start="133:25" pos:end="133:29">[<expr pos:start="133:26" pos:end="133:28"><name pos:start="133:26" pos:end="133:26">j</name><operator pos:start="133:27" pos:end="133:27">-</operator><literal type="number" pos:start="133:28" pos:end="133:28">1</literal></expr>]</index></name><operator pos:start="133:30" pos:end="133:31">!=</operator><literal type="char" pos:start="133:32" pos:end="133:34">'#'</literal></expr>)</condition><block pos:start="133:36" pos:end="135:17">{<block_content pos:start="134:21" pos:end="134:41">
                    <expr_stmt pos:start="134:21" pos:end="134:41"><expr pos:start="134:21" pos:end="134:40"><call pos:start="134:21" pos:end="134:40"><name pos:start="134:21" pos:end="134:23">add</name><argument_list pos:start="134:24" pos:end="134:40">(<argument pos:start="134:25" pos:end="134:32"><expr pos:start="134:25" pos:end="134:32"><call pos:start="134:25" pos:end="134:32"><name pos:start="134:25" pos:end="134:25">c</name><argument_list pos:start="134:26" pos:end="134:32">(<argument pos:start="134:27" pos:end="134:27"><expr pos:start="134:27" pos:end="134:27"><name pos:start="134:27" pos:end="134:27">i</name></expr></argument>,<argument pos:start="134:29" pos:end="134:31"><expr pos:start="134:29" pos:end="134:31"><name pos:start="134:29" pos:end="134:29">j</name><operator pos:start="134:30" pos:end="134:30">-</operator><literal type="number" pos:start="134:31" pos:end="134:31">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="134:34" pos:end="134:39"><expr pos:start="134:34" pos:end="134:39"><call pos:start="134:34" pos:end="134:39"><name pos:start="134:34" pos:end="134:34">c</name><argument_list pos:start="134:35" pos:end="134:39">(<argument pos:start="134:36" pos:end="134:36"><expr pos:start="134:36" pos:end="134:36"><name pos:start="134:36" pos:end="134:36">i</name></expr></argument>,<argument pos:start="134:38" pos:end="134:38"><expr pos:start="134:38" pos:end="134:38"><name pos:start="134:38" pos:end="134:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="137:13" pos:end="139:13"><if pos:start="137:13" pos:end="139:13">if <condition pos:start="137:16" pos:end="137:34">(<expr pos:start="137:17" pos:end="137:33"><operator pos:start="137:17" pos:end="137:17">!</operator><call pos:start="137:18" pos:end="137:33"><name pos:start="137:18" pos:end="137:25"><name pos:start="137:18" pos:end="137:19">mp</name><operator pos:start="137:20" pos:end="137:20">.</operator><name pos:start="137:21" pos:end="137:25">count</name></name><argument_list pos:start="137:26" pos:end="137:33">(<argument pos:start="137:27" pos:end="137:32"><expr pos:start="137:27" pos:end="137:32"><call pos:start="137:27" pos:end="137:32"><name pos:start="137:27" pos:end="137:27">c</name><argument_list pos:start="137:28" pos:end="137:32">(<argument pos:start="137:29" pos:end="137:29"><expr pos:start="137:29" pos:end="137:29"><name pos:start="137:29" pos:end="137:29">i</name></expr></argument>,<argument pos:start="137:31" pos:end="137:31"><expr pos:start="137:31" pos:end="137:31"><name pos:start="137:31" pos:end="137:31">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="137:35" pos:end="139:13">{<block_content pos:start="138:17" pos:end="138:39">
                <expr_stmt pos:start="138:17" pos:end="138:39"><expr pos:start="138:17" pos:end="138:38"><name pos:start="138:17" pos:end="138:26"><name pos:start="138:17" pos:end="138:18">mp</name><index pos:start="138:19" pos:end="138:26">[<expr pos:start="138:20" pos:end="138:25"><call pos:start="138:20" pos:end="138:25"><name pos:start="138:20" pos:end="138:20">c</name><argument_list pos:start="138:21" pos:end="138:25">(<argument pos:start="138:22" pos:end="138:22"><expr pos:start="138:22" pos:end="138:22"><name pos:start="138:22" pos:end="138:22">i</name></expr></argument>,<argument pos:start="138:24" pos:end="138:24"><expr pos:start="138:24" pos:end="138:24"><name pos:start="138:24" pos:end="138:24">j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="138:27" pos:end="138:27">=</operator><name pos:start="138:28" pos:end="138:34"><name pos:start="138:28" pos:end="138:28">a</name><index pos:start="138:29" pos:end="138:31">[<expr pos:start="138:30" pos:end="138:30"><name pos:start="138:30" pos:end="138:30">i</name></expr>]</index><index pos:start="138:32" pos:end="138:34">[<expr pos:start="138:33" pos:end="138:33"><name pos:start="138:33" pos:end="138:33">j</name></expr>]</index></name><operator pos:start="138:35" pos:end="138:35">-</operator><literal type="char" pos:start="138:36" pos:end="138:38">'0'</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
    <decl_stmt pos:start="142:5" pos:end="142:19"><decl pos:start="142:5" pos:end="142:18"><type pos:start="142:5" pos:end="142:7"><name pos:start="142:5" pos:end="142:7">int</name></type> <name pos:start="142:9" pos:end="142:12">ncnt</name><init pos:start="142:13" pos:end="142:18">=<expr pos:start="142:14" pos:end="142:18"><name pos:start="142:14" pos:end="142:14">n</name><operator pos:start="142:15" pos:end="142:15">*</operator><name pos:start="142:16" pos:end="142:16">m</name><operator pos:start="142:17" pos:end="142:17">+</operator><literal type="number" pos:start="142:18" pos:end="142:18">1</literal></expr></init></decl>;</decl_stmt>
    <macro pos:start="143:5" pos:end="143:18"><name pos:start="143:5" pos:end="143:8">_for</name><argument_list pos:start="143:9" pos:end="143:18">(<argument pos:start="143:10" pos:end="143:10">i</argument>,<argument pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">1</literal></argument>,<argument pos:start="143:14" pos:end="143:17">ncnt</argument>)</argument_list></macro><block pos:start="143:19" pos:end="147:5">{<block_content pos:start="144:9" pos:end="146:9">
        <if_stmt pos:start="144:9" pos:end="146:9"><if pos:start="144:9" pos:end="146:9">if <condition pos:start="144:12" pos:end="144:35">(<expr pos:start="144:13" pos:end="144:34"><operator pos:start="144:13" pos:end="144:13">!</operator><name pos:start="144:14" pos:end="144:19"><name pos:start="144:14" pos:end="144:16">dfn</name><index pos:start="144:17" pos:end="144:19">[<expr pos:start="144:18" pos:end="144:18"><name pos:start="144:18" pos:end="144:18">i</name></expr>]</index></name> <operator pos:start="144:21" pos:end="144:22">&amp;&amp;</operator> <name pos:start="144:24" pos:end="144:28"><name pos:start="144:24" pos:end="144:25">mp</name><index pos:start="144:26" pos:end="144:28">[<expr pos:start="144:27" pos:end="144:27"><name pos:start="144:27" pos:end="144:27">i</name></expr>]</index></name><operator pos:start="144:29" pos:end="144:30">!=</operator><operator pos:start="144:31" pos:end="144:31">-</operator><name pos:start="144:32" pos:end="144:34">INF</name></expr>)</condition><block pos:start="144:36" pos:end="146:9">{<block_content pos:start="145:13" pos:end="145:22">
            <expr_stmt pos:start="145:13" pos:end="145:22"><expr pos:start="145:13" pos:end="145:21"><call pos:start="145:13" pos:end="145:21"><name pos:start="145:13" pos:end="145:18">tarjan</name><argument_list pos:start="145:19" pos:end="145:21">(<argument pos:start="145:20" pos:end="145:20"><expr pos:start="145:20" pos:end="145:20"><name pos:start="145:20" pos:end="145:20">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt pos:start="148:5" pos:end="148:15"><expr pos:start="148:5" pos:end="148:14"><call pos:start="148:5" pos:end="148:14"><name pos:start="148:5" pos:end="148:12">new_init</name><argument_list pos:start="148:13" pos:end="148:14">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="149:5" pos:end="149:26"><decl pos:start="149:5" pos:end="149:25"><type pos:start="149:5" pos:end="149:7"><name pos:start="149:5" pos:end="149:7">int</name></type> <name pos:start="149:9" pos:end="149:16">first_id</name><init pos:start="149:17" pos:end="149:25">=<expr pos:start="149:18" pos:end="149:25"><name pos:start="149:18" pos:end="149:25"><name pos:start="149:18" pos:end="149:22">sccno</name><index pos:start="149:23" pos:end="149:25">[<expr pos:start="149:24" pos:end="149:24"><literal type="number" pos:start="149:24" pos:end="149:24">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro pos:start="150:5" pos:end="150:18"><name pos:start="150:5" pos:end="150:8">_for</name><argument_list pos:start="150:9" pos:end="150:18">(<argument pos:start="150:10" pos:end="150:10">u</argument>,<argument pos:start="150:12" pos:end="150:12"><literal type="number" pos:start="150:12" pos:end="150:12">1</literal></argument>,<argument pos:start="150:14" pos:end="150:17">ncnt</argument>)</argument_list></macro><block pos:start="150:19" pos:end="158:5">{<block_content pos:start="151:9" pos:end="157:9">
        <for pos:start="151:9" pos:end="157:9">for <control pos:start="151:13" pos:end="151:35">(<init pos:start="151:14" pos:end="151:24"><decl pos:start="151:14" pos:end="151:23"><type pos:start="151:14" pos:end="151:16"><name pos:start="151:14" pos:end="151:16">int</name></type> <name pos:start="151:18" pos:end="151:18">i</name><init pos:start="151:19" pos:end="151:23">=<expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:20">h</name><index pos:start="151:21" pos:end="151:23">[<expr pos:start="151:22" pos:end="151:22"><name pos:start="151:22" pos:end="151:22">u</name></expr>]</index></name></expr></init></decl>;</init><condition pos:start="151:25" pos:end="151:27"><expr pos:start="151:25" pos:end="151:26"><operator pos:start="151:25" pos:end="151:25">~</operator><name pos:start="151:26" pos:end="151:26">i</name></expr>;</condition><incr pos:start="151:28" pos:end="151:34"><expr pos:start="151:28" pos:end="151:34"><name pos:start="151:28" pos:end="151:28">i</name><operator pos:start="151:29" pos:end="151:29">=</operator><name pos:start="151:30" pos:end="151:34"><name pos:start="151:30" pos:end="151:31">ne</name><index pos:start="151:32" pos:end="151:34">[<expr pos:start="151:33" pos:end="151:33"><name pos:start="151:33" pos:end="151:33">i</name></expr>]</index></name></expr></incr>)</control><block pos:start="151:36" pos:end="157:9">{<block_content pos:start="152:13" pos:end="156:13">
            <decl_stmt pos:start="152:13" pos:end="152:23"><decl pos:start="152:13" pos:end="152:22"><type pos:start="152:13" pos:end="152:15"><name pos:start="152:13" pos:end="152:15">int</name></type> <name pos:start="152:17" pos:end="152:17">v</name><init pos:start="152:18" pos:end="152:22">=<expr pos:start="152:19" pos:end="152:22"><name pos:start="152:19" pos:end="152:22"><name pos:start="152:19" pos:end="152:19">e</name><index pos:start="152:20" pos:end="152:22">[<expr pos:start="152:21" pos:end="152:21"><name pos:start="152:21" pos:end="152:21">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="153:13" pos:end="156:13"><if pos:start="153:13" pos:end="156:13">if <condition pos:start="153:16" pos:end="153:70">(<expr pos:start="153:17" pos:end="153:69"><name pos:start="153:17" pos:end="153:24"><name pos:start="153:17" pos:end="153:21">sccno</name><index pos:start="153:22" pos:end="153:24">[<expr pos:start="153:23" pos:end="153:23"><name pos:start="153:23" pos:end="153:23">u</name></expr>]</index></name><operator pos:start="153:25" pos:end="153:26">!=</operator><name pos:start="153:27" pos:end="153:34"><name pos:start="153:27" pos:end="153:31">sccno</name><index pos:start="153:32" pos:end="153:34">[<expr pos:start="153:33" pos:end="153:33"><name pos:start="153:33" pos:end="153:33">v</name></expr>]</index></name> <operator pos:start="153:36" pos:end="153:37">&amp;&amp;</operator> <operator pos:start="153:39" pos:end="153:39">!</operator><call pos:start="153:40" pos:end="153:69"><name pos:start="153:40" pos:end="153:48"><name pos:start="153:40" pos:end="153:42">vis</name><operator pos:start="153:43" pos:end="153:43">.</operator><name pos:start="153:44" pos:end="153:48">count</name></name><argument_list pos:start="153:49" pos:end="153:69">(<argument pos:start="153:50" pos:end="153:68"><expr pos:start="153:50" pos:end="153:68"><block pos:start="153:50" pos:end="153:68">{<expr pos:start="153:51" pos:end="153:58"><name pos:start="153:51" pos:end="153:58"><name pos:start="153:51" pos:end="153:55">sccno</name><index pos:start="153:56" pos:end="153:58">[<expr pos:start="153:57" pos:end="153:57"><name pos:start="153:57" pos:end="153:57">u</name></expr>]</index></name></expr>,<expr pos:start="153:60" pos:end="153:67"><name pos:start="153:60" pos:end="153:67"><name pos:start="153:60" pos:end="153:64">sccno</name><index pos:start="153:65" pos:end="153:67">[<expr pos:start="153:66" pos:end="153:66"><name pos:start="153:66" pos:end="153:66">v</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="153:71" pos:end="156:13">{<block_content pos:start="154:17" pos:end="155:43">
                <expr_stmt pos:start="154:17" pos:end="154:48"><expr pos:start="154:17" pos:end="154:47"><call pos:start="154:17" pos:end="154:47"><name pos:start="154:17" pos:end="154:26"><name pos:start="154:17" pos:end="154:19">vis</name><operator pos:start="154:20" pos:end="154:20">.</operator><name pos:start="154:21" pos:end="154:26">insert</name></name><argument_list pos:start="154:27" pos:end="154:47">(<argument pos:start="154:28" pos:end="154:46"><expr pos:start="154:28" pos:end="154:46"><block pos:start="154:28" pos:end="154:46">{<expr pos:start="154:29" pos:end="154:36"><name pos:start="154:29" pos:end="154:36"><name pos:start="154:29" pos:end="154:33">sccno</name><index pos:start="154:34" pos:end="154:36">[<expr pos:start="154:35" pos:end="154:35"><name pos:start="154:35" pos:end="154:35">u</name></expr>]</index></name></expr>,<expr pos:start="154:38" pos:end="154:45"><name pos:start="154:38" pos:end="154:45"><name pos:start="154:38" pos:end="154:42">sccno</name><index pos:start="154:43" pos:end="154:45">[<expr pos:start="154:44" pos:end="154:44"><name pos:start="154:44" pos:end="154:44">v</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="155:17" pos:end="155:43"><expr pos:start="155:17" pos:end="155:42"><call pos:start="155:17" pos:end="155:42"><name pos:start="155:17" pos:end="155:23">new_add</name><argument_list pos:start="155:24" pos:end="155:42">(<argument pos:start="155:25" pos:end="155:32"><expr pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:29">sccno</name><index pos:start="155:30" pos:end="155:32">[<expr pos:start="155:31" pos:end="155:31"><name pos:start="155:31" pos:end="155:31">u</name></expr>]</index></name></expr></argument>,<argument pos:start="155:34" pos:end="155:41"><expr pos:start="155:34" pos:end="155:41"><name pos:start="155:34" pos:end="155:41"><name pos:start="155:34" pos:end="155:38">sccno</name><index pos:start="155:39" pos:end="155:41">[<expr pos:start="155:40" pos:end="155:40"><name pos:start="155:40" pos:end="155:40">v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt pos:start="159:5" pos:end="159:27"><expr pos:start="159:5" pos:end="159:26"><call pos:start="159:5" pos:end="159:26"><name pos:start="159:5" pos:end="159:10">memset</name><argument_list pos:start="159:11" pos:end="159:26">(<argument pos:start="159:12" pos:end="159:12"><expr pos:start="159:12" pos:end="159:12"><name pos:start="159:12" pos:end="159:12">f</name></expr></argument>,<argument pos:start="159:14" pos:end="159:15"><expr pos:start="159:14" pos:end="159:15"><operator pos:start="159:14" pos:end="159:14">-</operator><literal type="number" pos:start="159:15" pos:end="159:15">1</literal></expr></argument>,<argument pos:start="159:17" pos:end="159:25"><expr pos:start="159:17" pos:end="159:25"><sizeof pos:start="159:17" pos:end="159:25">sizeof<argument_list pos:start="159:23" pos:end="159:25">(<argument pos:start="159:24" pos:end="159:24"><expr pos:start="159:24" pos:end="159:24"><name pos:start="159:24" pos:end="159:24">f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="160:5" pos:end="160:26"><decl pos:start="160:5" pos:end="160:25"><type pos:start="160:5" pos:end="160:7"><name pos:start="160:5" pos:end="160:7">int</name></type> <name pos:start="160:9" pos:end="160:11">ans</name><init pos:start="160:12" pos:end="160:25">=<expr pos:start="160:13" pos:end="160:25"><call pos:start="160:13" pos:end="160:25"><name pos:start="160:13" pos:end="160:15">dfs</name><argument_list pos:start="160:16" pos:end="160:25">(<argument pos:start="160:17" pos:end="160:24"><expr pos:start="160:17" pos:end="160:24"><name pos:start="160:17" pos:end="160:24">first_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="161:5" pos:end="161:20"><expr pos:start="161:5" pos:end="161:19"><name pos:start="161:5" pos:end="161:8">cout</name><operator pos:start="161:9" pos:end="161:10">&lt;&lt;</operator><name pos:start="161:11" pos:end="161:13">ans</name><operator pos:start="161:14" pos:end="161:15">&lt;&lt;</operator><name pos:start="161:16" pos:end="161:19">endl</name></expr>;</expr_stmt>
    <return pos:start="162:5" pos:end="162:13">return <expr pos:start="162:12" pos:end="162:12"><literal type="number" pos:start="162:12" pos:end="162:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
