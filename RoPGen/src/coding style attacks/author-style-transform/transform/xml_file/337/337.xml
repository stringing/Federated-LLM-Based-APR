<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="program_file/target_author_file/337/337.cpp" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:23">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive><cpp:file pos:start="1:9" pos:end="1:23">&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<decl_stmt pos:start="2:1" pos:end="2:25"><decl pos:start="2:1" pos:end="2:24"><type pos:start="2:1" pos:end="2:9"><specifier pos:start="2:1" pos:end="2:5">const</specifier> <name pos:start="2:7" pos:end="2:9">int</name></type> <name pos:start="2:11" pos:end="2:14">MAXN</name> <init pos:start="2:16" pos:end="2:24">= <expr pos:start="2:18" pos:end="2:24"><literal type="number" pos:start="2:18" pos:end="2:22">2e5</literal> <operator pos:start="2:22" pos:end="2:22">+</operator> <literal type="number" pos:start="2:24" pos:end="2:24">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="3:1" pos:end="3:6"><decl pos:start="3:1" pos:end="3:5"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:5">n</name></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:13"><decl pos:start="4:1" pos:end="4:12"><type pos:start="4:1" pos:end="4:4"><name pos:start="4:1" pos:end="4:4">char</name></type> <name pos:start="4:6" pos:end="4:12"><name pos:start="4:6" pos:end="4:6">s</name><index pos:start="4:7" pos:end="4:12">[<expr pos:start="4:8" pos:end="4:11"><name pos:start="4:8" pos:end="4:11">MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function pos:start="5:1" pos:end="30:1"><type pos:start="5:1" pos:end="5:4"><name pos:start="5:1" pos:end="5:4">bool</name></type> <name pos:start="5:6" pos:end="5:10">judge</name><parameter_list pos:start="5:11" pos:end="5:12">()</parameter_list><block pos:start="5:13" pos:end="30:1">{<block_content pos:start="6:5" pos:end="28:5">
    <if_stmt pos:start="6:5" pos:end="6:32"><if pos:start="6:5" pos:end="6:32">if<condition pos:start="6:7" pos:end="6:18">(<expr pos:start="6:8" pos:end="6:17"><name pos:start="6:8" pos:end="6:8">n</name> <operator pos:start="6:10" pos:end="6:10">%</operator> <literal type="number" pos:start="6:12" pos:end="6:12">8</literal> <operator pos:start="6:14" pos:end="6:15">!=</operator> <literal type="number" pos:start="6:17" pos:end="6:17">0</literal></expr>)</condition><block type="pseudo" pos:start="6:20" pos:end="6:32"><block_content pos:start="6:20" pos:end="6:32"> <return pos:start="6:20" pos:end="6:32">return <expr pos:start="6:27" pos:end="6:31"><literal type="boolean" pos:start="6:27" pos:end="6:31">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <for pos:start="7:5" pos:end="11:5">for<control pos:start="7:8" pos:end="7:31">(<init pos:start="7:9" pos:end="7:18"><decl pos:start="7:9" pos:end="7:17"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:13">i</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">1</literal></expr></init></decl>;</init> <condition pos:start="7:20" pos:end="7:26"><expr pos:start="7:20" pos:end="7:25"><name pos:start="7:20" pos:end="7:20">i</name> <operator pos:start="7:22" pos:end="7:23">&lt;=</operator> <name pos:start="7:25" pos:end="7:25">n</name></expr>;</condition> <incr pos:start="7:28" pos:end="7:30"><expr pos:start="7:28" pos:end="7:30"><name pos:start="7:28" pos:end="7:28">i</name><operator pos:start="7:29" pos:end="7:30">++</operator></expr></incr>)</control><block pos:start="7:32" pos:end="11:5">{<block_content pos:start="8:9" pos:end="10:9">
        <if_stmt pos:start="8:9" pos:end="10:9"><if pos:start="8:9" pos:end="10:9">if<condition pos:start="8:11" pos:end="8:38">(<expr pos:start="8:12" pos:end="8:37"><name pos:start="8:12" pos:end="8:15"><name pos:start="8:12" pos:end="8:12">s</name><index pos:start="8:13" pos:end="8:15">[<expr pos:start="8:14" pos:end="8:14"><name pos:start="8:14" pos:end="8:14">i</name></expr>]</index></name> <operator pos:start="8:17" pos:end="8:18">!=</operator> <literal type="char" pos:start="8:20" pos:end="8:22">'0'</literal> <operator pos:start="8:24" pos:end="8:25">&amp;&amp;</operator> <name pos:start="8:27" pos:end="8:30"><name pos:start="8:27" pos:end="8:27">s</name><index pos:start="8:28" pos:end="8:30">[<expr pos:start="8:29" pos:end="8:29"><name pos:start="8:29" pos:end="8:29">i</name></expr>]</index></name> <operator pos:start="8:32" pos:end="8:33">!=</operator> <literal type="char" pos:start="8:35" pos:end="8:37">'1'</literal></expr>)</condition><block pos:start="8:39" pos:end="10:9">{<block_content pos:start="9:13" pos:end="9:25">
            <return pos:start="9:13" pos:end="9:25">return <expr pos:start="9:20" pos:end="9:24"><literal type="boolean" pos:start="9:20" pos:end="9:24">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for pos:start="12:5" pos:end="28:5">for<control pos:start="12:8" pos:end="12:34">(<init pos:start="12:9" pos:end="12:18"><decl pos:start="12:9" pos:end="12:17"><type pos:start="12:9" pos:end="12:11"><name pos:start="12:9" pos:end="12:11">int</name></type> <name pos:start="12:13" pos:end="12:13">i</name> <init pos:start="12:15" pos:end="12:17">= <expr pos:start="12:17" pos:end="12:17"><literal type="number" pos:start="12:17" pos:end="12:17">1</literal></expr></init></decl>;</init> <condition pos:start="12:20" pos:end="12:26"><expr pos:start="12:20" pos:end="12:25"><name pos:start="12:20" pos:end="12:20">i</name> <operator pos:start="12:22" pos:end="12:23">&lt;=</operator> <name pos:start="12:25" pos:end="12:25">n</name></expr>;</condition> <incr pos:start="12:28" pos:end="12:33"><expr pos:start="12:28" pos:end="12:33"><name pos:start="12:28" pos:end="12:28">i</name> <operator pos:start="12:30" pos:end="12:31">+=</operator> <literal type="number" pos:start="12:33" pos:end="12:33">8</literal></expr></incr>)</control><block pos:start="12:35" pos:end="28:5">{<block_content pos:start="13:9" pos:end="27:9">
        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if<condition pos:start="13:11" pos:end="13:74">(<expr pos:start="13:12" pos:end="13:73"><call pos:start="13:12" pos:end="13:35"><name pos:start="13:12" pos:end="13:18">strncmp</name><argument_list pos:start="13:19" pos:end="13:35">(<argument pos:start="13:20" pos:end="13:24"><expr pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:20">s</name> <operator pos:start="13:22" pos:end="13:22">+</operator> <name pos:start="13:24" pos:end="13:24">i</name></expr></argument>, <argument pos:start="13:27" pos:end="13:31"><expr pos:start="13:27" pos:end="13:31"><literal type="string" pos:start="13:27" pos:end="13:31">"100"</literal></expr></argument>, <argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">3</literal></expr></argument>)</argument_list></call> <operator pos:start="13:37" pos:end="13:38">==</operator> <literal type="number" pos:start="13:40" pos:end="13:40">0</literal> <operator pos:start="13:42" pos:end="13:43">||</operator> <call pos:start="13:45" pos:end="13:68"><name pos:start="13:45" pos:end="13:51">strncmp</name><argument_list pos:start="13:52" pos:end="13:68">(<argument pos:start="13:53" pos:end="13:57"><expr pos:start="13:53" pos:end="13:57"><name pos:start="13:53" pos:end="13:53">s</name> <operator pos:start="13:55" pos:end="13:55">+</operator> <name pos:start="13:57" pos:end="13:57">i</name></expr></argument>, <argument pos:start="13:60" pos:end="13:64"><expr pos:start="13:60" pos:end="13:64"><literal type="string" pos:start="13:60" pos:end="13:64">"110"</literal></expr></argument>, <argument pos:start="13:67" pos:end="13:67"><expr pos:start="13:67" pos:end="13:67"><literal type="number" pos:start="13:67" pos:end="13:67">3</literal></expr></argument>)</argument_list></call> <operator pos:start="13:70" pos:end="13:71">==</operator> <literal type="number" pos:start="13:73" pos:end="13:73">0</literal></expr>)</condition>
        <block pos:start="14:9" pos:end="17:9">{<block_content pos:start="15:13" pos:end="16:19">
            <return pos:start="15:13" pos:end="15:25">return <expr pos:start="15:20" pos:end="15:24"><literal type="boolean" pos:start="15:20" pos:end="15:24">false</literal></expr>;</return>
            <expr_stmt pos:start="16:13" pos:end="16:19"><expr pos:start="16:13" pos:end="16:18"><name pos:start="16:13" pos:end="16:13">i</name> <operator pos:start="16:15" pos:end="16:16">+=</operator> <literal type="number" pos:start="16:18" pos:end="16:18">8</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="18:9" pos:end="27:9"><if pos:start="18:9" pos:end="27:9">if<condition pos:start="18:11" pos:end="18:41">(<expr pos:start="18:12" pos:end="18:40"><call pos:start="18:12" pos:end="18:35"><name pos:start="18:12" pos:end="18:18">strncmp</name><argument_list pos:start="18:19" pos:end="18:35">(<argument pos:start="18:20" pos:end="18:24"><expr pos:start="18:20" pos:end="18:24"><name pos:start="18:20" pos:end="18:20">s</name> <operator pos:start="18:22" pos:end="18:22">+</operator> <name pos:start="18:24" pos:end="18:24">i</name></expr></argument>, <argument pos:start="18:27" pos:end="18:31"><expr pos:start="18:27" pos:end="18:31"><literal type="string" pos:start="18:27" pos:end="18:31">"101"</literal></expr></argument>, <argument pos:start="18:34" pos:end="18:34"><expr pos:start="18:34" pos:end="18:34"><literal type="number" pos:start="18:34" pos:end="18:34">3</literal></expr></argument>)</argument_list></call> <operator pos:start="18:37" pos:end="18:38">==</operator> <literal type="number" pos:start="18:40" pos:end="18:40">0</literal></expr>)</condition><block pos:start="18:42" pos:end="27:9">{<block_content pos:start="19:13" pos:end="26:13">
            <decl_stmt pos:start="19:13" pos:end="19:24"><decl pos:start="19:13" pos:end="19:23"><type pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">int</name></type> <name pos:start="19:17" pos:end="19:19">tmp</name> <init pos:start="19:21" pos:end="19:23">= <expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></init></decl>;</decl_stmt>
            <for pos:start="20:13" pos:end="22:13">for<control pos:start="20:16" pos:end="20:46">(<init pos:start="20:17" pos:end="20:30"><decl pos:start="20:17" pos:end="20:29"><type pos:start="20:17" pos:end="20:19"><name pos:start="20:17" pos:end="20:19">int</name></type> <name pos:start="20:21" pos:end="20:21">j</name> <init pos:start="20:23" pos:end="20:29">= <expr pos:start="20:25" pos:end="20:29"><name pos:start="20:25" pos:end="20:25">i</name> <operator pos:start="20:27" pos:end="20:27">+</operator> <literal type="number" pos:start="20:29" pos:end="20:29">3</literal></expr></init></decl>;</init> <condition pos:start="20:32" pos:end="20:41"><expr pos:start="20:32" pos:end="20:40"><name pos:start="20:32" pos:end="20:32">j</name> <operator pos:start="20:34" pos:end="20:34">&lt;</operator> <name pos:start="20:36" pos:end="20:36">i</name> <operator pos:start="20:38" pos:end="20:38">+</operator> <literal type="number" pos:start="20:40" pos:end="20:40">8</literal></expr>;</condition> <incr pos:start="20:43" pos:end="20:45"><expr pos:start="20:43" pos:end="20:45"><name pos:start="20:43" pos:end="20:43">j</name><operator pos:start="20:44" pos:end="20:45">++</operator></expr></incr>)</control><block pos:start="20:47" pos:end="22:13">{<block_content pos:start="21:17" pos:end="21:45">
                <expr_stmt pos:start="21:17" pos:end="21:45"><expr pos:start="21:17" pos:end="21:44"><name pos:start="21:17" pos:end="21:19">tmp</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:25">tmp</name> <operator pos:start="21:27" pos:end="21:27">*</operator> <literal type="number" pos:start="21:29" pos:end="21:31">2</literal> <operator pos:start="21:31" pos:end="21:31">+</operator> <operator pos:start="21:33" pos:end="21:33">(</operator><name pos:start="21:34" pos:end="21:37"><name pos:start="21:34" pos:end="21:34">s</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">j</name></expr>]</index></name> <operator pos:start="21:39" pos:end="21:39">-</operator> <literal type="char" pos:start="21:41" pos:end="21:43">'0'</literal><operator pos:start="21:44" pos:end="21:44">)</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="23:13" pos:end="26:13"><if pos:start="23:13" pos:end="26:13">if<condition pos:start="23:15" pos:end="23:25">(<expr pos:start="23:16" pos:end="23:24"><name pos:start="23:16" pos:end="23:18">tmp</name> <operator pos:start="23:20" pos:end="23:21">&gt;=</operator> <literal type="number" pos:start="23:23" pos:end="23:24">26</literal></expr>)</condition>
            <block pos:start="24:13" pos:end="26:13">{<block_content pos:start="25:17" pos:end="25:29">
                <return pos:start="25:17" pos:end="25:29">return <expr pos:start="25:24" pos:end="25:28"><literal type="boolean" pos:start="25:24" pos:end="25:28">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    
</block_content>}</block></function>
<function pos:start="31:1" pos:end="70:1"><type pos:start="31:1" pos:end="31:3"><name pos:start="31:1" pos:end="31:3">int</name></type> <name pos:start="31:5" pos:end="31:8">main</name><parameter_list pos:start="31:9" pos:end="31:10">()</parameter_list>
<block pos:start="32:1" pos:end="70:1">{<block_content pos:start="33:5" pos:end="69:13">
    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><call pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:11">freopen</name><argument_list pos:start="33:12" pos:end="33:41">(<argument pos:start="33:13" pos:end="33:28"><expr pos:start="33:13" pos:end="33:28"><literal type="string" pos:start="33:13" pos:end="33:28">"information.in"</literal></expr></argument>, <argument pos:start="33:31" pos:end="33:33"><expr pos:start="33:31" pos:end="33:33"><literal type="string" pos:start="33:31" pos:end="33:33">"r"</literal></expr></argument>, <argument pos:start="33:36" pos:end="33:40"><expr pos:start="33:36" pos:end="33:40"><name pos:start="33:36" pos:end="33:40">stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:44"><expr pos:start="34:5" pos:end="34:43"><call pos:start="34:5" pos:end="34:43"><name pos:start="34:5" pos:end="34:11">freopen</name><argument_list pos:start="34:12" pos:end="34:43">(<argument pos:start="34:13" pos:end="34:29"><expr pos:start="34:13" pos:end="34:29"><literal type="string" pos:start="34:13" pos:end="34:29">"information.out"</literal></expr></argument>, <argument pos:start="34:32" pos:end="34:34"><expr pos:start="34:32" pos:end="34:34"><literal type="string" pos:start="34:32" pos:end="34:34">"w"</literal></expr></argument>, <argument pos:start="34:37" pos:end="34:42"><expr pos:start="34:37" pos:end="34:42"><name pos:start="34:37" pos:end="34:42">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><call pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:9">scanf</name><argument_list pos:start="35:10" pos:end="35:22">(<argument pos:start="35:11" pos:end="35:14"><expr pos:start="35:11" pos:end="35:14"><literal type="string" pos:start="35:11" pos:end="35:14">"%s"</literal></expr></argument>, <argument pos:start="35:17" pos:end="35:21"><expr pos:start="35:17" pos:end="35:21"><name pos:start="35:17" pos:end="35:17">s</name> <operator pos:start="35:19" pos:end="35:19">+</operator> <literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:22"><expr pos:start="36:5" pos:end="36:21"><name pos:start="36:5" pos:end="36:5">n</name> <operator pos:start="36:7" pos:end="36:7">=</operator> <call pos:start="36:9" pos:end="36:21"><name pos:start="36:9" pos:end="36:14">strlen</name><argument_list pos:start="36:15" pos:end="36:21">(<argument pos:start="36:16" pos:end="36:20"><expr pos:start="36:16" pos:end="36:20"><name pos:start="36:16" pos:end="36:16">s</name> <operator pos:start="36:18" pos:end="36:18">+</operator> <literal type="number" pos:start="36:20" pos:end="36:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="37:5" pos:end="68:5"><if pos:start="37:5" pos:end="39:5">if<condition pos:start="37:7" pos:end="37:16">(<expr pos:start="37:8" pos:end="37:15"><operator pos:start="37:8" pos:end="37:8">!</operator><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:13">judge</name><argument_list pos:start="37:14" pos:end="37:15">()</argument_list></call></expr>)</condition><block pos:start="37:17" pos:end="39:5">{<block_content pos:start="38:9" pos:end="38:26">
        <expr_stmt pos:start="38:9" pos:end="38:26"><expr pos:start="38:9" pos:end="38:25"><call pos:start="38:9" pos:end="38:25"><name pos:start="38:9" pos:end="38:14">printf</name><argument_list pos:start="38:15" pos:end="38:25">(<argument pos:start="38:16" pos:end="38:24"><expr pos:start="38:16" pos:end="38:24"><literal type="string" pos:start="38:16" pos:end="38:24">"Error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else pos:start="40:5" pos:end="68:5">else
    <block pos:start="41:5" pos:end="68:5">{<block_content pos:start="42:9" pos:end="67:9">
        <for pos:start="42:9" pos:end="67:9">for<control pos:start="42:12" pos:end="42:38">(<init pos:start="42:13" pos:end="42:22"><decl pos:start="42:13" pos:end="42:21"><type pos:start="42:13" pos:end="42:15"><name pos:start="42:13" pos:end="42:15">int</name></type> <name pos:start="42:17" pos:end="42:17">i</name> <init pos:start="42:19" pos:end="42:21">= <expr pos:start="42:21" pos:end="42:21"><literal type="number" pos:start="42:21" pos:end="42:21">1</literal></expr></init></decl>;</init> <condition pos:start="42:24" pos:end="42:30"><expr pos:start="42:24" pos:end="42:29"><name pos:start="42:24" pos:end="42:24">i</name> <operator pos:start="42:26" pos:end="42:27">&lt;=</operator> <name pos:start="42:29" pos:end="42:29">n</name></expr>;</condition> <incr pos:start="42:32" pos:end="42:37"><expr pos:start="42:32" pos:end="42:37"><name pos:start="42:32" pos:end="42:32">i</name> <operator pos:start="42:34" pos:end="42:35">+=</operator> <literal type="number" pos:start="42:37" pos:end="42:37">8</literal></expr></incr>)</control><block pos:start="42:39" pos:end="67:9">{<block_content pos:start="43:13" pos:end="66:13">
            <if_stmt pos:start="43:13" pos:end="66:13"><if pos:start="43:13" pos:end="51:13">if<condition pos:start="43:15" pos:end="43:45">(<expr pos:start="43:16" pos:end="43:44"><call pos:start="43:16" pos:end="43:39"><name pos:start="43:16" pos:end="43:22">strncmp</name><argument_list pos:start="43:23" pos:end="43:39">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:24">s</name> <operator pos:start="43:26" pos:end="43:26">+</operator> <name pos:start="43:28" pos:end="43:28">i</name></expr></argument>, <argument pos:start="43:31" pos:end="43:35"><expr pos:start="43:31" pos:end="43:35"><literal type="string" pos:start="43:31" pos:end="43:35">"101"</literal></expr></argument>, <argument pos:start="43:38" pos:end="43:38"><expr pos:start="43:38" pos:end="43:38"><literal type="number" pos:start="43:38" pos:end="43:38">3</literal></expr></argument>)</argument_list></call> <operator pos:start="43:41" pos:end="43:42">==</operator> <literal type="number" pos:start="43:44" pos:end="43:44">0</literal></expr>)</condition>
            <block pos:start="44:13" pos:end="51:13">{<block_content pos:start="45:17" pos:end="50:40">
                <decl_stmt pos:start="45:17" pos:end="45:28"><decl pos:start="45:17" pos:end="45:27"><type pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">int</name></type> <name pos:start="45:21" pos:end="45:23">tmp</name> <init pos:start="45:25" pos:end="45:27">= <expr pos:start="45:27" pos:end="45:27"><literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="46:17" pos:end="49:17">for<control pos:start="46:20" pos:end="46:50">(<init pos:start="46:21" pos:end="46:34"><decl pos:start="46:21" pos:end="46:33"><type pos:start="46:21" pos:end="46:23"><name pos:start="46:21" pos:end="46:23">int</name></type> <name pos:start="46:25" pos:end="46:25">j</name> <init pos:start="46:27" pos:end="46:33">= <expr pos:start="46:29" pos:end="46:33"><name pos:start="46:29" pos:end="46:29">i</name> <operator pos:start="46:31" pos:end="46:31">+</operator> <literal type="number" pos:start="46:33" pos:end="46:33">3</literal></expr></init></decl>;</init> <condition pos:start="46:36" pos:end="46:45"><expr pos:start="46:36" pos:end="46:44"><name pos:start="46:36" pos:end="46:36">j</name> <operator pos:start="46:38" pos:end="46:38">&lt;</operator> <name pos:start="46:40" pos:end="46:40">i</name> <operator pos:start="46:42" pos:end="46:42">+</operator> <literal type="number" pos:start="46:44" pos:end="46:44">8</literal></expr>;</condition> <incr pos:start="46:47" pos:end="46:49"><expr pos:start="46:47" pos:end="46:49"><name pos:start="46:47" pos:end="46:47">j</name><operator pos:start="46:48" pos:end="46:49">++</operator></expr></incr>)</control>
                <block pos:start="47:17" pos:end="49:17">{<block_content pos:start="48:21" pos:end="48:49">
                    <expr_stmt pos:start="48:21" pos:end="48:49"><expr pos:start="48:21" pos:end="48:48"><name pos:start="48:21" pos:end="48:23">tmp</name> <operator pos:start="48:25" pos:end="48:25">=</operator> <name pos:start="48:27" pos:end="48:29">tmp</name> <operator pos:start="48:31" pos:end="48:31">*</operator> <literal type="number" pos:start="48:33" pos:end="48:35">2</literal> <operator pos:start="48:35" pos:end="48:35">+</operator> <operator pos:start="48:37" pos:end="48:37">(</operator><name pos:start="48:38" pos:end="48:41"><name pos:start="48:38" pos:end="48:38">s</name><index pos:start="48:39" pos:end="48:41">[<expr pos:start="48:40" pos:end="48:40"><name pos:start="48:40" pos:end="48:40">j</name></expr>]</index></name> <operator pos:start="48:43" pos:end="48:43">-</operator> <literal type="char" pos:start="48:45" pos:end="48:47">'0'</literal><operator pos:start="48:48" pos:end="48:48">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="50:17" pos:end="50:40"><expr pos:start="50:17" pos:end="50:39"><call pos:start="50:17" pos:end="50:39"><name pos:start="50:17" pos:end="50:22">printf</name><argument_list pos:start="50:23" pos:end="50:39">(<argument pos:start="50:24" pos:end="50:27"><expr pos:start="50:24" pos:end="50:27"><literal type="string" pos:start="50:24" pos:end="50:27">"%c"</literal></expr></argument>, <argument pos:start="50:30" pos:end="50:38"><expr pos:start="50:30" pos:end="50:38"><literal type="char" pos:start="50:30" pos:end="50:32">'A'</literal> <operator pos:start="50:34" pos:end="50:34">+</operator> <name pos:start="50:36" pos:end="50:38">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif" pos:start="52:13" pos:end="54:13">else if<condition pos:start="52:20" pos:end="52:50">(<expr pos:start="52:21" pos:end="52:49"><call pos:start="52:21" pos:end="52:44"><name pos:start="52:21" pos:end="52:27">strncmp</name><argument_list pos:start="52:28" pos:end="52:44">(<argument pos:start="52:29" pos:end="52:33"><expr pos:start="52:29" pos:end="52:33"><name pos:start="52:29" pos:end="52:29">s</name> <operator pos:start="52:31" pos:end="52:31">+</operator> <name pos:start="52:33" pos:end="52:33">i</name></expr></argument>, <argument pos:start="52:36" pos:end="52:40"><expr pos:start="52:36" pos:end="52:40"><literal type="string" pos:start="52:36" pos:end="52:40">"111"</literal></expr></argument>, <argument pos:start="52:43" pos:end="52:43"><expr pos:start="52:43" pos:end="52:43"><literal type="number" pos:start="52:43" pos:end="52:43">3</literal></expr></argument>)</argument_list></call> <operator pos:start="52:46" pos:end="52:47">==</operator> <literal type="number" pos:start="52:49" pos:end="52:49">0</literal></expr>)</condition><block pos:start="52:51" pos:end="54:13">{<block_content pos:start="53:17" pos:end="53:28">
                <expr_stmt pos:start="53:17" pos:end="53:28"><expr pos:start="53:17" pos:end="53:27"><call pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:22">printf</name><argument_list pos:start="53:23" pos:end="53:27">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><literal type="string" pos:start="53:24" pos:end="53:26">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else pos:start="55:13" pos:end="66:13">else
            <block pos:start="56:13" pos:end="66:13">{<block_content pos:start="57:17" pos:end="65:56">
                <decl_stmt pos:start="57:17" pos:end="57:39"><decl pos:start="57:17" pos:end="57:28"><type pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">int</name></type> <name pos:start="57:21" pos:end="57:24">tmp1</name> <init pos:start="57:26" pos:end="57:28">= <expr pos:start="57:28" pos:end="57:28"><literal type="number" pos:start="57:28" pos:end="57:28">0</literal></expr></init></decl>, <decl pos:start="57:31" pos:end="57:38"><type ref="prev" pos:start="57:17" pos:end="57:19"/><name pos:start="57:31" pos:end="57:34">tmp2</name> <init pos:start="57:36" pos:end="57:38">= <expr pos:start="57:38" pos:end="57:38"><literal type="number" pos:start="57:38" pos:end="57:38">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="58:17" pos:end="60:17">for<control pos:start="58:20" pos:end="58:50">(<init pos:start="58:21" pos:end="58:34"><decl pos:start="58:21" pos:end="58:33"><type pos:start="58:21" pos:end="58:23"><name pos:start="58:21" pos:end="58:23">int</name></type> <name pos:start="58:25" pos:end="58:25">j</name> <init pos:start="58:27" pos:end="58:33">= <expr pos:start="58:29" pos:end="58:33"><name pos:start="58:29" pos:end="58:29">i</name> <operator pos:start="58:31" pos:end="58:31">+</operator> <literal type="number" pos:start="58:33" pos:end="58:33">1</literal></expr></init></decl>;</init> <condition pos:start="58:36" pos:end="58:45"><expr pos:start="58:36" pos:end="58:44"><name pos:start="58:36" pos:end="58:36">j</name> <operator pos:start="58:38" pos:end="58:38">&lt;</operator> <name pos:start="58:40" pos:end="58:40">i</name> <operator pos:start="58:42" pos:end="58:42">+</operator> <literal type="number" pos:start="58:44" pos:end="58:44">8</literal></expr>;</condition> <incr pos:start="58:47" pos:end="58:49"><expr pos:start="58:47" pos:end="58:49"><name pos:start="58:47" pos:end="58:47">j</name><operator pos:start="58:48" pos:end="58:49">++</operator></expr></incr>)</control><block pos:start="58:51" pos:end="60:17">{<block_content pos:start="59:21" pos:end="59:51">
                    <expr_stmt pos:start="59:21" pos:end="59:51"><expr pos:start="59:21" pos:end="59:50"><name pos:start="59:21" pos:end="59:24">tmp1</name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:31">tmp1</name> <operator pos:start="59:33" pos:end="59:33">*</operator> <literal type="number" pos:start="59:35" pos:end="59:37">2</literal> <operator pos:start="59:37" pos:end="59:37">+</operator> <operator pos:start="59:39" pos:end="59:39">(</operator><name pos:start="59:40" pos:end="59:43"><name pos:start="59:40" pos:end="59:40">s</name><index pos:start="59:41" pos:end="59:43">[<expr pos:start="59:42" pos:end="59:42"><name pos:start="59:42" pos:end="59:42">j</name></expr>]</index></name> <operator pos:start="59:45" pos:end="59:45">-</operator> <literal type="char" pos:start="59:47" pos:end="59:49">'0'</literal><operator pos:start="59:50" pos:end="59:50">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="61:17" pos:end="61:23"><expr pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:20">+=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">8</literal></expr>;</expr_stmt>
                <for pos:start="62:17" pos:end="64:17">for<control pos:start="62:20" pos:end="62:50">(<init pos:start="62:21" pos:end="62:34"><decl pos:start="62:21" pos:end="62:33"><type pos:start="62:21" pos:end="62:23"><name pos:start="62:21" pos:end="62:23">int</name></type> <name pos:start="62:25" pos:end="62:25">j</name> <init pos:start="62:27" pos:end="62:33">= <expr pos:start="62:29" pos:end="62:33"><name pos:start="62:29" pos:end="62:29">i</name> <operator pos:start="62:31" pos:end="62:31">+</operator> <literal type="number" pos:start="62:33" pos:end="62:33">1</literal></expr></init></decl>;</init> <condition pos:start="62:36" pos:end="62:45"><expr pos:start="62:36" pos:end="62:44"><name pos:start="62:36" pos:end="62:36">j</name> <operator pos:start="62:38" pos:end="62:38">&lt;</operator> <name pos:start="62:40" pos:end="62:40">i</name> <operator pos:start="62:42" pos:end="62:42">+</operator> <literal type="number" pos:start="62:44" pos:end="62:44">8</literal></expr>;</condition> <incr pos:start="62:47" pos:end="62:49"><expr pos:start="62:47" pos:end="62:49"><name pos:start="62:47" pos:end="62:47">j</name><operator pos:start="62:48" pos:end="62:49">++</operator></expr></incr>)</control><block pos:start="62:51" pos:end="64:17">{<block_content pos:start="63:21" pos:end="63:51">
                    <expr_stmt pos:start="63:21" pos:end="63:51"><expr pos:start="63:21" pos:end="63:50"><name pos:start="63:21" pos:end="63:24">tmp2</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:31">tmp2</name> <operator pos:start="63:33" pos:end="63:33">*</operator> <literal type="number" pos:start="63:35" pos:end="63:37">2</literal> <operator pos:start="63:37" pos:end="63:37">+</operator> <operator pos:start="63:39" pos:end="63:39">(</operator><name pos:start="63:40" pos:end="63:43"><name pos:start="63:40" pos:end="63:40">s</name><index pos:start="63:41" pos:end="63:43">[<expr pos:start="63:42" pos:end="63:42"><name pos:start="63:42" pos:end="63:42">j</name></expr>]</index></name> <operator pos:start="63:45" pos:end="63:45">-</operator> <literal type="char" pos:start="63:47" pos:end="63:49">'0'</literal><operator pos:start="63:50" pos:end="63:50">)</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt pos:start="65:17" pos:end="65:56"><expr pos:start="65:17" pos:end="65:55"><call pos:start="65:17" pos:end="65:55"><name pos:start="65:17" pos:end="65:22">printf</name><argument_list pos:start="65:23" pos:end="65:55">(<argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><literal type="string" pos:start="65:24" pos:end="65:27">"%d"</literal></expr></argument>, <argument pos:start="65:30" pos:end="65:54"><expr pos:start="65:30" pos:end="65:54"><operator pos:start="65:30" pos:end="65:30">(</operator><name pos:start="65:31" pos:end="65:34">tmp1</name> <operator pos:start="65:36" pos:end="65:37">&gt;&gt;</operator> <literal type="number" pos:start="65:39" pos:end="65:39">1</literal><operator pos:start="65:40" pos:end="65:40">)</operator> <operator pos:start="65:42" pos:end="65:42">+</operator> <operator pos:start="65:44" pos:end="65:44">(</operator><name pos:start="65:45" pos:end="65:48">tmp2</name> <operator pos:start="65:50" pos:end="65:51">&gt;&gt;</operator> <literal type="number" pos:start="65:53" pos:end="65:53">1</literal><operator pos:start="65:54" pos:end="65:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
